# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/bezier_api.rst:3
msgid "``matplotlib.bezier``"
msgstr ""

#: matplotlib.bezier:1 of
msgid ""
"A module providing some utility functions regarding Bezier path "
"manipulation."
msgstr ""

#: matplotlib.bezier.BezierSegment:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.bezier.BezierSegment:2 of
msgid "A d-dimensional Bezier segment."
msgstr ""

#: matplotlib.bezier.BezierSegment matplotlib.bezier.check_if_parallel
#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath
#: matplotlib.bezier.split_bezier_intersecting_with_closedpath of
msgid "Parameters"
msgstr ""

#: matplotlib.bezier.BezierSegment:21 of
msgid "**control_points**"
msgstr ""

#: of
msgid "(N, d) array"
msgstr ""

#: matplotlib.bezier.BezierSegment:8 of
msgid "Location of the *N* control points."
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:2 of
msgid "Return the dimension and location of the curve's interior extrema."
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:4 of
msgid ""
"The extrema are the points along the curve where one of its partial "
"derivatives is zero."
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema
#: matplotlib.bezier.BezierSegment.polynomial_coefficients
#: matplotlib.bezier.check_if_parallel
#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath
#: matplotlib.bezier.split_bezier_intersecting_with_closedpath of
msgid "Returns"
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:12 of
msgid "**dims**"
msgstr ""

#: of
msgid "array of int"
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:11 of
msgid ""
"Index :math:`i` of the partial derivative which is zero at each interior "
"extrema."
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:28 of
msgid "**dzeros**"
msgstr ""

#: of
msgid "array of float"
msgstr ""

#: matplotlib.bezier.BezierSegment.axis_aligned_extrema:15 of
msgid "Of same size as dims. The :math:`t` such that :math:`d/dx_i B(t) = 0`"
msgstr ""

#: matplotlib.bezier.BezierSegment.control_points:2 of
msgid "The control points of the curve."
msgstr ""

#: matplotlib.bezier.BezierSegment.degree:2 of
msgid "Degree of the polynomial. One less the number of control points."
msgstr ""

#: matplotlib.bezier.BezierSegment.dimension:2 of
msgid "The dimension of the curve."
msgstr ""

#: matplotlib.bezier.BezierSegment.point_at_t:2 of
msgid "Evaluate the curve at a single point, returning a tuple of *d* floats."
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:2 of
msgid "The polynomial coefficients of the Bezier curve."
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:4 of
msgid "Follows opposite convention from `numpy.polyval`."
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:20 of
msgid "(n+1, d) array"
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:10 of
msgid ""
"Coefficients after expanding in polynomial basis, where :math:`n` is the "
"degree of the bezier curve and :math:`d` its dimension. These are the "
"numbers (:math:`C_j`) such that the curve can be written "
":math:`\\sum_{j=0}^n C_j t^j`."
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:23 of
msgid "Notes"
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:24 of
msgid "The coefficients are calculated as"
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:26 of
msgid "{n \\choose j} \\sum_{i=0}^j (-1)^{i+j} {j \\choose i} P_i"
msgstr ""

#: matplotlib.bezier.BezierSegment.polynomial_coefficients:30 of
msgid "where :math:`P_i` are the control points of the curve."
msgstr ""

#: matplotlib.bezier.NonIntersectingPathException:1 of
msgid "Bases: :py:class:`ValueError`"
msgstr ""

#: matplotlib.bezier.check_if_parallel:2 of
msgid "Check if two lines are parallel."
msgstr ""

#: matplotlib.bezier.check_if_parallel:8 of
msgid "**dx1, dy1, dx2, dy2**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.bezier.check_if_parallel:8 of
msgid "The gradients *dy*/*dx* of the two lines."
msgstr ""

#: matplotlib.bezier.check_if_parallel:12
#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:30
#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:16 of
msgid "**tolerance**"
msgstr ""

#: matplotlib.bezier.check_if_parallel:11 of
msgid ""
"The angular tolerance in radians up to which the lines are considered "
"parallel."
msgstr ""

#: matplotlib.bezier.check_if_parallel:31 of
msgid "is_parallel"
msgstr ""

#: matplotlib.bezier.check_if_parallel:17 of
msgid "1 if two lines are parallel in same direction."
msgstr ""

#: matplotlib.bezier.check_if_parallel:18 of
msgid "-1 if two lines are parallel in opposite direction."
msgstr ""

#: matplotlib.bezier.check_if_parallel:19 of
msgid "False otherwise."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:2 of
msgid "Find the intersection of the Bezier curve with a closed path."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:4 of
msgid ""
"The intersection point *t* is approximated by two parameters *t0*, *t1* "
"such that *t0* <= *t* <= *t1*."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:7 of
msgid ""
"Search starts from *t0* and *t1* and uses a simple bisecting algorithm "
"therefore one of the end points must be inside the path while the other "
"doesn't. The search stops when the distance of the points parametrized by"
" *t0* and *t1* gets smaller than the given *tolerance*."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:18 of
msgid "**bezier_point_at_t**"
msgstr ""

#: of
msgid "callable"
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:15 of
msgid ""
"A function returning x, y coordinates of the Bezier at parameter *t*. It "
"must have the signature::"
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:24
#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:12 of
msgid "**inside_closedpath**"
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:21 of
msgid ""
"A function returning True if a given point (x, y) is inside the closed "
"path. It must have the signature::"
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:27
#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:47 of
msgid "**t0, t1**"
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:27 of
msgid "Start parameters for the search."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:30 of
msgid "Maximal allowed distance between the final points."
msgstr ""

#: matplotlib.bezier.find_bezier_t_intersecting_with_closedpath:35 of
msgid "The Bezier path parameters."
msgstr ""

#: matplotlib.bezier.find_control_points:2 of
msgid ""
"Find control points of the Bezier curve passing through (*c1x*, *c1y*), "
"(*mmx*, *mmy*), and (*c2x*, *c2y*), at parametric values 0, 0.5, and 1."
msgstr ""

#: matplotlib.bezier.get_intersection:2 of
msgid ""
"Return the intersection between the line through (*cx1*, *cy1*) at angle "
"*t1* and the line through (*cx2*, *cy2*) at angle *t2*."
msgstr ""

#: matplotlib.bezier.get_normal_points:2 of
msgid ""
"For a line passing through (*cx*, *cy*) and having an angle *t*, return "
"locations of the two points located along its perpendicular line at the "
"distance of *length*."
msgstr ""

#: matplotlib.bezier.get_parallels:2 of
msgid ""
"Given the quadratic Bezier control points *bezier2*, returns control "
"points of quadratic Bezier lines roughly parallel to given one separated "
"by *width*."
msgstr ""

#: matplotlib.bezier.inside_circle:2 of
msgid ""
"Return a function that checks whether a point is in a circle with center "
"(*cx*, *cy*) and radius *r*."
msgstr ""

#: matplotlib.bezier.inside_circle:5 of
msgid "The returned function has the signature::"
msgstr ""

#: matplotlib.bezier.make_wedged_bezier2:2 of
msgid ""
"Being similar to get_parallels, returns control points of two quadratic "
"Bezier lines having a width roughly parallel to given one separated by "
"*width*."
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:2 of
msgid "Split a Bezier curve into two at the intersection with a closed path."
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:8 of
msgid "**bezier**"
msgstr ""

#: of
msgid "(N, 2) array-like"
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:8 of
msgid "Control points of the Bezier segment. See `.BezierSegment`."
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:11 of
msgid ""
"A function returning True if a given point (x, y) is inside the closed "
"path. See also `.find_bezier_t_intersecting_with_closedpath`."
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:15 of
msgid ""
"The tolerance for the intersection. See also "
"`.find_bezier_t_intersecting_with_closedpath`."
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:33 of
msgid "left, right"
msgstr ""

#: matplotlib.bezier.split_bezier_intersecting_with_closedpath:21 of
msgid "Lists of control points for the two Bezier segments."
msgstr ""

#: matplotlib.bezier.split_de_casteljau:2 of
msgid ""
"Split a Bezier segment defined by its control points *beta* into two "
"separate segments divided at *t* and return their control points."
msgstr ""

#: matplotlib.bezier.split_path_inout:2 of
msgid ""
"Divide a path into two segments at the point where ``inside(x, y)`` "
"becomes False."
msgstr ""

