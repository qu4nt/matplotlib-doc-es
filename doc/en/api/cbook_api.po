# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/cbook_api.rst:3
msgid "``matplotlib.cbook``"
msgstr ""

#: matplotlib.cbook:1 of
msgid ""
"A collection of utility functions and classes.  Originally, many (but not"
" all) were from the Python Cookbook -- hence the name cbook."
msgstr ""

#: matplotlib.cbook:4 of
msgid ""
"This module is safe to import from anywhere within Matplotlib; it imports"
" Matplotlib only at runtime."
msgstr ""

#: matplotlib.cbook.CallbackRegistry:1 matplotlib.cbook.Grouper:1
#: matplotlib.cbook.Stack:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.cbook.CallbackRegistry:2 of
msgid ""
"Handle registering, processing, blocking, and disconnecting for a set of "
"signals and callbacks:"
msgstr ""

#: matplotlib.cbook.CallbackRegistry:30 of
msgid ""
"In practice, one should always disconnect all callbacks when they are no "
"longer needed to avoid dangling references (and thus memory leaks). "
"However, real code in Matplotlib rarely does so, and due to its design, "
"it is rather difficult to place this kind of code.  To get around this, "
"and prevent this class of memory leaks, we instead store weak references "
"to bound methods only, so when the destination object needs to die, the "
"CallbackRegistry won't keep it alive."
msgstr ""

#: matplotlib.cbook.CallbackRegistry matplotlib.cbook.CallbackRegistry.blocked
#: matplotlib.cbook.boxplot_stats matplotlib.cbook.index_of
#: matplotlib.cbook.normalize_kwargs matplotlib.cbook.print_cycles
#: matplotlib.cbook.pts_to_midstep matplotlib.cbook.pts_to_poststep
#: matplotlib.cbook.pts_to_prestep matplotlib.cbook.simple_linear_interpolation
#: matplotlib.cbook.to_filehandle matplotlib.cbook.violin_stats of
msgid "Parameters"
msgstr ""

#: matplotlib.cbook.CallbackRegistry:61 of
msgid "**exception_handler**"
msgstr ""

#: of
msgid "callable, optional"
msgstr ""

#: matplotlib.cbook.CallbackRegistry:41 of
msgid ""
"If not None, *exception_handler* must be a function that takes an "
"`Exception` as single parameter.  It gets called with any `Exception` "
"raised by the callbacks during `CallbackRegistry.process`, and may either"
" re-raise the exception or handle it in another manner."
msgstr ""

#: matplotlib.cbook.CallbackRegistry:46 of
msgid ""
"The default handler prints the exception (with `traceback.print_exc`) if "
"an interactive event loop is running; it re-raises the exception if no "
"interactive event loop is running."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.blocked:2 of
msgid "Block callback signals from being processed."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.blocked:4 of
msgid ""
"A context manager to temporarily block/disable callback signals from "
"being processed by the registered listeners."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.blocked:23 of
msgid "**signal**"
msgstr ""

#: of
msgid "str, optional"
msgstr ""

#: matplotlib.cbook.CallbackRegistry.blocked:10 of
msgid "The callback signal to block. The default is to block all signals."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.connect:2 of
msgid "Register *func* to be called when signal *signal* is generated."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.disconnect:2 of
msgid "Disconnect the callback registered with callback id *cid*."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.disconnect:4 of
msgid "No error is raised if such a callback does not exist."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.process:2 of
msgid "Process signal *s*."
msgstr ""

#: matplotlib.cbook.CallbackRegistry.process:4 of
msgid ""
"All of the functions registered to receive callbacks on *s* will be "
"called with ``*args`` and ``**kwargs``."
msgstr ""

#: matplotlib.cbook.Grouper:2 of
msgid "A disjoint-set data structure."
msgstr ""

#: matplotlib.cbook.Grouper:4 of
msgid ""
"Objects can be joined using :meth:`join`, tested for connectedness using "
":meth:`joined`, and all disjoint sets can be retrieved by using the "
"object as an iterator."
msgstr ""

#: matplotlib.cbook.Grouper:8 of
msgid "The objects being joined must be hashable and weak-referenceable."
msgstr ""

#: matplotlib.cbook.Grouper:22 matplotlib.cbook.pts_to_midstep:34
#: matplotlib.cbook.pts_to_poststep:34 matplotlib.cbook.pts_to_prestep:34 of
msgid "Examples"
msgstr ""

#: matplotlib.cbook.Grouper.clean:2 of
msgid "Clean dead weak references from the dictionary."
msgstr ""

#: matplotlib.cbook.Grouper.get_siblings:2 of
msgid "Return all of the items joined with *a*, including itself."
msgstr ""

#: matplotlib.cbook.Grouper.join:2 of
msgid "Join given arguments into the same set.  Accepts one or more arguments."
msgstr ""

#: matplotlib.cbook.Grouper.joined:2 of
msgid "Return whether *a* and *b* are members of the same set."
msgstr ""

#: matplotlib.cbook.Stack:2 of
msgid "Stack of elements with a movable cursor."
msgstr ""

#: matplotlib.cbook.Stack:4 of
msgid "Mimics home/back/forward in a web browser."
msgstr ""

#: matplotlib.cbook.Stack.back:2 of
msgid "Move the position back and return the current element."
msgstr ""

#: matplotlib.cbook.Stack.bubble:2 of
msgid "Raise all references of *o* to the top of the stack, and return it."
msgstr ""

#: matplotlib.cbook.Stack.bubble matplotlib.cbook.Stack.remove
#: matplotlib.cbook.normalize_kwargs of
msgid "Raises"
msgstr ""

#: matplotlib.cbook.Stack.bubble:21 matplotlib.cbook.Stack.remove:21 of
msgid "ValueError"
msgstr ""

#: matplotlib.cbook.Stack.bubble:13 matplotlib.cbook.Stack.remove:13 of
msgid "If *o* is not in the stack."
msgstr ""

#: matplotlib.cbook.Stack.clear:2 of
msgid "Empty the stack."
msgstr ""

#: matplotlib.cbook.Stack.empty:2 of
msgid "Return whether the stack is empty."
msgstr ""

#: matplotlib.cbook.Stack.forward:2 of
msgid "Move the position forward and return the current element."
msgstr ""

#: matplotlib.cbook.Stack.home:2 of
msgid "Push the first element onto the top of the stack."
msgstr ""

#: matplotlib.cbook.Stack.home:4 of
msgid "The first element is returned."
msgstr ""

#: matplotlib.cbook.Stack.push:2 of
msgid "Push *o* to the stack at current position.  Discard all later elements."
msgstr ""

#: matplotlib.cbook.Stack.push:4 of
msgid "*o* is returned."
msgstr ""

#: matplotlib.cbook.Stack.remove:2 of
msgid "Remove *o* from the stack."
msgstr ""

#: matplotlib.cbook.boxplot_stats:2 of
msgid ""
"Return a list of dictionaries of statistics used to draw a series of box "
"and whisker plots using `~.Axes.bxp`."
msgstr ""

#: matplotlib.cbook.boxplot_stats:10 matplotlib.cbook.violin_stats:17 of
msgid "**X**"
msgstr ""

#: of
msgid "array-like"
msgstr ""

#: matplotlib.cbook.boxplot_stats:9 of
msgid ""
"Data that will be represented in the boxplots. Should have 2 or fewer "
"dimensions."
msgstr ""

#: matplotlib.cbook.boxplot_stats:29 of
msgid "**whis**"
msgstr ""

#: of
msgid "float or (float, float), default: 1.5"
msgstr ""

#: matplotlib.cbook.boxplot_stats:13 of
msgid "The position of the whiskers."
msgstr ""

#: matplotlib.cbook.boxplot_stats:15 of
msgid ""
"If a float, the lower whisker is at the lowest datum above ``Q1 - "
"whis*(Q3-Q1)``, and the upper whisker at the highest datum below ``Q3 + "
"whis*(Q3-Q1)``, where Q1 and Q3 are the first and third quartiles.  The "
"default value of ``whis = 1.5`` corresponds to Tukey's original "
"definition of boxplots."
msgstr ""

#: matplotlib.cbook.boxplot_stats:21 of
msgid ""
"If a pair of floats, they indicate the percentiles at which to draw the "
"whiskers (e.g., (5, 95)).  In particular, setting this to (0, 100) "
"results in whiskers covering the whole range of the data."
msgstr ""

#: matplotlib.cbook.boxplot_stats:25 of
msgid ""
"In the edge case where ``Q1 == Q3``, *whis* is automatically set to (0, "
"100) (cover the whole range of the data) if *autorange* is True."
msgstr ""

#: matplotlib.cbook.boxplot_stats:28 of
msgid ""
"Beyond the whiskers, data are considered outliers and are plotted as "
"individual points."
msgstr ""

#: matplotlib.cbook.boxplot_stats:33 of
msgid "**bootstrap**"
msgstr ""

#: of
msgid "int, optional"
msgstr ""

#: matplotlib.cbook.boxplot_stats:32 of
msgid ""
"Number of times the confidence intervals around the median should be "
"bootstrapped (percentile method)."
msgstr ""

#: matplotlib.cbook.boxplot_stats:37 of
msgid "**labels**"
msgstr ""

#: of
msgid "array-like, optional"
msgstr ""

#: matplotlib.cbook.boxplot_stats:36 of
msgid "Labels for each dataset. Length must be compatible with dimensions of *X*."
msgstr ""

#: matplotlib.cbook.boxplot_stats:42 of
msgid "**autorange**"
msgstr ""

#: of
msgid "bool, optional (False)"
msgstr ""

#: matplotlib.cbook.boxplot_stats:40 of
msgid ""
"When `True` and the data are distributed such that the 25th and 75th "
"percentiles are equal, ``whis`` is set to (0, 100) such that the whisker "
"ends are at the minimum and maximum of the data."
msgstr ""

#: matplotlib.cbook.boxplot_stats matplotlib.cbook.index_of
#: matplotlib.cbook.pts_to_midstep matplotlib.cbook.pts_to_poststep
#: matplotlib.cbook.pts_to_prestep matplotlib.cbook.simple_linear_interpolation
#: matplotlib.cbook.to_filehandle matplotlib.cbook.violin_stats of
msgid "Returns"
msgstr ""

#: matplotlib.cbook.boxplot_stats:70 matplotlib.cbook.violin_stats:61 of
msgid "list of dict"
msgstr ""

#: matplotlib.cbook.boxplot_stats:47 of
msgid ""
"A list of dictionaries containing the results for each column of data. "
"Keys of each dictionary are the following:"
msgstr ""

#: matplotlib.cbook.boxplot_stats:51 of
msgid "Key"
msgstr ""

#: matplotlib.cbook.boxplot_stats:51 of
msgid "Value Description"
msgstr ""

#: matplotlib.cbook.boxplot_stats:53 of
msgid "label"
msgstr ""

#: matplotlib.cbook.boxplot_stats:53 of
msgid "tick label for the boxplot"
msgstr ""

#: matplotlib.cbook.boxplot_stats:54 of
msgid "mean"
msgstr ""

#: matplotlib.cbook.boxplot_stats:54 of
msgid "arithmetic mean value"
msgstr ""

#: matplotlib.cbook.boxplot_stats:55 of
msgid "med"
msgstr ""

#: matplotlib.cbook.boxplot_stats:55 of
msgid "50th percentile"
msgstr ""

#: matplotlib.cbook.boxplot_stats:56 of
msgid "q1"
msgstr ""

#: matplotlib.cbook.boxplot_stats:56 of
msgid "first quartile (25th percentile)"
msgstr ""

#: matplotlib.cbook.boxplot_stats:57 of
msgid "q3"
msgstr ""

#: matplotlib.cbook.boxplot_stats:57 of
msgid "third quartile (75th percentile)"
msgstr ""

#: matplotlib.cbook.boxplot_stats:58 of
msgid "cilo"
msgstr ""

#: matplotlib.cbook.boxplot_stats:58 of
msgid "lower notch around the median"
msgstr ""

#: matplotlib.cbook.boxplot_stats:59 of
msgid "cihi"
msgstr ""

#: matplotlib.cbook.boxplot_stats:59 of
msgid "upper notch around the median"
msgstr ""

#: matplotlib.cbook.boxplot_stats:60 of
msgid "whislo"
msgstr ""

#: matplotlib.cbook.boxplot_stats:60 of
msgid "end of the lower whisker"
msgstr ""

#: matplotlib.cbook.boxplot_stats:61 of
msgid "whishi"
msgstr ""

#: matplotlib.cbook.boxplot_stats:61 of
msgid "end of the upper whisker"
msgstr ""

#: matplotlib.cbook.boxplot_stats:62 of
msgid "fliers"
msgstr ""

#: matplotlib.cbook.boxplot_stats:62 of
msgid "outliers"
msgstr ""

#: matplotlib.cbook.boxplot_stats:73 matplotlib.cbook.deprecated:15
#: matplotlib.cbook.maxdict:15 matplotlib.cbook.report_memory:15
#: matplotlib.cbook.warn_deprecated:15 of
msgid "Notes"
msgstr ""

#: matplotlib.cbook.boxplot_stats:74 of
msgid ""
"Non-bootstrapping approach to confidence interval uses Gaussian-based "
"asymptotic approximation:"
msgstr ""

#: matplotlib.cbook.boxplot_stats:77 of
msgid "\\mathrm{med} \\pm 1.57 \\times \\frac{\\mathrm{iqr}}{\\sqrt{N}}"
msgstr ""

#: matplotlib.cbook.boxplot_stats:81 of
msgid ""
"General approach from: McGill, R., Tukey, J.W., and Larsen, W.A. (1978) "
"\"Variations of Boxplots\", The American Statistician, 32:12-16."
msgstr ""

#: matplotlib.cbook.contiguous_regions:2 of
msgid ""
"Return a list of (ind0, ind1) such that ``mask[ind0:ind1].all()`` is True"
" and we cover all such regions."
msgstr ""

#: matplotlib.cbook.delete_masked_points:2 of
msgid ""
"Find all masked and/or non-finite points in a set of arguments, and "
"return the arguments with only the unmasked points remaining."
msgstr ""

#: matplotlib.cbook.delete_masked_points:5 of
msgid "Arguments can be in any of 5 categories:"
msgstr ""

#: matplotlib.cbook.delete_masked_points:7 of
msgid "1-D masked arrays"
msgstr ""

#: matplotlib.cbook.delete_masked_points:8 of
msgid "1-D ndarrays"
msgstr ""

#: matplotlib.cbook.delete_masked_points:9 of
msgid "ndarrays with more than one dimension"
msgstr ""

#: matplotlib.cbook.delete_masked_points:10 of
msgid "other non-string iterables"
msgstr ""

#: matplotlib.cbook.delete_masked_points:11 of
msgid "anything else"
msgstr ""

#: matplotlib.cbook.delete_masked_points:13 of
msgid ""
"The first argument must be in one of the first four categories; any "
"argument with a length differing from that of the first argument (and "
"hence anything in category 5) then will be passed through unchanged."
msgstr ""

#: matplotlib.cbook.delete_masked_points:18 of
msgid ""
"Masks are obtained from all arguments of the correct length in categories"
" 1, 2, and 4; a point is bad if masked in a masked array or if it is a "
"nan or inf.  No attempt is made to extract a mask from categories 2, 3, "
"and 4 if `numpy.isfinite` does not yield a Boolean array."
msgstr ""

#: matplotlib.cbook.delete_masked_points:24 of
msgid ""
"All input arguments that are not passed unchanged are returned as "
"ndarrays after removing the points or rows corresponding to masks in any "
"of the arguments."
msgstr ""

#: matplotlib.cbook.delete_masked_points:28 of
msgid ""
"A vastly simpler version of this function was originally written as a "
"helper for Axes.scatter()."
msgstr ""

#: matplotlib.cbook.deprecated:2 matplotlib.cbook.warn_deprecated:2 of
msgid "[*Deprecated*]"
msgstr ""

#: matplotlib.cbook.deprecated:16 matplotlib.cbook.warn_deprecated:16 of
msgid "\\"
msgstr ""

#: matplotlib.cbook.file_requires_unicode:2 of
msgid ""
"Return whether the given writable file-like object requires Unicode to be"
" written to it."
msgstr ""

#: matplotlib.cbook.flatten:2 of
msgid "Return a generator of flattened nested containers."
msgstr ""

#: matplotlib.cbook.flatten:4 of
msgid "For example:"
msgstr ""

#: matplotlib.cbook.flatten:11 of
msgid ""
"By: Composite of Holger Krekel and Luther Blissett From: "
"https://code.activestate.com/recipes/121294/ and Recipe 1.12 in cookbook"
msgstr ""

#: matplotlib.cbook.get_sample_data:2 of
msgid ""
"Return a sample data file.  *fname* is a path relative to the :file:`mpl-"
"data/sample_data` directory.  If *asfileobj* is `True` return a file "
"object, otherwise just a file path."
msgstr ""

#: matplotlib.cbook.get_sample_data:6 of
msgid ""
"Sample data files are stored in the 'mpl-data/sample_data' directory "
"within the Matplotlib package."
msgstr ""

#: matplotlib.cbook.get_sample_data:9 of
msgid ""
"If the filename ends in .gz, the file is implicitly ungzipped.  If the "
"filename ends with .npy or .npz, *asfileobj* is True, and *np_load* is "
"True, the file is loaded with `numpy.load`.  *np_load* currently defaults"
" to False but will default to True in a future release."
msgstr ""

#: matplotlib.cbook.index_of:2 of
msgid "A helper function to create reasonable x values for the given *y*."
msgstr ""

#: matplotlib.cbook.index_of:4 of
msgid "This is used for plotting (x, y) if x values are not explicitly given."
msgstr ""

#: matplotlib.cbook.index_of:6 of
msgid ""
"First try ``y.index`` (assuming *y* is a `pandas.Series`), if that fails,"
" use ``range(len(y))``."
msgstr ""

#: matplotlib.cbook.index_of:9 of
msgid ""
"This will be extended in the future to deal with more types of labeled "
"data."
msgstr ""

#: matplotlib.cbook.index_of:15 of
msgid "**y**"
msgstr ""

#: of
msgid "float or array-like"
msgstr ""

#: matplotlib.cbook.index_of:32 of
msgid "**x, y**"
msgstr ""

#: of
msgid "ndarray"
msgstr ""

#: matplotlib.cbook.index_of:20 of
msgid "The x and y values to plot."
msgstr ""

#: matplotlib.cbook.is_math_text:2 of
msgid "Return whether the string *s* contains math expressions."
msgstr ""

#: matplotlib.cbook.is_math_text:4 of
msgid ""
"This is done by checking whether *s* contains an even number of non-"
"escaped dollar signs."
msgstr ""

#: matplotlib.cbook.is_scalar_or_string:2 of
msgid "Return whether the given object is a scalar or string like."
msgstr ""

#: matplotlib.cbook.is_writable_file_like:2 of
msgid "Return whether *obj* looks like a file object with a *write* method."
msgstr ""

#: ../../docstring matplotlib.cbook.ls_mapper:2 of
msgid "Maps short codes for line style to their full name used by backends."
msgstr ""

#: ../../docstring matplotlib.cbook.ls_mapper_r:2 of
msgid "Maps full names for line styles used by backends to their short codes."
msgstr ""

#: matplotlib.cbook.maxdict:1 of
msgid "Bases: :py:class:`dict`"
msgstr ""

#: matplotlib.cbook.maxdict:2 of
msgid "A dictionary with a maximum size."
msgstr ""

#: matplotlib.cbook.maxdict:16 of
msgid ""
"This doesn't override all the relevant methods to constrain the size, "
"just ``__setitem__``, so use with caution."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:2 of
msgid "Helper function to normalize kwarg inputs."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:10 of
msgid "**kw**"
msgstr ""

#: of
msgid "dict or None"
msgstr ""

#: matplotlib.cbook.normalize_kwargs:8 of
msgid ""
"A dict of keyword arguments.  None is explicitly supported and treated as"
" an empty dict, to support functions with an optional parameter of the "
"form ``props=None``."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:24 of
msgid "**alias_mapping**"
msgstr ""

#: of
msgid "dict or Artist subclass or Artist instance, optional"
msgstr ""

#: matplotlib.cbook.normalize_kwargs:13 of
msgid ""
"A mapping between a canonical name to a list of aliases, in order of "
"precedence from lowest to highest."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:16 of
msgid ""
"If the canonical value is not in the list it is assumed to have the "
"highest priority."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:19 of
msgid ""
"If an Artist subclass or instance is passed, use its properties alias "
"mapping."
msgstr ""

#: matplotlib.cbook.normalize_kwargs:38 of
msgid "TypeError"
msgstr ""

#: matplotlib.cbook.normalize_kwargs:29 of
msgid ""
"To match what Python raises if invalid arguments/keyword arguments are "
"passed to a callable."
msgstr ""

#: matplotlib.cbook.open_file_cm:2 of
msgid "Pass through file objects and context-manage path-likes."
msgstr ""

#: matplotlib.cbook.print_cycles:2 of
msgid "Print loops of cyclic references in the given *objects*."
msgstr ""

#: matplotlib.cbook.print_cycles:4 of
msgid ""
"It is often useful to pass in ``gc.garbage`` to find the cycles that are "
"preventing some objects from being garbage collected."
msgstr ""

#: matplotlib.cbook.print_cycles:10 of
msgid "**objects**"
msgstr ""

#: matplotlib.cbook.print_cycles:10 of
msgid "A list of objects to find cycles in."
msgstr ""

#: matplotlib.cbook.print_cycles:13 of
msgid "**outstream**"
msgstr ""

#: matplotlib.cbook.print_cycles:13 of
msgid "The stream for output."
msgstr ""

#: matplotlib.cbook.print_cycles:29 of
msgid "**show_progress**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: matplotlib.cbook.print_cycles:16 of
msgid "If True, print the number of objects reached as they are found."
msgstr ""

#: matplotlib.cbook.pts_to_midstep:2 of
msgid "Convert continuous line to mid-steps."
msgstr ""

#: matplotlib.cbook.pts_to_midstep:4 of
msgid ""
"Given a set of ``N`` points convert to ``2N`` points which when connected"
" linearly give a step function which changes values at the middle of the "
"intervals."
msgstr ""

#: matplotlib.cbook.pts_to_midstep:11 matplotlib.cbook.pts_to_poststep:11
#: matplotlib.cbook.pts_to_prestep:11 of
msgid "**x**"
msgstr ""

#: matplotlib.cbook.pts_to_midstep:31 matplotlib.cbook.pts_to_poststep:31
#: matplotlib.cbook.pts_to_prestep:31
#: matplotlib.cbook.simple_linear_interpolation:30 of
msgid "array"
msgstr ""

#: matplotlib.cbook.pts_to_midstep:11 matplotlib.cbook.pts_to_poststep:11
#: matplotlib.cbook.pts_to_prestep:11 of
msgid "The x location of the steps. May be empty."
msgstr ""

#: matplotlib.cbook.pts_to_midstep:15 matplotlib.cbook.pts_to_poststep:14
#: matplotlib.cbook.pts_to_prestep:14 of
msgid "**y1, ..., yp**"
msgstr ""

#: matplotlib.cbook.pts_to_midstep:14 matplotlib.cbook.pts_to_poststep:14
#: matplotlib.cbook.pts_to_prestep:14 of
msgid "y arrays to be turned into steps; all must be the same length as ``x``."
msgstr ""

#: matplotlib.cbook.pts_to_midstep:20 of
msgid ""
"The x and y values converted to steps in the same order as the input; can"
" be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is length "
"``N``, each of these arrays will be length ``2N``."
msgstr ""

#: matplotlib.cbook.pts_to_poststep:2 of
msgid "Convert continuous line to post-steps."
msgstr ""

#: matplotlib.cbook.pts_to_poststep:4 of
msgid ""
"Given a set of ``N`` points convert to ``2N + 1`` points, which when "
"connected linearly give a step function which changes values at the end "
"of the intervals."
msgstr ""

#: matplotlib.cbook.pts_to_poststep:19 matplotlib.cbook.pts_to_prestep:19 of
msgid ""
"The x and y values converted to steps in the same order as the input; can"
" be unpacked as ``x_out, y1_out, ..., yp_out``.  If the input is length "
"``N``, each of these arrays will be length ``2N + 1``. For ``N=0``, the "
"length will be 0."
msgstr ""

#: matplotlib.cbook.pts_to_prestep:2 of
msgid "Convert continuous line to pre-steps."
msgstr ""

#: matplotlib.cbook.pts_to_prestep:4 of
msgid ""
"Given a set of ``N`` points, convert to ``2N - 1`` points, which when "
"connected linearly give a step function which changes values at the "
"beginning of the intervals."
msgstr ""

#: matplotlib.cbook.report_memory:2 of
msgid "[*Deprecated*] Return the memory consumed by the process."
msgstr ""

#: matplotlib.cbook.safe_first_element:2 of
msgid "Return the first element in *obj*."
msgstr ""

#: matplotlib.cbook.safe_first_element:4 of
msgid ""
"This is an type-independent way of obtaining the first element, "
"supporting both index access and the iterator protocol."
msgstr ""

#: matplotlib.cbook.sanitize_sequence:2 of
msgid "Convert dictview objects to list. Other inputs are returned unchanged."
msgstr ""

#: matplotlib.cbook.silent_list:1 of
msgid "Bases: :py:class:`list`"
msgstr ""

#: matplotlib.cbook.silent_list:2 of
msgid "A list with a short ``repr()``."
msgstr ""

#: matplotlib.cbook.silent_list:4 of
msgid ""
"This is meant to be used for a homogeneous list of artists, so that they "
"don't cause long, meaningless output."
msgstr ""

#: matplotlib.cbook.silent_list:7 of
msgid "Instead of ::"
msgstr ""

#: matplotlib.cbook.silent_list:13 of
msgid "one will get ::"
msgstr ""

#: matplotlib.cbook.silent_list:17 of
msgid ""
"If ``self.type`` is None, the type name is obtained from the first item "
"in the list (if any)."
msgstr ""

#: matplotlib.cbook.simple_linear_interpolation:2 of
msgid "Resample an array with ``steps - 1`` points between original point pairs."
msgstr ""

#: matplotlib.cbook.simple_linear_interpolation:4 of
msgid ""
"Along each column of *a*, ``(steps - 1)`` points are introduced between "
"each original values; the values are linearly interpolated."
msgstr ""

#: matplotlib.cbook.simple_linear_interpolation:10 of
msgid "**a**"
msgstr ""

#: of
msgid "array, shape (n, ...)"
msgstr ""

#: matplotlib.cbook.simple_linear_interpolation:13 of
msgid "**steps**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: matplotlib.cbook.simple_linear_interpolation:18 of
msgid "shape ``((n - 1) * steps + 1, ...)``"
msgstr ""

#: matplotlib.cbook.strip_math:2 of
msgid "Remove latex formatting from mathtext."
msgstr ""

#: matplotlib.cbook.strip_math:4 of
msgid "Only handles fully math and fully non-math strings."
msgstr ""

#: matplotlib.cbook.to_filehandle:2 of
msgid "Convert a path to an open file handle or pass-through a file-like object."
msgstr ""

#: matplotlib.cbook.to_filehandle:4 of
msgid ""
"Consider using `open_file_cm` instead, as it allows one to properly close"
" newly created file objects more easily."
msgstr ""

#: matplotlib.cbook.to_filehandle:11 of
msgid "**fname**"
msgstr ""

#: of
msgid "str or path-like or file-like"
msgstr ""

#: matplotlib.cbook.to_filehandle:10 of
msgid ""
"If `str` or `os.PathLike`, the file is opened using the flags specified "
"by *flag* and *encoding*.  If a file-like object, it is passed through."
msgstr ""

#: matplotlib.cbook.to_filehandle:15 of
msgid "**flag**"
msgstr ""

#: of
msgid "str, default: 'r'"
msgstr ""

#: matplotlib.cbook.to_filehandle:14 matplotlib.cbook.to_filehandle:23 of
msgid ""
"Passed as the *mode* argument to `open` when *fname* is `str` or "
"`os.PathLike`; ignored if *fname* is file-like."
msgstr ""

#: matplotlib.cbook.to_filehandle:20 of
msgid "**return_opened**"
msgstr ""

#: of
msgid "bool, default: False"
msgstr ""

#: matplotlib.cbook.to_filehandle:18 of
msgid ""
"If True, return both the file object and a boolean indicating whether "
"this was a new file (that the caller needs to close).  If False, return "
"only the new file."
msgstr ""

#: matplotlib.cbook.to_filehandle:24 of
msgid "**encoding**"
msgstr ""

#: of
msgid "str or None, default: None"
msgstr ""

#: matplotlib.cbook.to_filehandle:29 of
msgid "**fh**"
msgstr ""

#: of
msgid "file-like"
msgstr ""

#: matplotlib.cbook.to_filehandle:44 of
msgid "**opened**"
msgstr ""

#: matplotlib.cbook.to_filehandle:32 of
msgid "*opened* is only returned if *return_opened* is True."
msgstr ""

#: matplotlib.cbook.violin_stats:2 of
msgid ""
"Return a list of dictionaries of data which can be used to draw a series "
"of violin plots."
msgstr ""

#: matplotlib.cbook.violin_stats:5 of
msgid ""
"See the ``Returns`` section below to view the required keys of the "
"dictionary."
msgstr ""

#: matplotlib.cbook.violin_stats:8 of
msgid ""
"Users can skip this function and pass a user-defined set of dictionaries "
"with the same keys to `~.axes.Axes.violinplot` instead of using "
"Matplotlib to do the calculations. See the *Returns* section below for "
"the keys that must be present in the dictionaries."
msgstr ""

#: matplotlib.cbook.violin_stats:16 of
msgid ""
"Sample data that will be used to produce the gaussian kernel density "
"estimates. Must have 2 or fewer dimensions."
msgstr ""

#: matplotlib.cbook.violin_stats:23 of
msgid "**method**"
msgstr ""

#: of
msgid "callable"
msgstr ""

#: matplotlib.cbook.violin_stats:20 of
msgid ""
"The method used to calculate the kernel density estimate for each column "
"of data. When called via ``method(v, coords)``, it should return a vector"
" of the values of the KDE evaluated at the values specified in coords."
msgstr ""

#: matplotlib.cbook.violin_stats:27 of
msgid "**points**"
msgstr ""

#: of
msgid "int, default: 100"
msgstr ""

#: matplotlib.cbook.violin_stats:26 of
msgid ""
"Defines the number of points to evaluate each of the gaussian kernel "
"density estimates at."
msgstr ""

#: matplotlib.cbook.violin_stats:33 of
msgid "**quantiles**"
msgstr ""

#: of
msgid "array-like, default: None"
msgstr ""

#: matplotlib.cbook.violin_stats:30 of
msgid ""
"Defines (if not None) a list of floats in interval [0, 1] for each column"
" of data, which represents the quantiles that will be rendered for that "
"column of data. Must have 2 or fewer dimensions. 1D array will be treated"
" as a singleton list containing them."
msgstr ""

#: matplotlib.cbook.violin_stats:38 of
msgid ""
"A list of dictionaries containing the results for each column of data. "
"The dictionaries contain at least the following:"
msgstr ""

#: matplotlib.cbook.violin_stats:41 of
msgid ""
"coords: A list of scalars containing the coordinates this particular "
"kernel density estimate was evaluated at."
msgstr ""

#: matplotlib.cbook.violin_stats:43 of
msgid ""
"vals: A list of scalars containing the values of the kernel density "
"estimate at each of the coordinates given in *coords*."
msgstr ""

#: matplotlib.cbook.violin_stats:45 of
msgid "mean: The mean value for this column of data."
msgstr ""

#: matplotlib.cbook.violin_stats:46 of
msgid "median: The median value for this column of data."
msgstr ""

#: matplotlib.cbook.violin_stats:47 of
msgid "min: The minimum value for this column of data."
msgstr ""

#: matplotlib.cbook.violin_stats:48 of
msgid "max: The maximum value for this column of data."
msgstr ""

#: matplotlib.cbook.violin_stats:49 of
msgid "quantiles: The quantile values for this column of data."
msgstr ""

