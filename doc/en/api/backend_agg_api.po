# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/backend_agg_api.rst:2
msgid ":mod:`.backend_agg`"
msgstr ""

#: matplotlib.backends.backend_agg:1 of
msgid "An `Anti-Grain Geometry`_ (AGG) backend."
msgstr ""

#: matplotlib.backends.backend_agg:3 of
msgid "Features that are implemented:"
msgstr ""

#: matplotlib.backends.backend_agg:5 of
msgid "capstyles and join styles"
msgstr ""

#: matplotlib.backends.backend_agg:6 of
msgid "dashes"
msgstr ""

#: matplotlib.backends.backend_agg:7 of
msgid "linewidth"
msgstr ""

#: matplotlib.backends.backend_agg:8 of
msgid "lines, rectangles, ellipses"
msgstr ""

#: matplotlib.backends.backend_agg:9 of
msgid "clipping to a rectangle"
msgstr ""

#: matplotlib.backends.backend_agg:10 of
msgid "output to RGBA and Pillow-supported image formats"
msgstr ""

#: matplotlib.backends.backend_agg:11 of
msgid "alpha blending"
msgstr ""

#: matplotlib.backends.backend_agg:12 of
msgid ""
"DPI scaling properly - everything scales properly (dashes, linewidths, "
"etc)"
msgstr ""

#: matplotlib.backends.backend_agg:13 of
msgid "draw polygon"
msgstr ""

#: matplotlib.backends.backend_agg:14 of
msgid "freetype2 w/ ft2font"
msgstr ""

#: matplotlib.backends.backend_agg:16 of
msgid "Still TODO:"
msgstr ""

#: matplotlib.backends.backend_agg:18 of
msgid "integrate screen dpi w/ ppi and text"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba:2 of
msgid "Get the image as a `memoryview` to the renderer's buffer."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.buffer_rgba:4
#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb:4
#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb:4 of
msgid ""
"`draw` must be called at least once before this function will work and to"
" update the renderer for any subsequent changes to the Figure."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.draw:2 of
msgid "Render the `.Figure`."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.draw:4 of
msgid ""
"It is important that this method actually walk the artist tree even if "
"not output is produced because this will trigger deferred work (like "
"computing limits auto-limits and tick values) that users may want access "
"to before saving to disk."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:2 of
msgid "Write the figure to a JPEG file."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png
#: matplotlib.backends.backend_agg.RendererAgg.draw_text
#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels of
msgid "Parameters"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:11
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:8 of
msgid "**filename_or_obj**"
msgstr ""

#: of
msgid "str or path-like or file-like"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:8
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:8 of
msgid "The file to write to."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg of
msgid "Other Parameters"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:26
#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:58 of
msgid "**pil_kwargs**"
msgstr ""

#: of
msgid "dict, optional"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_jpg:16 of
msgid ""
"Additional keyword arguments that are passed to `PIL.Image.Image.save` "
"when saving the figure."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:2 of
msgid "Write the figure to a PNG file."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:39 of
msgid "**metadata**"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:11 of
msgid ""
"Metadata in the PNG file as key-value pairs of bytes or latin-1 encodable"
" strings. According to the PNG specification, keys must be shorter than "
"79 chars."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:16 of
msgid ""
"The `PNG specification`_ defines some common keywords that may be used as"
" appropriate:"
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:19 of
msgid "Title: Short (one line) title or caption for image."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:20 of
msgid "Author: Name of image's creator."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:21 of
msgid "Description: Description of image (possibly long)."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:22 of
msgid "Copyright: Copyright notice."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:23 of
msgid "Creation Time: Time of original image creation (usually RFC 1123 format)."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:25 of
msgid "Software: Software used to create the image."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:26 of
msgid "Disclaimer: Legal disclaimer."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:27 of
msgid "Warning: Warning of nature of content."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:28 of
msgid "Source: Device used to create the image."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:29 of
msgid "Comment: Miscellaneous comment; conversion from other image format."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:32 of
msgid "Other keywords may be invented for other purposes."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:34 of
msgid ""
"If 'Software' is not given, an autogenerated value for Matplotlib will be"
" used.  This can be removed by setting it to *None*."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:37 of
msgid "For more details see the `PNG specification`_."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:42 of
msgid "Keyword arguments passed to `PIL.Image.Image.save`."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.print_png:44 of
msgid ""
"If the 'pnginfo' key is present, it completely overrides *metadata*, "
"including the default 'Software' key."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_argb:2 of
msgid "Get the image as ARGB `bytes`."
msgstr ""

#: matplotlib.backends.backend_agg.FigureCanvasAgg.tostring_rgb:2 of
msgid "Get the image as RGB `bytes`."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg:2 of
msgid ""
"The renderer handles all the drawing primitives using a graphics context "
"instance that controls the colors/styles"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_mathtext:2 of
msgid "Draw mathtext using :mod:`matplotlib.mathtext`."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:2 of
msgid "Draw the text instance."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:7 of
msgid "GraphicsContextBase"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:8 of
msgid "The graphics context."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:11 of
msgid "**x**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:14 of
msgid "**y**"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:17 of
msgid "**s**"
msgstr ""

#: of
msgid "str"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:17 of
msgid "The text string."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:20 of
msgid "The font properties."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:23 of
msgid "**angle**"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:26 of
msgid "The original text object to be rendered."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:37
#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:15
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:15 of
msgid "Notes"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:40 of
msgid ""
"When you are trying to determine if you have gotten your bounding box "
"right (which is what enables the text layout/alignment to work properly),"
" it helps to change the line in text.py::"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.draw_text:46 of
msgid ""
"to if 1, and then the actual bounding box will be plotted along with your"
" text."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.get_canvas_width_height:2 of
msgid "Return the canvas width and height in display coords."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:2
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:2 of
msgid "[*Deprecated*]"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.get_content_extents:16
#: matplotlib.backends.backend_agg.RendererAgg.tostring_rgba_minimized:16 of
msgid "\\"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.get_text_width_height_descent:2
#: of
msgid ""
"Get the width, height, and descent (offset from the bottom to the "
"baseline), in display coords, of the string *s* with `.FontProperties` "
"*prop*."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite:2 of
msgid "Return whether image composition by Matplotlib should be skipped."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.option_image_nocomposite:4 of
msgid ""
"Raster backends should usually return False (letting the C-level "
"rasterizer take care of image composition); vector backends should "
"usually return ``not rcParams[\"image.composite_image\"]``."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.option_scale_image:2 of
msgid ""
"Return whether arbitrary affine transformations in :meth:`draw_image` are"
" supported (True for most vector backends)."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:2 of
msgid "Convert points to display units."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:4 of
msgid ""
"You need to override this function (unless your backend doesn't have a "
"dpi, e.g., postscript or svg).  Some imaging systems assume some value "
"for pixels per inch::"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:13 of
msgid "**points**"
msgstr ""

#: of
msgid "float or array-like"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:13 of
msgid "a float or a numpy array of float"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels of
msgid "Returns"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.points_to_pixels:30 of
msgid "Points converted to pixels"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.restore_region:2 of
msgid ""
"Restore the saved region. If bbox (instance of BboxBase, or its extents) "
"is given, only the region specified by the bbox will be restored. *xy* (a"
" pair of floats) optionally specifies the new position (the LLC of the "
"original region, not the LLC of the bbox) where the region will be "
"restored."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.start_filter:2 of
msgid "Start filtering. It simply create a new canvas (the old one is saved)."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:2 of
msgid ""
"Save the plot in the current canvas as a image and apply the "
"*post_processing* function."
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:12 of
msgid "def post_processing(image, dpi):"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:6 of
msgid ""
"# ny, nx, depth = image.shape # image (numpy array) has RGBA channels and"
" has a depth of 4. ... # create a new_image (numpy array of 4 channels, "
"size can be # different). The resulting image may have offsets from # "
"lower-left corner of the original image return new_image, offset_x, "
"offset_y"
msgstr ""

#: matplotlib.backends.backend_agg.RendererAgg.stop_filter:14 of
msgid ""
"The saved renderer is restored and the returned image from "
"post_processing is plotted (using draw_image) on it."
msgstr ""

