# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:2
msgid "API Changes in 1.2.x"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:4
msgid ""
"The ``classic`` option of the rc parameter ``toolbar`` is deprecated and "
"will be removed in the next release."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:7
msgid ""
"The ``matplotlib.cbook.isvector`` method has been removed since it is no "
"longer functional."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:10
msgid ""
"The ``rasterization_zorder`` property on `~matplotlib.axes.Axes` sets a "
"zorder below which artists are rasterized.  This has defaulted to "
"-30000.0, but it now defaults to *None*, meaning no artists will be "
"rasterized.  In order to rasterize artists below a given zorder value, "
"`.set_rasterization_zorder` must be explicitly called."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:16
msgid ""
"In :meth:`~matplotlib.axes.Axes.scatter`, and `~.pyplot.scatter`, when "
"specifying a marker using a tuple, the angle is now specified in degrees,"
" not radians."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:20
msgid ""
"Using :meth:`~matplotlib.axes.Axes.twinx` or "
":meth:`~matplotlib.axes.Axes.twiny` no longer overrides the current "
"locaters and formatters on the axes."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:24
msgid ""
"In :meth:`~matplotlib.axes.Axes.contourf`, the handling of the *extend* "
"kwarg has changed.  Formerly, the extended ranges were mapped after to 0,"
" 1 after being normed, so that they always corresponded to the extreme "
"values of the colormap.  Now they are mapped outside this range so that "
"they correspond to the special colormap values determined by the "
":meth:`~matplotlib.colors.Colormap.set_under` and "
":meth:`~matplotlib.colors.Colormap.set_over` methods, which default to "
"the colormap end points."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:34
msgid ""
"The new rc parameter ``savefig.format`` replaces ``cairo.format`` and "
"``savefig.extension``, and sets the default file format used by "
":meth:`matplotlib.figure.Figure.savefig`."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:38
msgid ""
"In :func:`.pyplot.pie` and :meth:`.axes.Axes.pie`, one can now set the "
"radius of the pie; setting the *radius* to 'None' (the default value), "
"will result in a pie with a radius of 1 as before."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:42
msgid ""
"Use of ``matplotlib.projections.projection_factory`` is now deprecated in"
" favour of axes class identification using "
"``matplotlib.projections.process_projection_requirements`` followed by "
"direct axes class invocation (at the time of writing, functions which do "
"this are: :meth:`~matplotlib.figure.Figure.add_axes`, "
":meth:`~matplotlib.figure.Figure.add_subplot` and "
":meth:`~matplotlib.figure.Figure.gca`). Therefore::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:67
msgid ""
"This change means that third party objects can expose themselves as "
"Matplotlib axes by providing a ``_as_mpl_axes`` method. See "
":mod:`matplotlib.projections` for more detail."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:71
msgid ""
"A new keyword *extendfrac* in :meth:`~matplotlib.pyplot.colorbar` and "
":class:`~matplotlib.colorbar.ColorbarBase` allows one to control the size"
" of the triangular minimum and maximum extensions on colorbars."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:75
msgid ""
"A new keyword *capthick* in :meth:`~matplotlib.pyplot.errorbar` has been "
"added as an intuitive alias to the *markeredgewidth* and *mew* keyword "
"arguments, which indirectly controlled the thickness of the caps on the "
"errorbars.  For backwards compatibility, specifying either of the "
"original keyword arguments will override any value provided by "
"*capthick*."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:82
msgid ""
"Transform subclassing behaviour is now subtly changed. If your transform "
"implements a non-affine transformation, then it should override the "
"``transform_non_affine`` method, rather than the generic ``transform`` "
"method. Previously transforms would define ``transform`` and then copy "
"the method into ``transform_non_affine``::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:94
msgid "This approach will no longer function correctly and should be changed to::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:101
msgid ""
"Artists no longer have ``x_isdata`` or ``y_isdata`` attributes; instead "
"any artist's transform can be interrogated with "
"``artist_instance.get_transform().contains_branch(ax.transData)``"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:105
msgid ""
"Lines added to an axes now take into account their transform when "
"updating the data and view limits. This means transforms can now be used "
"as a pre-transform. For instance::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:116
msgid ""
"One can now easily get a transform which goes from one transform's "
"coordinate system to another, in an optimized way, using the new subtract"
" method on a transform. For instance, to go from data coordinates to axes"
" coordinates::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:128
msgid ""
"for versions before 1.2 this could only be achieved in a sub-optimal way,"
" using ``ax.transData + ax.transAxes.inverted()`` (depth is a new "
"concept, but had it existed it would return 4 for this example)."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:132
msgid ""
"``twinx`` and ``twiny`` now returns an instance of SubplotBase if parent "
"axes is an instance of SubplotBase."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:135
msgid ""
"All Qt3-based backends are now deprecated due to the lack of py3k "
"bindings. Qt and QtAgg backends will continue to work in v1.2.x for py2.6"
" and py2.7. It is anticipated that the Qt3 support will be completely "
"removed for the next release."
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:140
msgid ""
"``matplotlib.colors.ColorConverter``, "
":class:`~matplotlib.colors.Colormap` and "
":class:`~matplotlib.colors.Normalize` now subclasses ``object``"
msgstr ""

#: ../../api/prev_api_changes/api_changes_1.2.x.rst:144
msgid ""
"ContourSet instances no longer have a ``transform`` attribute. Instead, "
"access the transform with the ``get_transform`` method."
msgstr ""

