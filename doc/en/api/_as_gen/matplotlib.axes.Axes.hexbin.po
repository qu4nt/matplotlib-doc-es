# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.rst:2
msgid "matplotlib.axes.Axes.hexbin"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:2 of
msgid "Make a 2D hexagonal binning plot of points *x*, *y*."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:4 of
msgid ""
"If *C* is *None*, the value of the hexagon is determined by the number of"
" points in the hexagon. Otherwise, *C* specifies values at the coordinate"
" (x[i], y[i]). For each hexagon, these values are reduced using "
"*reduce_C_function*."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin of
msgid "Parameters"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:12 of
msgid "**x, y**"
msgstr ""

#: of
msgid "array-like"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:12 of
msgid "The data positions. *x* and *y* must be of the same length."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:17 of
msgid "**C**"
msgstr ""

#: of
msgid "array-like, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:15 of
msgid ""
"If given, these values are accumulated in the bins. Otherwise, every "
"point has a value of 1. Must be of the same length as *x* and *y*."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:25 of
msgid "**gridsize**"
msgstr ""

#: of
msgid "int or (int, int), default: 100"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:20 of
msgid ""
"If a single int, the number of hexagons in the *x*-direction. The number "
"of hexagons in the *y*-direction is chosen such that the hexagons are "
"approximately regular."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:24 of
msgid ""
"Alternatively, if a tuple (*nx*, *ny*), the number of hexagons in the "
"*x*-direction and the *y*-direction."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:38 of
msgid "**bins**"
msgstr ""

#: of
msgid "'log' or int or sequence, default: None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:28 of
msgid "Discretization of the hexagon values."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:30 of
msgid ""
"If *None*, no binning is applied; the color of each hexagon directly "
"corresponds to its count value."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:32 of
msgid ""
"If 'log', use a logarithmic scale for the colormap. Internally, "
":math:`log_{10}(i+1)` is used to determine the hexagon color. This is "
"equivalent to ``norm=LogNorm()``."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:35 of
msgid ""
"If an integer, divide the counts in the specified number of bins, and "
"color the hexagons accordingly."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:37 of
msgid ""
"If a sequence of values, the values of the lower bound of the bins to be "
"used."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:41 of
msgid "**xscale**"
msgstr ""

#: of
msgid "{'linear', 'log'}, default: 'linear'"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:41 of
msgid "Use a linear or log10 scale on the horizontal axis."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:44 of
msgid "**yscale**"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:44 of
msgid "Use a linear or log10 scale on the vertical axis."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:48 of
msgid "**mincnt** : int > 0, default: *None*"
msgstr ""

#: of
msgid "int > 0, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:47 of
msgid ""
"If not *None*, only display cells with more than *mincnt* number of "
"points in the cell."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:53 of
msgid "**marginals** : bool, default: *False*"
msgstr ""

#: of
msgid "bool, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:51 of
msgid ""
"If marginals is *True*, plot the marginal density as colormapped "
"rectangles along the bottom of the x-axis and left of the y-axis."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:63 of
msgid "**extent** : 4-tuple of float, default: *None*"
msgstr ""

#: of
msgid "4-tuple of float, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:56 of
msgid ""
"The limits of the bins (xmin, xmax, ymin, ymax). The default assigns the "
"limits based on *gridsize*, *x*, *y*, *xscale* and *yscale*."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:60 of
msgid ""
"If *xscale* or *yscale* is set to 'log', the limits are expected to be "
"the exponent for a power of 10. E.g. for x-limits of 1 and 50 in 'linear'"
" scale and y-limits of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3)."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin of
msgid "Returns"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:79 of
msgid "`~matplotlib.collections.PolyCollection`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:68 of
msgid "A `.PolyCollection` defining the hexagonal bins."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:70 of
msgid ""
"`.PolyCollection.get_offsets` contains a Mx2 array containing the x, y "
"positions of the M hexagon centers."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:72 of
msgid "`.PolyCollection.get_array` contains the values of the M hexagons."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:75 of
msgid ""
"If *marginals* is *True*, horizontal bar and vertical bar (both "
"PolyCollections) will be attached to the return collection as attributes "
"*hbar* and *vbar*."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin of
msgid "Other Parameters"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:85 of
msgid "**cmap** : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`"
msgstr ""

#: of
msgid "str or"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:84 of
msgid ""
"The Colormap instance or registered colormap name used to map the bin "
"values to colors."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:90 of
msgid "**norm** : `~matplotlib.colors.Normalize`, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:89 of
msgid "Normalize, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:88 of
msgid ""
"The Normalize instance scales the bin values to the canonical colormap "
"range [0, 1] for mapping to colors. By default, the data range is mapped "
"to the colorbar range using linear scaling."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:97 of
msgid "**vmin, vmax**"
msgstr ""

#: of
msgid "float, default: None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:93 of
msgid ""
"The colorbar range. If *None*, suitable min/max values are automatically "
"chosen by the `.Normalize` instance (defaults to the respective min/max "
"values of the bins in case of the default linear scaling). It is an error"
" to use *vmin*/*vmax* when *norm* is given."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:100 of
msgid "**alpha**"
msgstr ""

#: of
msgid "float between 0 and 1, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:100 of
msgid "The alpha blending value, between 0 (transparent) and 1 (opaque)."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:103 of
msgid "**linewidths** : float, default: *None*"
msgstr ""

#: of
msgid "float, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:103 of
msgid "If *None*, defaults to 1.0."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:112 of
msgid "**edgecolors** : {'face', 'none', *None*} or color, default: 'face'"
msgstr ""

#: of
msgid "{'face', 'none',"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:106 of
msgid "The color of the hexagon edges. Possible values are:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:108 of
msgid "'face': Draw the edges in the same color as the fill color."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:109 of
msgid ""
"'none': No edges are drawn. This can sometimes lead to unsightly "
"unpainted pixels between the hexagons."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:111 of
msgid "*None*: Draw outlines in the default color."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:112 of
msgid "An explicit color."
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:124 of
msgid "**reduce_C_function** : callable, default: `numpy.mean`"
msgstr ""

#: of
msgid "callable, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:115 of
msgid ""
"The function to aggregate *C* within the bins. It is ignored if *C* is "
"not given. This must have the signature::"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:120 of
msgid "Commonly used functions are:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:122 of
msgid "`numpy.mean`: average of the points"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:123 of
msgid "`numpy.sum`: integral of the point values"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:124 of
msgid "`numpy.amax`: value taken from the largest point"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:130 of
msgid "**data**"
msgstr ""

#: of
msgid "indexable object, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:127 of
msgid ""
"If given, the following parameters also accept a string ``s``, which is "
"interpreted as ``data[s]`` (unless this raises an exception):"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:130 of
msgid "*x*, *y*, *C*"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:184 of
msgid "**\\*\\*kwargs** : `~matplotlib.collections.PolyCollection` properties"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:183 of
msgid "PolyCollection properties"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:133 of
msgid "All other keyword arguments are passed on to `.PolyCollection`:"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:139 of
msgid "Property"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:139 of
msgid "Description"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:141 of
msgid ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:141 of
msgid ""
"a filter function, which takes a (m, n, 3) float array and a dpi value, "
"and returns a (m, n, 3) array"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:142 of
msgid ":meth:`alpha <matplotlib.collections.Collection.set_alpha>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:142 of
msgid "array-like or scalar or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:143 of
msgid ":meth:`animated <matplotlib.artist.Artist.set_animated>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:143 matplotlib.axes._axes.Axes.hexbin:149
#: matplotlib.axes._axes.Axes.hexbin:158 matplotlib.axes._axes.Axes.hexbin:170
#: matplotlib.axes._axes.Axes.hexbin:179 of
msgid "bool"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:144 of
msgid ""
":meth:`antialiased <matplotlib.collections.Collection.set_antialiased>` "
"or aa or antialiaseds"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:144 of
msgid "bool or list of bools"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:145 of
msgid ":meth:`array <matplotlib.cm.ScalarMappable.set_array>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:145 of
msgid "array-like or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:146 of
msgid ":meth:`capstyle <matplotlib.collections.Collection.set_capstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:146 of
msgid "`.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:147 of
msgid ":meth:`clim <matplotlib.cm.ScalarMappable.set_clim>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:147 of
msgid "(vmin: float, vmax: float)"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:148 of
msgid ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:148 of
msgid "`.Bbox`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:149 of
msgid ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:150 of
msgid ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:150 of
msgid "Patch or (Path, Transform) or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:151 of
msgid ":meth:`cmap <matplotlib.cm.ScalarMappable.set_cmap>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:151 of
msgid "`.Colormap` or str or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:152 of
msgid ":meth:`color <matplotlib.collections.Collection.set_color>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:152 of
msgid "color or list of rgba tuples"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:153 of
msgid ""
":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>` or ec"
" or edgecolors"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:153 of
msgid "color or list of colors or 'face'"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:154 of
msgid ""
":meth:`facecolor <matplotlib.collections.Collection.set_facecolor>` or "
"facecolors or fc"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:154 of
msgid "color or list of colors"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:155 of
msgid ":meth:`figure <matplotlib.artist.Artist.set_figure>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:155 of
msgid "`.Figure`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:156 of
msgid ":meth:`gid <matplotlib.artist.Artist.set_gid>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:156 matplotlib.axes._axes.Axes.hexbin:175
#: of
msgid "str"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:157 of
msgid ":meth:`hatch <matplotlib.collections.Collection.set_hatch>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:157 of
msgid "{'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:158 of
msgid ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:159 of
msgid ":meth:`joinstyle <matplotlib.collections.Collection.set_joinstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:159 of
msgid "`.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:160 of
msgid ":meth:`label <matplotlib.artist.Artist.set_label>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:160 of
msgid "object"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:161 of
msgid ""
":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>` or "
"dashes or linestyles or ls"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:161 of
msgid "str or tuple or list thereof"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:162 of
msgid ""
":meth:`linewidth <matplotlib.collections.Collection.set_linewidth>` or "
"linewidths or lw"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:162 of
msgid "float or list of floats"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:163 of
msgid ":meth:`norm <matplotlib.cm.ScalarMappable.set_norm>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:163 of
msgid "`.Normalize` or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:164 of
msgid ""
":meth:`offset_transform "
"<matplotlib.collections.Collection.set_offset_transform>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:164 matplotlib.axes._axes.Axes.hexbin:174
#: of
msgid "`.Transform`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:165 of
msgid ":meth:`offsets <matplotlib.collections.Collection.set_offsets>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:165 of
msgid "(N, 2) or (2,) array-like"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:166 of
msgid ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:166 of
msgid "`.AbstractPathEffect`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:167 of
msgid ":meth:`paths <matplotlib.collections.PolyCollection.set_verts>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:167 matplotlib.axes._axes.Axes.hexbin:177
#: of
msgid "list of array-like"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:168 of
msgid ":meth:`picker <matplotlib.artist.Artist.set_picker>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:168 of
msgid "None or bool or float or callable"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:169 of
msgid ":meth:`pickradius <matplotlib.collections.Collection.set_pickradius>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:169 matplotlib.axes._axes.Axes.hexbin:180
#: of
msgid "float"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:170 of
msgid ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:171 of
msgid ":meth:`sizes <matplotlib.collections._CollectionWithSizes.set_sizes>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:171 of
msgid "ndarray or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:172 of
msgid ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:172 of
msgid "(scale: float, length: float, randomness: float)"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:173 of
msgid ":meth:`snap <matplotlib.artist.Artist.set_snap>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:173 of
msgid "bool or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:174 of
msgid ":meth:`transform <matplotlib.artist.Artist.set_transform>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:175 of
msgid ":meth:`url <matplotlib.artist.Artist.set_url>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:176 of
msgid ":meth:`urls <matplotlib.collections.Collection.set_urls>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:176 of
msgid "list of str or None"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:177 of
msgid ":meth:`verts <matplotlib.collections.PolyCollection.set_verts>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:178 of
msgid ""
":meth:`verts_and_codes "
"<matplotlib.collections.PolyCollection.set_verts_and_codes>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:178 of
msgid "unknown"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:179 of
msgid ":meth:`visible <matplotlib.artist.Artist.set_visible>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:180 of
msgid ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:189 of
msgid ":obj:`hist2d`"
msgstr ""

#: matplotlib.axes._axes.Axes.hexbin:190 of
msgid "2D histogram rectangular bins"
msgstr ""

#: ../../../../../../../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:2
msgid "Examples using ``matplotlib.axes.Axes.hexbin``"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:10
msgid "Hexagonal binned plot"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:10
#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:18
msgid ":ref:`sphx_glr_gallery_statistics_hexbin_demo.py`"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:29
msgid "hexbin(x, y, C)"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:29
#: ../../api/_as_gen/matplotlib.axes.Axes.hexbin.examples:37
msgid ":ref:`sphx_glr_plot_types_stats_hexbin.py`"
msgstr ""

