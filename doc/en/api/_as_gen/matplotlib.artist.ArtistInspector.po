# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/_as_gen/matplotlib.artist.ArtistInspector.rst:2
msgid "matplotlib.artist.ArtistInspector"
msgstr ""

#: matplotlib.artist.ArtistInspector:2 of
msgid ""
"A helper class to inspect an `~matplotlib.artist.Artist` and return "
"information about its settable properties and their current values."
msgstr ""

#: matplotlib.artist.ArtistInspector:24
#: matplotlib.artist.ArtistInspector.__init__:2 of
msgid ""
"Initialize the artist inspector with an `Artist` or an iterable of "
"`Artist`\\s.  If an iterable is used, we assume it is a homogeneous "
"sequence (all `Artist`\\s are of the same type) and it is your "
"responsibility to make sure this is so."
msgstr ""

#: ../../api/_as_gen/matplotlib.artist.ArtistInspector.rst:13
msgid "Methods"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`__init__ <matplotlib.artist.ArtistInspector.__init__>`\\ \\(o\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
"Initialize the artist inspector with an `Artist` or an iterable of "
"`Artist`\\s."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`aliased_name <matplotlib.artist.ArtistInspector.aliased_name>`\\"
" \\(s\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:2
#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`aliased_name_rest "
"<matplotlib.artist.ArtistInspector.aliased_name_rest>`\\ \\(s\\, "
"target\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.aliased_name_rest:2 of
msgid ""
"Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME', "
"formatted for reST."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`get_aliases <matplotlib.artist.ArtistInspector.get_aliases>`\\ "
"\\(\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_aliases:2 of
msgid ""
"Get a dict mapping property fullnames to sets of aliases for each alias "
"in the :class:`~matplotlib.artist.ArtistInspector`."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`get_setters <matplotlib.artist.ArtistInspector.get_setters>`\\ "
"\\(\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_setters:2 of
msgid "Get the attribute strings with setters for object."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`get_valid_values "
"<matplotlib.artist.ArtistInspector.get_valid_values>`\\ \\(attr\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.get_valid_values:2 of
msgid "Get the legal arguments for the setter associated with *attr*."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ":py:obj:`is_alias <matplotlib.artist.ArtistInspector.is_alias>`\\ \\(o\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.is_alias:2 of
msgid "Return whether method object *o* is an alias for another method."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`pprint_getters "
"<matplotlib.artist.ArtistInspector.pprint_getters>`\\ \\(\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_getters:2 of
msgid "Return the getters and actual values as list of strings."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`pprint_setters "
"<matplotlib.artist.ArtistInspector.pprint_setters>`\\ \\(\\[prop\\, "
"leadingspace\\]\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_setters:2 of
msgid ""
"If *prop* is *None*, return a list of strings of all settable properties "
"and their valid values."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`pprint_setters_rest "
"<matplotlib.artist.ArtistInspector.pprint_setters_rest>`\\ \\(\\[prop\\, "
"leadingspace\\]\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.pprint_setters_rest:2 of
msgid ""
"If *prop* is *None*, return a list of reST-formatted strings of all "
"settable properties and their valid values."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1 of
msgid ""
":py:obj:`properties <matplotlib.artist.ArtistInspector.properties>`\\ "
"\\(\\)"
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:1:<autosummary>:1
#: matplotlib.artist.ArtistInspector.properties:2 of
msgid "Return a dictionary mapping property name -> value."
msgstr ""

#: matplotlib.artist.ArtistInspector.aliased_name:4
#: matplotlib.artist.ArtistInspector.aliased_name_rest:5 of
msgid ""
"e.g., for the line markerfacecolor property, which has an alias, return "
"'markerfacecolor or mfc' and for the transform property, which does not, "
"return 'transform'."
msgstr ""

#: matplotlib.artist.ArtistInspector.get_aliases:5 of
msgid "e.g., for lines::"
msgstr ""

#: matplotlib.artist.ArtistInspector.get_setters:4 of
msgid ""
"For example, for a line, return ``['markerfacecolor', 'linewidth', "
"....]``."
msgstr ""

#: matplotlib.artist.ArtistInspector.get_valid_values:4 of
msgid ""
"This is done by querying the docstring of the setter for a line that "
"begins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a "
"numpydoc-style documentation for the setter's first argument."
msgstr ""

#: matplotlib.artist.ArtistInspector.pprint_setters:5 of
msgid ""
"If *prop* is not *None*, it is a valid property name and that property "
"will be returned as a string of property : valid values."
msgstr ""

#: matplotlib.artist.ArtistInspector.pprint_setters_rest:5 of
msgid ""
"If *prop* is not *None*, it is a valid property name and that property "
"will be returned as a string of \"property : valid\" values."
msgstr ""

