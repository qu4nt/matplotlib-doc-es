# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/_as_gen/matplotlib.axes.Axes.csd.rst:2
msgid "matplotlib.axes.Axes.csd"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:2 of
msgid "Plot the cross-spectral density."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:4 of
msgid ""
"The cross spectral density :math:`P_{xy}` by Welch's average periodogram "
"method.  The vectors *x* and *y* are divided into *NFFT* length segments."
"  Each segment is detrended by function *detrend* and windowed by "
"function *window*.  *noverlap* gives the length of the overlap between "
"segments.  The product of the direct FFTs of *x* and *y* are averaged "
"over each segment to compute :math:`P_{xy}`, with a scaling to correct "
"for power loss due to windowing."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:13 of
msgid ""
"If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero padded to "
"*NFFT*."
msgstr ""

#: matplotlib.axes._axes.Axes.csd of
msgid "Parameters"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:19 of
msgid "**x, y**"
msgstr ""

#: of
msgid "1-D arrays or sequences"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:19 of
msgid "Arrays or sequences containing the data."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:23 of
msgid "**Fs**"
msgstr ""

#: of
msgid "float, default: 2"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:22 of
msgid ""
"The sampling frequency (samples per time unit).  It is used to calculate "
"the Fourier frequencies, *freqs*, in cycles per time unit."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:30 of
msgid "**window** : callable or ndarray, default: `.window_hanning`"
msgstr ""

#: of
msgid "callable or ndarray, default:"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:26 of
msgid ""
"A function or a vector of length *NFFT*.  To create window vectors see "
"`.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`, "
"`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a "
"function is passed as the argument, it must take a data segment as an "
"argument and return the windowed version of the segment."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:35 of
msgid "**sides**"
msgstr ""

#: of
msgid "{'default', 'onesided', 'twosided'}, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:33 of
msgid ""
"Which sides of the spectrum to return. 'default' is one-sided for real "
"data and two-sided for complex data. 'onesided' forces the return of a "
"one-sided spectrum, while 'twosided' forces two-sided."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:44 of
msgid "**pad_to**"
msgstr ""

#: of
msgid "int, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:38 of
msgid ""
"The number of points to which the data segment is padded when performing "
"the FFT.  This can be different from *NFFT*, which specifies the number "
"of data points used.  While not increasing the actual resolution of the "
"spectrum (the minimum distance between resolvable peaks), this can give "
"more points in the plot, allowing for more detail. This corresponds to "
"the *n* parameter in the call to fft(). The default is None, which sets "
"*pad_to* equal to *NFFT*"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:49 of
msgid "**NFFT**"
msgstr ""

#: of
msgid "int, default: 256"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:47 of
msgid ""
"The number of data points used in each block for the FFT.  A power 2 is "
"most efficient.  This should *NOT* be used to get zero padding, or the "
"scaling of the result will be incorrect; use *pad_to* for this instead."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:58 of
msgid "**detrend**"
msgstr ""

#: of
msgid "{'none', 'mean', 'linear'} or callable, default: 'none'"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:52 of
msgid ""
"The function applied to each segment before fft-ing, designed to remove "
"the mean or linear trend.  Unlike in MATLAB, where the *detrend* "
"parameter is a vector, in Matplotlib it is a function.  The "
":mod:`~matplotlib.mlab` module defines `.detrend_none`, `.detrend_mean`, "
"and `.detrend_linear`, but you can use a custom function as well.  You "
"can also use a string to choose one of the functions: 'none' calls "
"`.detrend_none`. 'mean' calls `.detrend_mean`. 'linear' calls "
"`.detrend_linear`."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:64 of
msgid "**scale_by_freq**"
msgstr ""

#: of
msgid "bool, default: True"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:61 of
msgid ""
"Whether the resulting density values should be scaled by the scaling "
"frequency, which gives density in units of Hz^-1.  This allows for "
"integration over the returned frequency values.  The default is True for "
"MATLAB compatibility."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:67 of
msgid "**noverlap**"
msgstr ""

#: of
msgid "int, default: 0 (no overlap)"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:67 of
msgid "The number of points of overlap between segments."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:72 of
msgid "**Fc**"
msgstr ""

#: of
msgid "int, default: 0"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:70 of
msgid ""
"The center frequency of *x*, which offsets the x extents of the plot to "
"reflect the frequency range used when a signal is acquired and then "
"filtered and downsampled to baseband."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:75 of
msgid "**return_line**"
msgstr ""

#: of
msgid "bool, default: False"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:75 of
msgid "Whether to include the line object plotted in the returned values."
msgstr ""

#: matplotlib.axes._axes.Axes.csd of
msgid "Returns"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:81 of
msgid "**Pxy**"
msgstr ""

#: of
msgid "1-D array"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:80 of
msgid ""
"The values for the cross spectrum :math:`P_{xy}` before scaling (complex "
"valued)."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:84 of
msgid "**freqs**"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:84 of
msgid "The frequencies corresponding to the elements in *Pxy*."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:90 of
msgid "**line** : `~matplotlib.lines.Line2D`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:89 of
msgid "Line2D"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:87 of
msgid "The line created by this function. Only returned if *return_line* is True."
msgstr ""

#: matplotlib.axes._axes.Axes.csd of
msgid "Other Parameters"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:98 of
msgid "**data**"
msgstr ""

#: of
msgid "indexable object, optional"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:95 of
msgid ""
"If given, the following parameters also accept a string ``s``, which is "
"interpreted as ``data[s]`` (unless this raises an exception):"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:98 of
msgid "*x*, *y*"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:153 of
msgid "**\\*\\*kwargs**"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:101 of
msgid "Keyword arguments control the `.Line2D` properties:"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:107 of
msgid "Property"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:107 of
msgid "Description"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:109 of
msgid ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:109 of
msgid ""
"a filter function, which takes a (m, n, 3) float array and a dpi value, "
"and returns a (m, n, 3) array"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:110 of
msgid ":meth:`alpha <matplotlib.artist.Artist.set_alpha>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:110 of
msgid "scalar or None"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:111 of
msgid ":meth:`animated <matplotlib.artist.Artist.set_animated>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:111 matplotlib.axes._axes.Axes.csd:112
#: matplotlib.axes._axes.Axes.csd:114 matplotlib.axes._axes.Axes.csd:125
#: matplotlib.axes._axes.Axes.csd:139 matplotlib.axes._axes.Axes.csd:146 of
msgid "bool"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:112 of
msgid ":meth:`antialiased <matplotlib.lines.Line2D.set_antialiased>` or aa"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:113 of
msgid ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:113 of
msgid "`.Bbox`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:114 of
msgid ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:115 of
msgid ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:115 of
msgid "Patch or (Path, Transform) or None"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:116 of
msgid ":meth:`color <matplotlib.lines.Line2D.set_color>` or c"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:116 matplotlib.axes._axes.Axes.csd:130
#: matplotlib.axes._axes.Axes.csd:132 matplotlib.axes._axes.Axes.csd:133 of
msgid "color"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:117 of
msgid ":meth:`dash_capstyle <matplotlib.lines.Line2D.set_dash_capstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:117 matplotlib.axes._axes.Axes.csd:142 of
msgid "`.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:118 of
msgid ":meth:`dash_joinstyle <matplotlib.lines.Line2D.set_dash_joinstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:118 matplotlib.axes._axes.Axes.csd:143 of
msgid "`.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:119 of
msgid ":meth:`dashes <matplotlib.lines.Line2D.set_dashes>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:119 of
msgid "sequence of floats (on/off ink in points) or (None, None)"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:120 of
msgid ":meth:`data <matplotlib.lines.Line2D.set_data>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:120 of
msgid "(2, N) array or two 1D arrays"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:121 of
msgid ":meth:`drawstyle <matplotlib.lines.Line2D.set_drawstyle>` or ds"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:121 of
msgid ""
"{'default', 'steps', 'steps-pre', 'steps-mid', 'steps-post'}, default: "
"'default'"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:122 of
msgid ":meth:`figure <matplotlib.artist.Artist.set_figure>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:122 of
msgid "`.Figure`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:123 of
msgid ":meth:`fillstyle <matplotlib.lines.Line2D.set_fillstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:123 of
msgid "{'full', 'left', 'right', 'bottom', 'top', 'none'}"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:124 of
msgid ":meth:`gid <matplotlib.artist.Artist.set_gid>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:124 matplotlib.axes._axes.Axes.csd:145 of
msgid "str"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:125 of
msgid ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:126 of
msgid ":meth:`label <matplotlib.artist.Artist.set_label>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:126 of
msgid "object"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:127 of
msgid ":meth:`linestyle <matplotlib.lines.Line2D.set_linestyle>` or ls"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:127 of
msgid "{'-', '--', '-.', ':', '', (offset, on-off-seq), ...}"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:128 of
msgid ":meth:`linewidth <matplotlib.lines.Line2D.set_linewidth>` or lw"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:128 matplotlib.axes._axes.Axes.csd:131
#: matplotlib.axes._axes.Axes.csd:134 matplotlib.axes._axes.Axes.csd:138
#: matplotlib.axes._axes.Axes.csd:149 of
msgid "float"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:129 of
msgid ":meth:`marker <matplotlib.lines.Line2D.set_marker>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:129 of
msgid "marker style string, `~.path.Path` or `~.markers.MarkerStyle`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:130 of
msgid ""
":meth:`markeredgecolor <matplotlib.lines.Line2D.set_markeredgecolor>` or "
"mec"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:131 of
msgid ""
":meth:`markeredgewidth <matplotlib.lines.Line2D.set_markeredgewidth>` or "
"mew"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:132 of
msgid ""
":meth:`markerfacecolor <matplotlib.lines.Line2D.set_markerfacecolor>` or "
"mfc"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:133 of
msgid ""
":meth:`markerfacecoloralt "
"<matplotlib.lines.Line2D.set_markerfacecoloralt>` or mfcalt"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:134 of
msgid ":meth:`markersize <matplotlib.lines.Line2D.set_markersize>` or ms"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:135 of
msgid ":meth:`markevery <matplotlib.lines.Line2D.set_markevery>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:135 of
msgid ""
"None or int or (int, int) or slice or list[int] or float or (float, "
"float) or list[bool]"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:136 of
msgid ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:136 of
msgid "`.AbstractPathEffect`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:137 of
msgid ":meth:`picker <matplotlib.lines.Line2D.set_picker>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:137 of
msgid "float or callable[[Artist, Event], tuple[bool, dict]]"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:138 of
msgid ":meth:`pickradius <matplotlib.lines.Line2D.set_pickradius>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:139 of
msgid ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:140 of
msgid ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:140 of
msgid "(scale: float, length: float, randomness: float)"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:141 of
msgid ":meth:`snap <matplotlib.artist.Artist.set_snap>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:141 of
msgid "bool or None"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:142 of
msgid ":meth:`solid_capstyle <matplotlib.lines.Line2D.set_solid_capstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:143 of
msgid ":meth:`solid_joinstyle <matplotlib.lines.Line2D.set_solid_joinstyle>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:144 of
msgid ":meth:`transform <matplotlib.artist.Artist.set_transform>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:144 of
msgid "unknown"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:145 of
msgid ":meth:`url <matplotlib.artist.Artist.set_url>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:146 of
msgid ":meth:`visible <matplotlib.artist.Artist.set_visible>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:147 of
msgid ":meth:`xdata <matplotlib.lines.Line2D.set_xdata>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:147 matplotlib.axes._axes.Axes.csd:148 of
msgid "1D array"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:148 of
msgid ":meth:`ydata <matplotlib.lines.Line2D.set_ydata>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:149 of
msgid ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:158 of
msgid ":obj:`psd`"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:159 of
msgid "is equivalent to setting ``y = x``."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:163 of
msgid "Notes"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:164 of
msgid ""
"For plotting, the power is plotted as :math:`10 \\log_{10}(P_{xy})` for "
"decibels, though :math:`P_{xy}` itself is returned."
msgstr ""

#: matplotlib.axes._axes.Axes.csd:169 of
msgid "References"
msgstr ""

#: matplotlib.axes._axes.Axes.csd:170 of
msgid ""
"Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, "
"John Wiley & Sons (1986)"
msgstr ""

#: ../../../../../../../../api/_as_gen/matplotlib.axes.Axes.csd.examples:2
msgid "Examples using ``matplotlib.axes.Axes.csd``"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.csd.examples:10
msgid "CSD Demo"
msgstr ""

#: ../../api/_as_gen/matplotlib.axes.Axes.csd.examples:10
#: ../../api/_as_gen/matplotlib.axes.Axes.csd.examples:18
msgid ":ref:`sphx_glr_gallery_lines_bars_and_markers_csd_demo.py`"
msgstr ""

