# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/mlab_api.rst:3
msgid "``matplotlib.mlab``"
msgstr ""

#: matplotlib.mlab:1 of
msgid ""
"Numerical Python functions written for compatibility with MATLAB commands"
" with the same names. Most numerical Python functions can be found in the"
" `NumPy`_ and `SciPy`_ libraries. What remains here is code for "
"performing spectral computations and kernel density estimations."
msgstr ""

#: matplotlib.mlab:10 of
msgid "Spectral functions"
msgstr ""

#: matplotlib.mlab:13 of
msgid "`cohere`"
msgstr ""

#: matplotlib.mlab:13 of
msgid "Coherence (normalized cross spectral density)"
msgstr ""

#: matplotlib.mlab:16 of
msgid "`csd`"
msgstr ""

#: matplotlib.mlab:16 of
msgid "Cross spectral density using Welch's average periodogram"
msgstr ""

#: matplotlib.mlab:19 of
msgid "`detrend`"
msgstr ""

#: matplotlib.mlab:19 of
msgid "Remove the mean or best fit line from an array"
msgstr ""

#: matplotlib.mlab:22 of
msgid "`psd`"
msgstr ""

#: matplotlib.mlab:22 of
msgid "Power spectral density using Welch's average periodogram"
msgstr ""

#: matplotlib.mlab:25 of
msgid "`specgram`"
msgstr ""

#: matplotlib.mlab:25 of
msgid "Spectrogram (spectrum over segments of time)"
msgstr ""

#: matplotlib.mlab:28 of
msgid "`complex_spectrum`"
msgstr ""

#: matplotlib.mlab:28 of
msgid "Return the complex-valued frequency spectrum of a signal"
msgstr ""

#: matplotlib.mlab:31 of
msgid "`magnitude_spectrum`"
msgstr ""

#: matplotlib.mlab:31 of
msgid "Return the magnitude of the frequency spectrum of a signal"
msgstr ""

#: matplotlib.mlab:34 of
msgid "`angle_spectrum`"
msgstr ""

#: matplotlib.mlab:34 of
msgid "Return the angle (wrapped phase) of the frequency spectrum of a signal"
msgstr ""

#: matplotlib.mlab:37 of
msgid "`phase_spectrum`"
msgstr ""

#: matplotlib.mlab:37 of
msgid "Return the phase (unwrapped angle) of the frequency spectrum of a signal"
msgstr ""

#: matplotlib.mlab:40 of
msgid "`detrend_mean`"
msgstr ""

#: matplotlib.mlab:40 of
msgid "Remove the mean from a line."
msgstr ""

#: matplotlib.mlab:43 of
msgid "`detrend_linear`"
msgstr ""

#: matplotlib.mlab:43 of
msgid "Remove the best fit line from a line."
msgstr ""

#: matplotlib.mlab:46 of
msgid "`detrend_none`"
msgstr ""

#: matplotlib.mlab:46 of
msgid "Return the original line."
msgstr ""

#: matplotlib.mlab:49 of
msgid "`stride_windows`"
msgstr ""

#: matplotlib.mlab:49 of
msgid "Get all windows in an array in a memory-efficient manner"
msgstr ""

#: matplotlib.mlab.GaussianKDE:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.mlab.GaussianKDE:2 of
msgid "Representation of a kernel-density estimate using Gaussian kernels."
msgstr ""

#: matplotlib.mlab.GaussianKDE matplotlib.mlab.GaussianKDE.evaluate
#: matplotlib.mlab.angle_spectrum matplotlib.mlab.cohere
#: matplotlib.mlab.complex_spectrum matplotlib.mlab.csd matplotlib.mlab.detrend
#: matplotlib.mlab.detrend_linear matplotlib.mlab.detrend_mean
#: matplotlib.mlab.detrend_none matplotlib.mlab.magnitude_spectrum
#: matplotlib.mlab.phase_spectrum matplotlib.mlab.psd matplotlib.mlab.specgram
#: matplotlib.mlab.stride_windows of
msgid "Parameters"
msgstr ""

#: matplotlib.mlab.GaussianKDE:9 matplotlib.mlab.GaussianKDE:32 of
msgid "**dataset**"
msgstr ""

#: of
msgid "array-like"
msgstr ""

#: matplotlib.mlab.GaussianKDE:8 of
msgid ""
"Datapoints to estimate from. In case of univariate data this is a 1-D "
"array, otherwise a 2D array with shape (# of dims, # of data)."
msgstr ""

#: matplotlib.mlab.GaussianKDE:27 of
msgid "**bw_method**"
msgstr ""

#: of
msgid "str, scalar or callable, optional"
msgstr ""

#: matplotlib.mlab.GaussianKDE:12 of
msgid ""
"The method used to calculate the estimator bandwidth.  This can be "
"'scott', 'silverman', a scalar constant or a callable.  If a scalar, this"
" will be used directly as `kde.factor`.  If a callable, it should take a "
"`GaussianKDE` instance as only parameter and return a scalar. If None "
"(default), 'scott' is used."
msgstr ""

#: matplotlib.mlab.GaussianKDE of
msgid "Attributes"
msgstr ""

#: of
msgid "ndarray"
msgstr ""

#: matplotlib.mlab.GaussianKDE:32 of
msgid "The dataset with which `gaussian_kde` was initialized."
msgstr ""

#: matplotlib.mlab.GaussianKDE:35 of
msgid "**dim**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: matplotlib.mlab.GaussianKDE:35 of
msgid "Number of dimensions."
msgstr ""

#: matplotlib.mlab.GaussianKDE:38 of
msgid "**num_dp**"
msgstr ""

#: matplotlib.mlab.GaussianKDE:38 of
msgid "Number of datapoints."
msgstr ""

#: matplotlib.mlab.GaussianKDE:42 of
msgid "**factor**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.mlab.GaussianKDE:41 of
msgid ""
"The bandwidth factor, obtained from `kde.covariance_factor`, with which "
"the covariance matrix is multiplied."
msgstr ""

#: matplotlib.mlab.GaussianKDE:46 of
msgid "**covariance**"
msgstr ""

#: matplotlib.mlab.GaussianKDE:45 of
msgid ""
"The covariance matrix of *dataset*, scaled by the calculated bandwidth "
"(`kde.factor`)."
msgstr ""

#: matplotlib.mlab.GaussianKDE:49 of
msgid "**inv_cov**"
msgstr ""

#: matplotlib.mlab.GaussianKDE:49 of
msgid "The inverse of *covariance*."
msgstr ""

#: matplotlib.mlab.GaussianKDE:54 of
msgid "Methods"
msgstr ""

#: matplotlib.mlab.GaussianKDE:56 of
msgid "**kde.evaluate(points)**"
msgstr ""

#: matplotlib.mlab.GaussianKDE:56 of
msgid "(ndarray) Evaluate the estimated pdf on a provided set of points."
msgstr ""

#: matplotlib.mlab.GaussianKDE:57 of
msgid "**kde(points)**"
msgstr ""

#: matplotlib.mlab.GaussianKDE:57 of
msgid "(ndarray) Same as kde.evaluate(points)"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:2 of
msgid "Evaluate the estimated pdf on a set of points."
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:9 of
msgid "**points**"
msgstr ""

#: of
msgid "(# of dimensions, # of points)-array"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:8 of
msgid ""
"Alternatively, a (# of dimensions,) vector can be passed in and treated "
"as a single point."
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate matplotlib.mlab.angle_spectrum
#: matplotlib.mlab.cohere matplotlib.mlab.complex_spectrum matplotlib.mlab.csd
#: matplotlib.mlab.magnitude_spectrum matplotlib.mlab.phase_spectrum
#: matplotlib.mlab.psd matplotlib.mlab.specgram of
msgid "Returns"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:17 of
msgid "(# of points,)-array"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:14 of
msgid "The values at each point."
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate of
msgid "Raises"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:30 of
msgid "**ValueError**"
msgstr ""

#: of
msgid "if the dimensionality of the input points is different"
msgstr ""

#: matplotlib.mlab.GaussianKDE.evaluate:22 of
msgid "than the dimensionality of the KDE."
msgstr ""

#: matplotlib.mlab.angle_spectrum:2 of
msgid ""
"Compute the angle of the frequency spectrum (wrapped phase spectrum) of "
"*x*. Data is padded to a length of *pad_to* and the windowing function "
"*window* is applied to the signal."
msgstr ""

#: matplotlib.mlab.angle_spectrum:10 matplotlib.mlab.complex_spectrum:10
#: matplotlib.mlab.detrend:8 matplotlib.mlab.detrend_mean:9
#: matplotlib.mlab.detrend_none:8 matplotlib.mlab.magnitude_spectrum:10
#: matplotlib.mlab.phase_spectrum:10 matplotlib.mlab.psd:16
#: matplotlib.mlab.specgram:13 matplotlib.mlab.stride_windows:14 of
msgid "**x**"
msgstr ""

#: of
msgid "1-D array or sequence"
msgstr ""

#: matplotlib.mlab.angle_spectrum:10 matplotlib.mlab.cohere:12
#: matplotlib.mlab.complex_spectrum:10 matplotlib.mlab.detrend_linear:8
#: matplotlib.mlab.magnitude_spectrum:10 matplotlib.mlab.phase_spectrum:10
#: matplotlib.mlab.psd:16 of
msgid "Array or sequence containing the data"
msgstr ""

#: matplotlib.mlab.angle_spectrum:14 matplotlib.mlab.cohere:16
#: matplotlib.mlab.complex_spectrum:14 matplotlib.mlab.csd:23
#: matplotlib.mlab.magnitude_spectrum:14 matplotlib.mlab.phase_spectrum:14
#: matplotlib.mlab.psd:20 matplotlib.mlab.specgram:17 of
msgid "**Fs**"
msgstr ""

#: of
msgid "float, default: 2"
msgstr ""

#: matplotlib.mlab.angle_spectrum:13 matplotlib.mlab.cohere:15
#: matplotlib.mlab.complex_spectrum:13 matplotlib.mlab.csd:22
#: matplotlib.mlab.magnitude_spectrum:13 matplotlib.mlab.phase_spectrum:13
#: matplotlib.mlab.psd:19 matplotlib.mlab.specgram:16 of
msgid ""
"The sampling frequency (samples per time unit).  It is used to calculate "
"the Fourier frequencies, *freqs*, in cycles per time unit."
msgstr ""

#: matplotlib.mlab.angle_spectrum:21 matplotlib.mlab.cohere:23
#: matplotlib.mlab.complex_spectrum:21 matplotlib.mlab.csd:30
#: matplotlib.mlab.magnitude_spectrum:21 matplotlib.mlab.phase_spectrum:21
#: matplotlib.mlab.psd:27 matplotlib.mlab.specgram:24 of
msgid "**window** : callable or ndarray, default: `.window_hanning`"
msgstr ""

#: of
msgid "callable or ndarray, default:"
msgstr ""

#: matplotlib.mlab.angle_spectrum:17 matplotlib.mlab.cohere:19
#: matplotlib.mlab.complex_spectrum:17 matplotlib.mlab.csd:26
#: matplotlib.mlab.magnitude_spectrum:17 matplotlib.mlab.phase_spectrum:17
#: matplotlib.mlab.psd:23 matplotlib.mlab.specgram:20 of
msgid ""
"A function or a vector of length *NFFT*.  To create window vectors see "
"`.window_hanning`, `.window_none`, `numpy.blackman`, `numpy.hamming`, "
"`numpy.bartlett`, `scipy.signal`, `scipy.signal.get_window`, etc.  If a "
"function is passed as the argument, it must take a data segment as an "
"argument and return the windowed version of the segment."
msgstr ""

#: matplotlib.mlab.angle_spectrum:26 matplotlib.mlab.cohere:28
#: matplotlib.mlab.complex_spectrum:26 matplotlib.mlab.csd:35
#: matplotlib.mlab.magnitude_spectrum:26 matplotlib.mlab.phase_spectrum:26
#: matplotlib.mlab.psd:32 matplotlib.mlab.specgram:29 of
msgid "**sides**"
msgstr ""

#: of
msgid "{'default', 'onesided', 'twosided'}, optional"
msgstr ""

#: matplotlib.mlab.angle_spectrum:24 matplotlib.mlab.cohere:26
#: matplotlib.mlab.complex_spectrum:24 matplotlib.mlab.csd:33
#: matplotlib.mlab.magnitude_spectrum:24 matplotlib.mlab.phase_spectrum:24
#: matplotlib.mlab.psd:30 matplotlib.mlab.specgram:27 of
msgid ""
"Which sides of the spectrum to return. 'default' is one-sided for real "
"data and two-sided for complex data. 'onesided' forces the return of a "
"one-sided spectrum, while 'twosided' forces two-sided."
msgstr ""

#: matplotlib.mlab.angle_spectrum:34 matplotlib.mlab.cohere:37
#: matplotlib.mlab.complex_spectrum:34 matplotlib.mlab.csd:44
#: matplotlib.mlab.magnitude_spectrum:34 matplotlib.mlab.phase_spectrum:34
#: matplotlib.mlab.psd:41 matplotlib.mlab.specgram:38 of
msgid "**pad_to**"
msgstr ""

#: of
msgid "int, optional"
msgstr ""

#: matplotlib.mlab.angle_spectrum:29 matplotlib.mlab.complex_spectrum:29
#: matplotlib.mlab.magnitude_spectrum:29 matplotlib.mlab.phase_spectrum:29 of
msgid ""
"The number of points to which the data segment is padded when performing "
"the FFT.  While not increasing the actual resolution of the spectrum (the"
" minimum distance between resolvable peaks), this can give more points in"
" the plot, allowing for more detail. This corresponds to the *n* "
"parameter in the call to fft().  The default is None, which sets *pad_to*"
" equal to the length of the input signal (i.e. no padding)."
msgstr ""

#: matplotlib.mlab.angle_spectrum:39 matplotlib.mlab.complex_spectrum:39
#: matplotlib.mlab.magnitude_spectrum:39 matplotlib.mlab.phase_spectrum:39
#: matplotlib.mlab.specgram:79 of
msgid "**spectrum**"
msgstr ""

#: of
msgid "1-D array"
msgstr ""

#: matplotlib.mlab.angle_spectrum:39 of
msgid "The angle of the frequency spectrum (wrapped phase spectrum)."
msgstr ""

#: matplotlib.mlab.angle_spectrum:48 matplotlib.mlab.cohere:74
#: matplotlib.mlab.complex_spectrum:48 matplotlib.mlab.csd:82
#: matplotlib.mlab.magnitude_spectrum:48 matplotlib.mlab.phase_spectrum:48
#: matplotlib.mlab.psd:78 matplotlib.mlab.specgram:82 of
msgid "**freqs**"
msgstr ""

#: matplotlib.mlab.angle_spectrum:42 matplotlib.mlab.complex_spectrum:42
#: matplotlib.mlab.magnitude_spectrum:42 matplotlib.mlab.phase_spectrum:42 of
msgid "The frequencies corresponding to the elements in *spectrum*."
msgstr ""

#: matplotlib.mlab.angle_spectrum:53 matplotlib.mlab.complex_spectrum:53
#: matplotlib.mlab.csd:87 matplotlib.mlab.magnitude_spectrum:53
#: matplotlib.mlab.phase_spectrum:53 matplotlib.mlab.specgram:97 of
msgid ":obj:`psd`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:54 matplotlib.mlab.complex_spectrum:54
#: matplotlib.mlab.magnitude_spectrum:54 matplotlib.mlab.phase_spectrum:54
#: matplotlib.mlab.specgram:66 of
msgid "Returns the power spectral density."
msgstr ""

#: matplotlib.mlab.angle_spectrum:55 matplotlib.mlab.complex_spectrum:55
#: matplotlib.mlab.magnitude_spectrum:55 matplotlib.mlab.phase_spectrum:55
#: matplotlib.mlab.specgram:99 of
msgid ":obj:`complex_spectrum`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:56 matplotlib.mlab.complex_spectrum:56
#: matplotlib.mlab.magnitude_spectrum:56 matplotlib.mlab.phase_spectrum:56
#: matplotlib.mlab.specgram:68 of
msgid "Returns the complex-valued frequency spectrum."
msgstr ""

#: matplotlib.mlab.angle_spectrum:57 matplotlib.mlab.complex_spectrum:57
#: matplotlib.mlab.magnitude_spectrum:57 matplotlib.mlab.phase_spectrum:57
#: matplotlib.mlab.psd:85 matplotlib.mlab.specgram:101 of
msgid ":obj:`magnitude_spectrum`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:58 matplotlib.mlab.complex_spectrum:58
#: matplotlib.mlab.magnitude_spectrum:58 matplotlib.mlab.phase_spectrum:58 of
msgid "Returns the absolute value of the `complex_spectrum`."
msgstr ""

#: matplotlib.mlab.angle_spectrum:59 matplotlib.mlab.complex_spectrum:59
#: matplotlib.mlab.magnitude_spectrum:59 matplotlib.mlab.phase_spectrum:59
#: matplotlib.mlab.specgram:103 of
msgid ":obj:`angle_spectrum`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:60 matplotlib.mlab.complex_spectrum:60
#: matplotlib.mlab.magnitude_spectrum:60 matplotlib.mlab.phase_spectrum:60 of
msgid "Returns the angle of the `complex_spectrum`."
msgstr ""

#: matplotlib.mlab.angle_spectrum:61 matplotlib.mlab.complex_spectrum:61
#: matplotlib.mlab.magnitude_spectrum:61 matplotlib.mlab.phase_spectrum:61
#: matplotlib.mlab.specgram:105 of
msgid ":obj:`phase_spectrum`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:62 matplotlib.mlab.complex_spectrum:62
#: matplotlib.mlab.magnitude_spectrum:62 matplotlib.mlab.phase_spectrum:62 of
msgid "Returns the phase (unwrapped angle) of the `complex_spectrum`."
msgstr ""

#: matplotlib.mlab.angle_spectrum:63 matplotlib.mlab.complex_spectrum:63
#: matplotlib.mlab.magnitude_spectrum:63 matplotlib.mlab.phase_spectrum:63
#: matplotlib.mlab.psd:83 of
msgid ":obj:`specgram`"
msgstr ""

#: matplotlib.mlab.angle_spectrum:64 matplotlib.mlab.complex_spectrum:64
#: matplotlib.mlab.magnitude_spectrum:64 matplotlib.mlab.phase_spectrum:64 of
msgid "Can return the complex spectrum of segments within the signal."
msgstr ""

#: matplotlib.mlab.cohere:2 of
msgid ""
"The coherence between *x* and *y*.  Coherence is the normalized cross "
"spectral density:"
msgstr ""

#: matplotlib.mlab.cohere:5 of
msgid "C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}"
msgstr ""

#: matplotlib.mlab.cohere:12 matplotlib.mlab.csd:19 of
msgid "**x, y**"
msgstr ""

#: matplotlib.mlab.cohere:31 matplotlib.mlab.csd:38 matplotlib.mlab.psd:35
#: matplotlib.mlab.specgram:32 of
msgid ""
"The number of points to which the data segment is padded when performing "
"the FFT.  This can be different from *NFFT*, which specifies the number "
"of data points used.  While not increasing the actual resolution of the "
"spectrum (the minimum distance between resolvable peaks), this can give "
"more points in the plot, allowing for more detail. This corresponds to "
"the *n* parameter in the call to fft(). The default is None, which sets "
"*pad_to* equal to *NFFT*"
msgstr ""

#: matplotlib.mlab.cohere:42 matplotlib.mlab.csd:49 matplotlib.mlab.psd:46
#: matplotlib.mlab.specgram:43 of
msgid "**NFFT**"
msgstr ""

#: of
msgid "int, default: 256"
msgstr ""

#: matplotlib.mlab.cohere:40 matplotlib.mlab.csd:47 matplotlib.mlab.psd:44
#: matplotlib.mlab.specgram:41 of
msgid ""
"The number of data points used in each block for the FFT.  A power 2 is "
"most efficient.  This should *NOT* be used to get zero padding, or the "
"scaling of the result will be incorrect; use *pad_to* for this instead."
msgstr ""

#: matplotlib.mlab.cohere:51 matplotlib.mlab.csd:58 matplotlib.mlab.psd:55
#: matplotlib.mlab.specgram:52 of
msgid "**detrend**"
msgstr ""

#: of
msgid "{'none', 'mean', 'linear'} or callable, default: 'none'"
msgstr ""

#: matplotlib.mlab.cohere:45 matplotlib.mlab.csd:52 matplotlib.mlab.psd:49
#: matplotlib.mlab.specgram:46 of
msgid ""
"The function applied to each segment before fft-ing, designed to remove "
"the mean or linear trend.  Unlike in MATLAB, where the *detrend* "
"parameter is a vector, in Matplotlib it is a function.  The "
":mod:`~matplotlib.mlab` module defines `.detrend_none`, `.detrend_mean`, "
"and `.detrend_linear`, but you can use a custom function as well.  You "
"can also use a string to choose one of the functions: 'none' calls "
"`.detrend_none`. 'mean' calls `.detrend_mean`. 'linear' calls "
"`.detrend_linear`."
msgstr ""

#: matplotlib.mlab.cohere:57 matplotlib.mlab.csd:64 matplotlib.mlab.psd:61
#: matplotlib.mlab.specgram:58 of
msgid "**scale_by_freq**"
msgstr ""

#: of
msgid "bool, default: True"
msgstr ""

#: matplotlib.mlab.cohere:54 matplotlib.mlab.csd:61 matplotlib.mlab.psd:58
#: matplotlib.mlab.specgram:55 of
msgid ""
"Whether the resulting density values should be scaled by the scaling "
"frequency, which gives density in units of Hz^-1.  This allows for "
"integration over the returned frequency values.  The default is True for "
"MATLAB compatibility."
msgstr ""

#: matplotlib.mlab.cohere:60 matplotlib.mlab.csd:67 matplotlib.mlab.psd:64
#: matplotlib.mlab.specgram:61 matplotlib.mlab.stride_windows:20 of
msgid "**noverlap**"
msgstr ""

#: of
msgid "int, default: 0 (no overlap)"
msgstr ""

#: matplotlib.mlab.cohere:60 matplotlib.mlab.csd:67 matplotlib.mlab.psd:64 of
msgid "The number of points of overlap between segments."
msgstr ""

#: matplotlib.mlab.cohere:65 of
msgid "**Cxy**"
msgstr ""

#: matplotlib.mlab.cohere:65 of
msgid "The coherence vector."
msgstr ""

#: matplotlib.mlab.cohere:68 of
msgid "The frequencies for the elements in *Cxy*."
msgstr ""

#: matplotlib.mlab.cohere:79 of
msgid ":func:`psd`, :func:`csd`"
msgstr ""

#: matplotlib.mlab.cohere:80 of
msgid ""
"For information about the methods used to compute :math:`P_{xy}`, "
":math:`P_{xx}` and :math:`P_{yy}`."
msgstr ""

#: matplotlib.mlab.complex_spectrum:2 of
msgid ""
"Compute the complex-valued frequency spectrum of *x*. Data is padded to a"
" length of *pad_to* and the windowing function *window* is applied to the"
" signal."
msgstr ""

#: matplotlib.mlab.complex_spectrum:39 of
msgid "The complex-valued frequency spectrum."
msgstr ""

#: matplotlib.mlab.csd:2 of
msgid "Compute the cross-spectral density."
msgstr ""

#: matplotlib.mlab.csd:4 of
msgid ""
"The cross spectral density :math:`P_{xy}` by Welch's average periodogram "
"method.  The vectors *x* and *y* are divided into *NFFT* length segments."
"  Each segment is detrended by function *detrend* and windowed by "
"function *window*.  *noverlap* gives the length of the overlap between "
"segments.  The product of the direct FFTs of *x* and *y* are averaged "
"over each segment to compute :math:`P_{xy}`, with a scaling to correct "
"for power loss due to windowing."
msgstr ""

#: matplotlib.mlab.csd:13 of
msgid ""
"If len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero padded to "
"*NFFT*."
msgstr ""

#: of
msgid "1-D arrays or sequences"
msgstr ""

#: matplotlib.mlab.csd:19 of
msgid "Arrays or sequences containing the data"
msgstr ""

#: matplotlib.mlab.csd:73 of
msgid "**Pxy**"
msgstr ""

#: matplotlib.mlab.csd:72 of
msgid ""
"The values for the cross spectrum :math:`P_{xy}` before scaling (real "
"valued)"
msgstr ""

#: matplotlib.mlab.csd:76 of
msgid "The frequencies corresponding to the elements in *Pxy*"
msgstr ""

#: matplotlib.mlab.csd:88 of
msgid "equivalent to setting ``y = x``."
msgstr ""

#: matplotlib.mlab.csd:93 matplotlib.mlab.psd:93
#: matplotlib.mlab.stride_windows:35 of
msgid "References"
msgstr ""

#: matplotlib.mlab.csd:94 matplotlib.mlab.psd:94 of
msgid ""
"Bendat & Piersol -- Random Data: Analysis and Measurement Procedures, "
"John Wiley & Sons (1986)"
msgstr ""

#: matplotlib.mlab.detrend:2 of
msgid "Return x with its trend removed."
msgstr ""

#: of
msgid "array or sequence"
msgstr ""

#: matplotlib.mlab.detrend:8 matplotlib.mlab.stride_windows:14 of
msgid "Array or sequence containing the data."
msgstr ""

#: matplotlib.mlab.detrend:15 of
msgid "**key**"
msgstr ""

#: of
msgid "{'default', 'constant', 'mean', 'linear', 'none'} or function"
msgstr ""

#: matplotlib.mlab.detrend:11 of
msgid ""
"The detrending algorithm to use. 'default', 'mean', and 'constant' are "
"the same as `detrend_mean`. 'linear' is the same as `detrend_linear`. "
"'none' is the same as `detrend_none`. The default is 'mean'. See the "
"corresponding functions for more details regarding the algorithms. Can "
"also be a function that carries out the detrend operation."
msgstr ""

#: matplotlib.mlab.detrend:25 matplotlib.mlab.detrend_mean:20
#: matplotlib.mlab.detrend_none:19 matplotlib.mlab.stride_windows:32 of
msgid "**axis**"
msgstr ""

#: matplotlib.mlab.detrend:18 of
msgid "The axis along which to do the detrending."
msgstr ""

#: matplotlib.mlab.detrend:30 matplotlib.mlab.detrend_linear:20
#: matplotlib.mlab.detrend_none:24 of
msgid ":obj:`detrend_mean`"
msgstr ""

#: matplotlib.mlab.detrend:31 of
msgid "Implementation of the 'mean' algorithm."
msgstr ""

#: matplotlib.mlab.detrend:32 matplotlib.mlab.detrend_mean:25
#: matplotlib.mlab.detrend_none:26 of
msgid ":obj:`detrend_linear`"
msgstr ""

#: matplotlib.mlab.detrend:33 of
msgid "Implementation of the 'linear' algorithm."
msgstr ""

#: matplotlib.mlab.detrend:34 matplotlib.mlab.detrend_linear:22
#: matplotlib.mlab.detrend_mean:27 of
msgid ":obj:`detrend_none`"
msgstr ""

#: matplotlib.mlab.detrend:35 of
msgid "Implementation of the 'none' algorithm."
msgstr ""

#: matplotlib.mlab.detrend_linear:2 of
msgid "Return x minus best fit line; 'linear' detrending."
msgstr ""

#: matplotlib.mlab.detrend_linear:15 of
msgid "**y**"
msgstr ""

#: of
msgid "0-D or 1-D array or sequence"
msgstr ""

#: matplotlib.mlab.detrend_linear:21 matplotlib.mlab.detrend_linear:23
#: matplotlib.mlab.detrend_mean:26 matplotlib.mlab.detrend_mean:28
#: matplotlib.mlab.detrend_none:25 matplotlib.mlab.detrend_none:27 of
msgid "Another detrend algorithm."
msgstr ""

#: matplotlib.mlab.detrend_linear:24 matplotlib.mlab.detrend_mean:29
#: matplotlib.mlab.detrend_none:28 of
msgid ":obj:`detrend`"
msgstr ""

#: matplotlib.mlab.detrend_linear:25 matplotlib.mlab.detrend_mean:30
#: matplotlib.mlab.detrend_none:29 of
msgid "A wrapper around all the detrend algorithms."
msgstr ""

#: matplotlib.mlab.detrend_mean:2 of
msgid "Return x minus the mean(x)."
msgstr ""

#: matplotlib.mlab.detrend_mean:8 of
msgid "Array or sequence containing the data Can have any dimensionality"
msgstr ""

#: matplotlib.mlab.detrend_mean:12 of
msgid ""
"The axis along which to take the mean.  See numpy.mean for a description "
"of this argument."
msgstr ""

#: matplotlib.mlab.detrend_none:2 of
msgid "Return x: no detrending."
msgstr ""

#: of
msgid "any object"
msgstr ""

#: matplotlib.mlab.detrend_none:8 of
msgid "An object containing the data"
msgstr ""

#: matplotlib.mlab.detrend_none:11 of
msgid ""
"This parameter is ignored. It is included for compatibility with "
"detrend_mean"
msgstr ""

#: matplotlib.mlab.magnitude_spectrum:2 of
msgid ""
"Compute the magnitude (absolute value) of the frequency spectrum of *x*. "
"Data is padded to a length of *pad_to* and the windowing function "
"*window* is applied to the signal."
msgstr ""

#: matplotlib.mlab.magnitude_spectrum:39 of
msgid "The magnitude (absolute value) of the frequency spectrum."
msgstr ""

#: matplotlib.mlab.phase_spectrum:2 of
msgid ""
"Compute the phase of the frequency spectrum (unwrapped phase spectrum) of"
" *x*. Data is padded to a length of *pad_to* and the windowing function "
"*window* is applied to the signal."
msgstr ""

#: matplotlib.mlab.phase_spectrum:39 of
msgid "The phase of the frequency spectrum (unwrapped phase spectrum)."
msgstr ""

#: matplotlib.mlab.psd:2 of
msgid "Compute the power spectral density."
msgstr ""

#: matplotlib.mlab.psd:4 of
msgid ""
"The power spectral density :math:`P_{xx}` by Welch's average periodogram "
"method.  The vector *x* is divided into *NFFT* length segments.  Each "
"segment is detrended by function *detrend* and windowed by function "
"*window*.  *noverlap* gives the length of the overlap between segments.  "
"The :math:`|\\mathrm{fft}(i)|^2` of each segment :math:`i` are averaged "
"to compute :math:`P_{xx}`."
msgstr ""

#: matplotlib.mlab.psd:11 of
msgid "If len(*x*) < *NFFT*, it will be zero padded to *NFFT*."
msgstr ""

#: matplotlib.mlab.psd:69 of
msgid "**Pxx**"
msgstr ""

#: matplotlib.mlab.psd:69 of
msgid "The values for the power spectrum :math:`P_{xx}` (real valued)"
msgstr ""

#: matplotlib.mlab.psd:72 of
msgid "The frequencies corresponding to the elements in *Pxx*"
msgstr ""

#: matplotlib.mlab.psd:84 of
msgid ""
"`specgram` differs in the default overlap; in not returning the mean of "
"the segment periodograms; and in returning the times of the segments."
msgstr ""

#: matplotlib.mlab.psd:86 of
msgid "returns the magnitude spectrum."
msgstr ""

#: matplotlib.mlab.psd:87 of
msgid ":obj:`csd`"
msgstr ""

#: matplotlib.mlab.psd:88 of
msgid "returns the spectral density between two signals."
msgstr ""

#: matplotlib.mlab.specgram:2 of
msgid "Compute a spectrogram."
msgstr ""

#: matplotlib.mlab.specgram:4 of
msgid ""
"Compute and plot a spectrogram of data in x.  Data are split into NFFT "
"length segments and the spectrum of each section is computed.  The "
"windowing function window is applied to each segment, and the amount of "
"overlap of each segment is specified with noverlap."
msgstr ""

#: matplotlib.mlab.specgram:13 of
msgid "1-D array or sequence."
msgstr ""

#: of
msgid "int, default: 128"
msgstr ""

#: matplotlib.mlab.specgram:61 of
msgid "The number of points of overlap between blocks."
msgstr ""

#: matplotlib.mlab.specgram:74 of
msgid "**mode**"
msgstr ""

#: of
msgid "str, default: 'psd'"
msgstr ""

#: matplotlib.mlab.specgram:74 of
msgid "What sort of spectrum to use:"
msgstr ""

#: matplotlib.mlab.specgram:65 of
msgid "'psd'"
msgstr ""

#: matplotlib.mlab.specgram:67 of
msgid "'complex'"
msgstr ""

#: matplotlib.mlab.specgram:69 of
msgid "'magnitude'"
msgstr ""

#: matplotlib.mlab.specgram:70 of
msgid "Returns the magnitude spectrum."
msgstr ""

#: matplotlib.mlab.specgram:71 of
msgid "'angle'"
msgstr ""

#: matplotlib.mlab.specgram:72 of
msgid "Returns the phase spectrum without unwrapping."
msgstr ""

#: matplotlib.mlab.specgram:74 of
msgid "'phase'"
msgstr ""

#: matplotlib.mlab.specgram:74 of
msgid "Returns the phase spectrum with unwrapping."
msgstr ""

#: matplotlib.mlab.specgram:79 of
msgid "2D array, columns are the periodograms of successive segments."
msgstr ""

#: matplotlib.mlab.specgram:82 of
msgid "1-D array, frequencies corresponding to the rows in *spectrum*."
msgstr ""

#: matplotlib.mlab.specgram:92 of
msgid "**t**"
msgstr ""

#: matplotlib.mlab.specgram:85 of
msgid ""
"1-D array, the times corresponding to midpoints of segments (i.e the "
"columns in *spectrum*)."
msgstr ""

#: matplotlib.mlab.specgram:98 of
msgid "differs in the overlap and in the return values."
msgstr ""

#: matplotlib.mlab.specgram:100 of
msgid "similar, but with complex valued frequencies."
msgstr ""

#: matplotlib.mlab.specgram:102 of
msgid "similar single segment when mode is 'magnitude'."
msgstr ""

#: matplotlib.mlab.specgram:104 of
msgid "similar to single segment when mode is 'angle'."
msgstr ""

#: matplotlib.mlab.specgram:106 of
msgid "similar to single segment when mode is 'phase'."
msgstr ""

#: matplotlib.mlab.specgram:110 of
msgid "Notes"
msgstr ""

#: matplotlib.mlab.specgram:111 of
msgid "detrend and scale_by_freq only apply when *mode* is set to 'psd'."
msgstr ""

#: matplotlib.mlab.stride_windows:2 of
msgid ""
"Get all windows of x with length n as a single array, using strides to "
"avoid data duplication."
msgstr ""

#: matplotlib.mlab.stride_windows:7 of
msgid ""
"It is not safe to write to the output array.  Multiple elements may point"
" to the same piece of memory, so modifying one value may change others."
msgstr ""

#: of
msgid "1D array or sequence"
msgstr ""

#: matplotlib.mlab.stride_windows:17 of
msgid "**n**"
msgstr ""

#: matplotlib.mlab.stride_windows:17 of
msgid "The number of data points in each window."
msgstr ""

#: matplotlib.mlab.stride_windows:20 of
msgid "The overlap between adjacent windows."
msgstr ""

#: matplotlib.mlab.stride_windows:23 of
msgid "The axis along which the windows will run."
msgstr ""

#: matplotlib.mlab.stride_windows:36 of
msgid ""
"`stackoverflow: Rolling window for 1D arrays in Numpy? "
"<https://stackoverflow.com/a/6811241>`_ `stackoverflow: Using strides for"
" an efficient moving average filter "
"<https://stackoverflow.com/a/4947453>`_"
msgstr ""

#: matplotlib.mlab.window_hanning:2 of
msgid "Return x times the hanning window of len(x)."
msgstr ""

#: matplotlib.mlab.window_hanning:16 of
msgid ":obj:`window_none`"
msgstr ""

#: matplotlib.mlab.window_hanning:17 matplotlib.mlab.window_none:17 of
msgid "Another window algorithm."
msgstr ""

#: matplotlib.mlab.window_none:2 of
msgid "No window function; simply return x."
msgstr ""

#: matplotlib.mlab.window_none:16 of
msgid ":obj:`window_hanning`"
msgstr ""

