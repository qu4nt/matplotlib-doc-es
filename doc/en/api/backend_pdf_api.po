# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/backend_pdf_api.rst:2
msgid ":mod:`.backend_pdf`"
msgstr ""

#: matplotlib.backends.backend_pdf:1 of
msgid "A PDF Matplotlib backend."
msgstr ""

#: matplotlib.backends.backend_pdf:3 of
msgid "Author: Jouni K Sepp√§nen <jks@iki.fi> and others."
msgstr ""

#: matplotlib.backends.backend_pdf.FigureCanvasPdf:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr ""

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.draw:2 of
msgid "Render the `.Figure`."
msgstr ""

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.draw:4 of
msgid ""
"It is important that this method actually walk the artist tree even if "
"not output is produced because this will trigger deferred work (like "
"computing limits auto-limits and tick values) that users may want access "
"to before saving to disk."
msgstr ""

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype:2 of
msgid ""
"Return the default savefig file format as specified in "
":rc:`savefig.format`."
msgstr ""

#: matplotlib.backends.backend_pdf.FigureCanvasPdf.get_default_filetype:5 of
msgid ""
"The returned string does not include a period. This method is overridden "
"in backends that only support a single file type."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.clip_cmd:2 of
msgid "Set clip rectangle. Calls `.pop()` and `.push()`."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.copy_properties:2 of
msgid "Copy properties of other into self."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.delta:2 of
msgid ""
"Copy properties of other into self and return PDF commands needed to "
"transform self into other."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.fill:2 of
msgid "Predicate: does the path need to be filled?"
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.fill:4 of
msgid ""
"An optional argument can be used to specify an alternative _fillcolor, as"
" needed by RendererPdf.draw_markers."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.finalize:2 of
msgid "Make sure every pushed graphics state is popped."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.paint:2 of
msgid ""
"Return the appropriate pdf operator to cause the path to be stroked, "
"filled, or both."
msgstr ""

#: matplotlib.backends.backend_pdf.GraphicsContextPdf.stroke:2 of
msgid ""
"Predicate: does the path need to be stroked (its outline drawn)? This "
"tests for the various conditions that disable stroking the path, in which"
" case it would presumably be filled."
msgstr ""

#: matplotlib.backends.backend_pdf.Name:1
#: matplotlib.backends.backend_pdf.Operator:1
#: matplotlib.backends.backend_pdf.PdfFile:1
#: matplotlib.backends.backend_pdf.PdfPages:1
#: matplotlib.backends.backend_pdf.Reference:1
#: matplotlib.backends.backend_pdf.Stream:1
#: matplotlib.backends.backend_pdf.Verbatim:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.backends.backend_pdf.Name:2 of
msgid "PDF name object."
msgstr ""

#: matplotlib.backends.backend_pdf.Op:1 of
msgid ""
"Bases: :py:class:`matplotlib.backends.backend_pdf.Operator`, "
":py:class:`enum.Enum`"
msgstr ""

#: matplotlib.backends.backend_pdf.Op:2 of
msgid "An enumeration."
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path:2 of
msgid "Return the PDF operator to paint a path."
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path
#: matplotlib.backends.backend_pdf.PdfFile
#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles
#: matplotlib.backends.backend_pdf.PdfPages
#: matplotlib.backends.backend_pdf.PdfPages.savefig
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text
#: matplotlib.backends.backend_pdf.Stream of
msgid "Parameters"
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path:8 of
msgid "**fill**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path:8 of
msgid "Fill the path with the fill color."
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path:24 of
msgid "**stroke**"
msgstr ""

#: matplotlib.backends.backend_pdf.Op.paint_path:11 of
msgid "Stroke the outline of the path with the line color."
msgstr ""

#: matplotlib.backends.backend_pdf.Operator:2 of
msgid "PDF operator object."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:2 of
msgid "PDF file object."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:29
#: matplotlib.backends.backend_pdf.PdfPages:45 of
msgid "**filename**"
msgstr ""

#: of
msgid "str or path-like or file-like"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:29 of
msgid "Output target; if a string, a file will be opened for writing."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:52
#: matplotlib.backends.backend_pdf.PdfPages:72 of
msgid "**metadata**"
msgstr ""

#: of
msgid "dict from strings to strings and dates"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:32
#: matplotlib.backends.backend_pdf.PdfPages:52 of
msgid ""
"Information dictionary object (see PDF reference section 10.2.1 'Document"
" Information Dictionary'), e.g.: ``{'Creator': 'My software', 'Author': "
"'Me', 'Title': 'Awesome'}``."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile:36
#: matplotlib.backends.backend_pdf.PdfPages:56 of
msgid ""
"The standard keys are 'Title', 'Author', 'Subject', 'Keywords', "
"'Creator', 'Producer', 'CreationDate', 'ModDate', and 'Trapped'. Values "
"have been predefined for 'Creator', 'Producer' and 'CreationDate'. They "
"can be removed by setting them to `None`."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:2 of
msgid "Add a Gouraud triangle shading."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:9
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:11
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:8 of
msgid "**points**"
msgstr ""

#: of
msgid "np.ndarray"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:8 of
msgid ""
"Triangle vertices, shape (n, 3, 2) where n = number of triangles, 3 = "
"vertices, 2 = x, y."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:11 of
msgid "**colors**"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:12 of
msgid ""
"Vertex colors, shape (n, 3, 1) or (n, 3, 4) as with points, but last "
"dimension is either (gray,) or (r, g, b, alpha)."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles of
msgid "Returns"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.addGouraudTriangles:31 of
msgid "Name, Reference"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.alphaState:2 of
msgid "Return name of an ExtGState that sets alpha to the given value."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.close:2 of
msgid "Flush all buffers and free all resources."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.dviFontName:2 of
msgid ""
"Given a dvi font object, return a name suitable for Op.selectfont. This "
"registers the font information in ``self.dviFontInfo`` if not yet "
"registered."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.embedTTF:2 of
msgid "Embed the TTF font from the named file into the document."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.finalize:2 of
msgid "Write out the various deferred objects and the pdf end matter."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.fontName:2 of
msgid ""
"Select a font based on fontprop and return a name suitable for "
"Op.selectfont. If fontprop is a string, it will be interpreted as the "
"filename of the font."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.imageObject:2 of
msgid "Return name of an image XObject representing the given image."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.markerObject:2 of
msgid "Return name of a marker XObject representing the given path."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.reserveObject:2 of
msgid "Reserve an ID for an indirect object."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.reserveObject:4 of
msgid ""
"The name is used for debugging in case we forget to print out the object "
"with writeObject."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.writeInfoDict:2 of
msgid "Write out the info dictionary, checking it for good form"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.writeTrailer:2 of
msgid "Write out the PDF trailer."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfFile.writeXref:2 of
msgid "Write out the xref table."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:2 of
msgid "A multi-page PDF file."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:15
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:37 of
msgid "Notes"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:16 of
msgid ""
"In reality `PdfPages` is a thin wrapper around `PdfFile`, in order to "
"avoid confusion when using `~.pyplot.savefig` and forgetting the format "
"argument."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:21 of
msgid "Examples"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:37 of
msgid "Create a new PdfPages object."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:43 of
msgid ""
"Plots using `PdfPages.savefig` will be written to a file at this "
"location. The file is opened at once and any older file with the same "
"name is overwritten."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:49 of
msgid "**keep_empty**"
msgstr ""

#: of
msgid "bool, optional"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages:48 of
msgid ""
"If set to False, then empty pdf files will be deleted automatically when "
"closed."
msgstr ""

#: of
msgid "dict, optional"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.attach_note:2 of
msgid ""
"Add a new text note to the page to be saved next. The optional "
"positionRect specifies the position of the new note on the page. It is "
"outside the page per default to make sure it is invisible on printouts."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.close:2 of
msgid "Finalize this object, making the underlying file a complete PDF file."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.get_pagecount:2 of
msgid "Return the current number of pages in the multipage pdf file."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.infodict:2 of
msgid ""
"Return a modifiable information dictionary object (see PDF reference "
"section 10.2.1 'Document Information Dictionary')."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.savefig:2 of
msgid "Save a `.Figure` to this file as a new page."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.savefig:4 of
msgid "Any other keyword arguments are passed to `~.Figure.savefig`."
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.savefig:22 of
msgid "**figure** : `.Figure` or int, default: the active figure"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.savefig:21 of
msgid "Figure or int, default: the active figure"
msgstr ""

#: matplotlib.backends.backend_pdf.PdfPages.savefig:9 of
msgid "The figure, or index of the figure, that is saved to the file."
msgstr ""

#: matplotlib.backends.backend_pdf.Reference:2 of
msgid "PDF reference object."
msgstr ""

#: matplotlib.backends.backend_pdf.Reference:4 of
msgid "Use PdfFile.reserveObject() to create References."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf:1 of
msgid "Bases: :py:class:`matplotlib.backends._backend_pdf_ps.RendererPDFPSBase`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:2 of
msgid "Draw a Gouraud-shaded triangle."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:7
#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:7
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:11
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:7 of
msgid "GraphicsContextBase"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:8
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:8 of
msgid "The graphics context."
msgstr ""

#: of
msgid "(3, 2) array-like"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:11 of
msgid "Array of (x, y) points for the triangle."
msgstr ""

#: of
msgid "(3, 4) array-like"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:14 of
msgid "RGBA colors for each point of the triangle."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:30
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:27 of
msgid "**transform** : `matplotlib.transforms.Transform`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:29
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:26
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:14
#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:30 of
msgid "matplotlib.transforms.Transform"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangle:17
#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:14 of
msgid "An affine transform to apply to the points."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:2 of
msgid "Draw a series of Gouraud triangles."
msgstr ""

#: of
msgid "(N, 3, 2) array-like"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:8 of
msgid "Array of *N* (x, y) points for the triangles."
msgstr ""

#: of
msgid "(N, 3, 4) array-like"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_gouraud_triangles:11 of
msgid "Array of *N* RGBA colors for each point of the triangles."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:2 of
msgid "Draw an RGBA image."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:12
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:11 of
msgid "**x**"
msgstr ""

#: of
msgid "scalar"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:11 of
msgid ""
"The distance in physical units (i.e., dots or pixels) from the left hand "
"side of the canvas."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:16
#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:14 of
msgid "**y**"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:15 of
msgid ""
"The distance in physical units (i.e., dots or pixels) from the bottom "
"side of the canvas."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:19 of
msgid "**im**"
msgstr ""

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_image:22 of
msgid ""
"If and only if the concrete backend is written such that "
":meth:`option_scale_image` returns ``True``, an affine transformation "
"(i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The "
"translation vector of the transformation is given in physical units "
"(i.e., dots or pixels). Note that the transformation does not override "
"*x* and *y*, and has to be applied *before* translating the result by *x*"
" and *y* (this can be accomplished by adding *x* and *y* to the "
"translation vector defined by *transform*)."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:2 of
msgid "Draw a marker at each of *path*'s vertices (excluding control points)."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:4 of
msgid ""
"This provides a fallback implementation of draw_markers that makes "
"multiple calls to :meth:`draw_path`.  Some backends may want to override "
"this method in order to draw the marker only once and reuse it multiple "
"times."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:15 of
msgid "**marker_trans** : `matplotlib.transforms.Transform`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:15 of
msgid "An affine transform applied to the marker."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:31 of
msgid "**trans** : `matplotlib.transforms.Transform`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_markers:18 of
msgid "An affine transform applied to the path."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:2 of
msgid ""
"Draw a collection of paths selecting drawing properties from the lists "
"*facecolors*, *edgecolors*, *linewidths*, *linestyles* and "
"*antialiaseds*. *offsets* is a list of offsets to apply to each of the "
"paths.  The offsets in *offsets* are first transformed by *offsetTrans* "
"before being applied."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:9 of
msgid ""
"*offset_position* is unused now, but the argument is kept for backwards "
"compatibility."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection:12 of
msgid ""
"This provides a fallback implementation of :meth:`draw_path_collection` "
"that makes multiple calls to :meth:`draw_path`.  Some backends may want "
"to override this in order to render each set of path data only once, and "
"then reference that path multiple times with the different offsets, "
"colors, styles etc.  The generator methods "
":meth:`_iter_collection_raw_paths` and :meth:`_iter_collection` are "
"provided to help with (and standardize) the implementation across "
"backends.  It is highly recommended to use those generators, so that "
"changes to the behavior of :meth:`draw_path_collection` can be made "
"globally."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:2 of
msgid "Draw the text instance."
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:17 of
msgid "**s**"
msgstr ""

#: of
msgid "str"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:17 of
msgid "The text string."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:20 of
msgid "The font properties."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:23 of
msgid "**angle**"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:26 of
msgid "The original text object to be rendered."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:40 of
msgid ""
"When you are trying to determine if you have gotten your bounding box "
"right (which is what enables the text layout/alignment to work properly),"
" it helps to change the line in text.py::"
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.draw_text:46 of
msgid ""
"to if 1, and then the actual bounding box will be plotted along with your"
" text."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.get_image_magnification:2 of
msgid ""
"Get the factor by which to magnify images passed to :meth:`draw_image`. "
"Allows a backend to have images at a different resolution to other "
"artists."
msgstr ""

#: matplotlib.backends.backend_pdf.RendererPdf.new_gc:2 of
msgid "Return an instance of a `.GraphicsContextBase`."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:2 of
msgid "PDF stream object."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:4 of
msgid ""
"This has no pdfRepr method. Instead, call begin(), then output the "
"contents of the stream by calling write(), and finally call end()."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:31 of
msgid "**id**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:31 of
msgid "Object id of the stream."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:35 of
msgid "**len**"
msgstr ""

#: of
msgid "Reference or None"
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:34 of
msgid ""
"An unused Reference object for the length of the stream; None means to "
"use a memory buffer so the length can be inlined."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:38 of
msgid "**file**"
msgstr ""

#: of
msgid "PdfFile"
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:38 of
msgid "The underlying object to write the stream to."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:41 of
msgid "**extra**"
msgstr ""

#: of
msgid "dict from Name to anything, or None"
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:41 of
msgid "Extra key-value pairs to include in the stream header."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:57 of
msgid "**png**"
msgstr ""

#: of
msgid "dict or None"
msgstr ""

#: matplotlib.backends.backend_pdf.Stream:44 of
msgid "If the data is already png encoded, the decode parameters."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream.end:2 of
msgid "Finalize stream."
msgstr ""

#: matplotlib.backends.backend_pdf.Stream.write:2 of
msgid "Write some data on the stream."
msgstr ""

#: matplotlib.backends.backend_pdf.Verbatim:2 of
msgid "Store verbatim PDF command content for later inclusion in the stream."
msgstr ""

#: matplotlib.backends.backend_pdf.fill:2 of
msgid "Make one string from sequence of strings, with whitespace in between."
msgstr ""

#: matplotlib.backends.backend_pdf.fill:4 of
msgid ""
"The whitespace is chosen to form lines of at most *linelen* characters, "
"if possible."
msgstr ""

#: matplotlib.backends.backend_pdf.pdfRepr:2 of
msgid "Map Python objects to PDF syntax."
msgstr ""

