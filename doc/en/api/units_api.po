# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../api/units_api.rst:3
msgid "``matplotlib.units``"
msgstr ""

#: matplotlib.units:1 of
msgid ""
"The classes here provide support for using custom classes with "
"Matplotlib, e.g., those that do not expose the array interface but know "
"how to convert themselves to arrays.  It also supports classes with units"
" and units conversion.  Use cases include converters for custom objects, "
"e.g., a list of datetime objects, as well as for objects that are unit "
"aware.  We don't assume any particular units implementation; rather a "
"units implementation must register with the Registry converter dictionary"
" and provide a `ConversionInterface`.  For example, here is a complete "
"implementation which supports plotting with native datetime objects::"
msgstr ""

#: matplotlib.units.AxisInfo:1 matplotlib.units.ConversionInterface:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.units.AxisInfo:2 of
msgid "Information to support default axis labeling, tick labeling, and limits."
msgstr ""

#: matplotlib.units.AxisInfo:4 of
msgid ""
"An instance of this class must be returned by "
"`ConversionInterface.axisinfo`."
msgstr ""

#: matplotlib.units.AxisInfo matplotlib.units.DecimalConverter.convert of
msgid "Parameters"
msgstr ""

#: matplotlib.units.AxisInfo:31 of
msgid "**majloc, minloc**"
msgstr ""

#: of
msgid "Locator, optional"
msgstr ""

#: matplotlib.units.AxisInfo:31 of
msgid "Tick locators for the major and minor ticks."
msgstr ""

#: matplotlib.units.AxisInfo:34 of
msgid "**majfmt, minfmt**"
msgstr ""

#: of
msgid "Formatter, optional"
msgstr ""

#: matplotlib.units.AxisInfo:34 of
msgid "Tick formatters for the major and minor ticks."
msgstr ""

#: matplotlib.units.AxisInfo:37 of
msgid "**label**"
msgstr ""

#: of
msgid "str, optional"
msgstr ""

#: matplotlib.units.AxisInfo:37 of
msgid "The default axis label."
msgstr ""

#: matplotlib.units.AxisInfo:49 of
msgid "**default_limits**"
msgstr ""

#: of
msgid "optional"
msgstr ""

#: matplotlib.units.AxisInfo:40 of
msgid "The default min and max limits of the axis if no data has been plotted."
msgstr ""

#: matplotlib.units.AxisInfo:52
#: matplotlib.units.ConversionInterface.is_numlike:18 of
msgid "Notes"
msgstr ""

#: matplotlib.units.AxisInfo:53 of
msgid ""
"If any of the above are ``None``, the axis will simply use the default "
"value."
msgstr ""

#: matplotlib.units.ConversionError:1 of
msgid "Bases: :py:class:`TypeError`"
msgstr ""

#: matplotlib.units.ConversionInterface:2 of
msgid ""
"The minimal interface for a converter to take custom data types (or "
"sequences) and convert them to values Matplotlib can use."
msgstr ""

#: matplotlib.units.ConversionInterface.axisinfo:2 of
msgid "Return an `.AxisInfo` for the axis with the specified units."
msgstr ""

#: matplotlib.units.ConversionInterface.convert:2 of
msgid "Convert *obj* using *unit* for the specified *axis*."
msgstr ""

#: matplotlib.units.ConversionInterface.convert:4 of
msgid ""
"If *obj* is a sequence, return the converted sequence.  The output must "
"be a sequence of scalars that can be used by the numpy array layer."
msgstr ""

#: matplotlib.units.ConversionInterface.default_units:2 of
msgid "Return the default unit for *x* or ``None`` for the given axis."
msgstr ""

#: matplotlib.units.ConversionInterface.is_numlike:2 of
msgid ""
"[*Deprecated*] The Matplotlib datalim, autoscaling, locators etc work "
"with scalars which are the units converted to floats given the current "
"unit.  The converter may be passed these floats, or arrays of them, even "
"when units are set."
msgstr ""

#: matplotlib.units.DecimalConverter:1 of
msgid "Bases: :py:class:`matplotlib.units.ConversionInterface`"
msgstr ""

#: matplotlib.units.DecimalConverter:2 of
msgid "Converter for decimal.Decimal data to float."
msgstr ""

#: matplotlib.units.DecimalConverter.convert:2 of
msgid "Convert Decimals to floats."
msgstr ""

#: matplotlib.units.DecimalConverter.convert:4 of
msgid "The *unit* and *axis* arguments are not used."
msgstr ""

#: matplotlib.units.DecimalConverter.convert:22 of
msgid "**value**"
msgstr ""

#: of
msgid "decimal.Decimal or iterable"
msgstr ""

#: matplotlib.units.DecimalConverter.convert:9 of
msgid "Decimal or list of Decimal need to be converted"
msgstr ""

#: matplotlib.units.Registry:1 of
msgid "Bases: :py:class:`dict`"
msgstr ""

#: matplotlib.units.Registry:2 of
msgid "Register types with conversion interface."
msgstr ""

#: matplotlib.units.Registry.get_converter:2 of
msgid "Get the converter interface instance for *x*, or None."
msgstr ""

