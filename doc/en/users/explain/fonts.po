# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../users/explain/fonts.rst:4
msgid "Fonts in Matplotlib text engine"
msgstr ""

#: ../../users/explain/fonts.rst:6
msgid ""
"Matplotlib needs fonts to work with its text engine, some of which are "
"shipped alongside the installation. However, users can configure the "
"default fonts, or even provide their own custom fonts! For more details, "
"see :doc:`Customizing text properties </tutorials/text/text_props>`."
msgstr ""

#: ../../users/explain/fonts.rst:11
msgid ""
"However, Matplotlib also provides an option to offload text rendering to "
"a TeX engine (``usetex=True``), see :doc:`Text rendering with LaTeX "
"</tutorials/text/usetex>`."
msgstr ""

#: ../../users/explain/fonts.rst:16
msgid "Font specifications"
msgstr ""

#: ../../users/explain/fonts.rst:17
msgid ""
"Fonts have a long and sometimes incompatible history in computing, "
"leading to different platforms supporting different types of fonts. In "
"practice, there are 3 types of font specifications Matplotlib supports "
"(in addition to 'core fonts', more about which is explained later in the "
"guide):"
msgstr ""

#: ../../users/explain/fonts.rst:22
msgid "Type of Fonts"
msgstr ""

#: ../../users/explain/fonts.rst:25
msgid "Type 1 (PDF)"
msgstr ""

#: ../../users/explain/fonts.rst:26
msgid "Type 3 (PDF/PS)"
msgstr ""

#: ../../users/explain/fonts.rst:27
msgid "TrueType (PDF)"
msgstr ""

#: ../../users/explain/fonts.rst:28
msgid "One of the oldest types, introduced by Adobe"
msgstr ""

#: ../../users/explain/fonts.rst:29
msgid "Similar to Type 1 in terms of introduction"
msgstr ""

#: ../../users/explain/fonts.rst:30
msgid "Newer than previous types, used commonly today, introduced by Apple"
msgstr ""

#: ../../users/explain/fonts.rst:31
msgid "Restricted subset of PostScript, charstrings are in bytecode"
msgstr ""

#: ../../users/explain/fonts.rst:32
msgid ""
"Full PostScript language, allows embedding arbitrary code (in theory, "
"even render fractals when rasterizing!)"
msgstr ""

#: ../../users/explain/fonts.rst:34
msgid "Include a virtual machine that can execute code!"
msgstr ""

#: ../../users/explain/fonts.rst:35
msgid "These fonts support font hinting"
msgstr ""

#: ../../users/explain/fonts.rst:36
msgid "Do not support font hinting"
msgstr ""

#: ../../users/explain/fonts.rst:37
msgid "Hinting supported (virtual machine processes the \"hints\")"
msgstr ""

#: ../../users/explain/fonts.rst:38
msgid "Non-subsetted through Matplotlib"
msgstr ""

#: ../../users/explain/fonts.rst:39
msgid ""
"Subsetted via external module `ttconv "
"<https://github.com/sandflow/ttconv>`_"
msgstr ""

#: ../../users/explain/fonts.rst:40
msgid ""
"Subsetted via external module `fonttools "
"<https://github.com/fonttools/fonttools>`_"
msgstr ""

#: ../../users/explain/fonts.rst:42
msgid ""
"NOTE: Adobe will disable support for authoring with Type 1 fonts in "
"January 2023. `Read more here. <https://helpx.adobe.com/fonts/kb"
"/postscript-type-1-fonts-end-of-support.html>`_"
msgstr ""

#: ../../users/explain/fonts.rst:46
msgid "Special mentions"
msgstr ""

#: ../../users/explain/fonts.rst:47
msgid "Other font specifications which Matplotlib supports:"
msgstr ""

#: ../../users/explain/fonts.rst:49
msgid "Type 42 fonts (PS):"
msgstr ""

#: ../../users/explain/fonts.rst:51
msgid "PostScript wrapper around TrueType fonts"
msgstr ""

#: ../../users/explain/fonts.rst:52
msgid ""
"42 is the `Answer to Life, the Universe, and Everything! "
"<https://en.wikipedia.org/wiki/Answer_to_Life,_the_Universe,_and_Everything>`_"
msgstr ""

#: ../../users/explain/fonts.rst:53
msgid ""
"Matplotlib uses an external library called `fonttools "
"<https://github.com/fonttools/fonttools>`_ to subset these types of fonts"
msgstr ""

#: ../../users/explain/fonts.rst:56
msgid "OpenType fonts:"
msgstr ""

#: ../../users/explain/fonts.rst:58
msgid ""
"OpenType is a new standard for digital type fonts, developed jointly by "
"Adobe and Microsoft"
msgstr ""

#: ../../users/explain/fonts.rst:60
msgid "Generally contain a much larger character set!"
msgstr ""

#: ../../users/explain/fonts.rst:61
msgid "Limited Support with Matplotlib"
msgstr ""

#: ../../users/explain/fonts.rst:64
msgid "Subsetting"
msgstr ""

#: ../../users/explain/fonts.rst:65
msgid ""
"Matplotlib is able to generate documents in multiple different formats. "
"Some of those formats (for example, PDF, PS/EPS, SVG) allow embedding "
"font data in such a way that when these documents are visually scaled, "
"the text does not appear pixelated."
msgstr ""

#: ../../users/explain/fonts.rst:70
msgid ""
"This can be achieved by embedding the *whole* font file within the output"
" document. However, this can lead to very large documents, as some fonts "
"(for instance, CJK - Chinese/Japanese/Korean fonts) can contain a large "
"number of glyphs, and thus their embedded size can be quite huge."
msgstr ""

#: ../../users/explain/fonts.rst:75
msgid ""
"Font Subsetting can be used before generating documents, to embed only "
"the *required* glyphs within the documents. Fonts can be considered as a "
"collection of glyphs, so ultimately the goal is to find out *which* "
"glyphs are required for a certain array of characters, and embed only "
"those within the output."
msgstr ""

#: ../../users/explain/fonts.rst:81
msgid ""
"The role of subsetter really shines when we encounter characters like "
"**ä** (composed by calling subprograms for **a** and **¨**); since the "
"subsetter has to find out *all* such subprograms being called by every "
"glyph included in the subset, this is a generally difficult problem!"
msgstr ""

#: ../../users/explain/fonts.rst:86
msgid ""
"Luckily, Matplotlib uses a fork of an external dependency called `ttconv "
"<https://github.com/sandflow/ttconv>`_, which helps in embedding and "
"subsetting font data. (however, recent versions have moved away from "
"ttconv to pure Python for certain types: for more details visit `these "
"<https://github.com/matplotlib/matplotlib/pull/18370>`_, `links "
"<https://github.com/matplotlib/matplotlib/pull/18181>`_)"
msgstr ""

#: ../../users/explain/fonts.rst:92
msgid ""
"*Type 1 fonts are still non-subsetted* through Matplotlib. (though one "
"will encounter these mostly via *usetex*/*dviread* in PDF backend)"
msgstr ""

#: ../../users/explain/fonts.rst:93
msgid ""
"**Type 3 and Type 42 fonts are subsetted**, with a fair amount of "
"exceptions and bugs for the latter."
msgstr ""

#: ../../users/explain/fonts.rst:96
msgid "What to use?"
msgstr ""

#: ../../users/explain/fonts.rst:97
msgid ""
"Practically, most fonts that are readily available on most operating "
"systems or are readily available on the internet to download include "
"*TrueType fonts* and its \"extensions\" such as MacOS-resource fork fonts"
" and the newer OpenType fonts."
msgstr ""

#: ../../users/explain/fonts.rst:102
msgid ""
"PS and PDF backends provide support for yet another type of fonts, which "
"remove the need of subsetting altogether! These are called **Core "
"Fonts**, and Matplotlib calls them via the keyword **AFM**; all that is "
"supplied from Matplotlib to such documents are font metrics (specified in"
" AFM format), and it is the job of the viewer applications to supply the "
"glyph definitions."
msgstr ""

#: ../../users/explain/fonts.rst:108
msgid "This is especially helpful to generate *really lightweight* documents.::"
msgstr ""

#: ../../users/explain/fonts.rst:123
msgid ""
"These core fonts are limited to PDF and PS backends only; they can not be"
" rendered in other backends."
msgstr ""

#: ../../users/explain/fonts.rst:126
msgid ""
"Another downside to this is that while the font metrics are standardized,"
" different PDF viewer applications will have different fonts to render "
"these metrics. In other words, the **output might look different on "
"different viewers**, as well as (let's say) Windows and Linux, if Linux "
"tools included free versions of the proprietary fonts."
msgstr ""

#: ../../users/explain/fonts.rst:132
msgid ""
"This also violates the *what-you-see-is-what-you-get* feature of "
"Matplotlib."
msgstr ""

