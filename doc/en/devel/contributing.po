# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../devel/contributing.rst:5
msgid "Contributing"
msgstr ""

#: ../../devel/contributing.rst:7
msgid ""
"This project is a community effort, and everyone is welcome to "
"contribute. Everyone within the community is expected to abide by our "
"`code of conduct "
"<https://github.com/matplotlib/matplotlib/blob/master/CODE_OF_CONDUCT.md>`_."
msgstr ""

#: ../../devel/contributing.rst:12
msgid "The project is hosted on https://github.com/matplotlib/matplotlib"
msgstr ""

#: ../../devel/contributing.rst:16
msgid "Contributor incubator"
msgstr ""

#: ../../devel/contributing.rst:18
msgid ""
"If you are interested in becoming a regular contributor to Matplotlib, "
"but don't know where to start or feel insecure about it, you can join our"
" non-public communication channel for new contributors. To do so, please "
"go to `gitter <https://gitter.im/matplotlib/matplotlib>`_ and ask to be "
"added to '#incubator'. This is a private gitter room moderated by core "
"Matplotlib developers where you can get guidance and support for your "
"first few PRs.  This is a place you can ask questions about anything: how"
" to use git, github, how our PR review process works, technical questions"
" about the code, what makes for good documentation or a blog post, how to"
" get involved involved in community work, or get \"pre-review\" on your "
"PR."
msgstr ""

#: ../../devel/contributing.rst:32
msgid "Issues for new contributors"
msgstr ""

#: ../../devel/contributing.rst:34
#, python-format
msgid ""
"While any contributions are welcome, we have marked some issues as "
"particularly suited for new contributors by the label `good first issue "
"<https://github.com/matplotlib/matplotlib/labels/good%20first%20issue>`_ "
"These are well documented issues, that do not require a deep "
"understanding of the internals of Matplotlib. The issues may additionally"
" be tagged with a difficulty. ``Difficulty: Easy`` is suited for people "
"with little Python experience. ``Difficulty: Medium`` and ``Difficulty: "
"Hard`` are not trivial to solve and require more thought and programming "
"experience."
msgstr ""

#: ../../devel/contributing.rst:46
msgid "Submitting a bug report"
msgstr ""

#: ../../devel/contributing.rst:48
msgid ""
"If you find a bug in the code or documentation, do not hesitate to submit"
" a ticket to the `Issue Tracker "
"<https://github.com/matplotlib/matplotlib/issues>`_. You are also welcome"
" to post feature requests or pull requests."
msgstr ""

#: ../../devel/contributing.rst:53
msgid "If you are reporting a bug, please do your best to include the following:"
msgstr ""

#: ../../devel/contributing.rst:55
msgid ""
"A short, top-level summary of the bug. In most cases, this should be 1-2 "
"sentences."
msgstr ""

#: ../../devel/contributing.rst:58
msgid ""
"A short, self-contained code snippet to reproduce the bug, ideally "
"allowing a simple copy and paste to reproduce. Please do your best to "
"reduce the code snippet to the minimum required."
msgstr ""

#: ../../devel/contributing.rst:62
msgid "The actual outcome of the code snippet."
msgstr ""

#: ../../devel/contributing.rst:64
msgid "The expected outcome of the code snippet."
msgstr ""

#: ../../devel/contributing.rst:66
msgid ""
"The Matplotlib version, Python version and platform that you are using. "
"You can grab the version with the following commands::"
msgstr ""

#: ../../devel/contributing.rst:76
msgid ""
"We have preloaded the issue creation page with a Markdown template that "
"you can use to organize this information."
msgstr ""

#: ../../devel/contributing.rst:79
msgid ""
"Thank you for your help in keeping bug reports complete, targeted and "
"descriptive."
msgstr ""

#: ../../devel/contributing.rst:84
msgid "Requesting a new feature"
msgstr ""

#: ../../devel/contributing.rst:86
msgid ""
"Please post feature requests to the `Issue Tracker "
"<https://github.com/matplotlib/matplotlib/issues>`_."
msgstr ""

#: ../../devel/contributing.rst:89
msgid ""
"The Matplotlib developers will give feedback on the feature proposal. "
"Since Matplotlib is an open source project with limited resources, we "
"encourage users to then also :ref:`participate in the implementation "
"<contributing-code>`."
msgstr ""

#: ../../devel/contributing.rst:97
msgid "Contributing code"
msgstr ""

#: ../../devel/contributing.rst:102
msgid "How to contribute"
msgstr ""

#: ../../devel/contributing.rst:104
msgid ""
"The preferred way to contribute to Matplotlib is to fork the `main "
"repository <https://github.com/matplotlib/matplotlib/>`__ on GitHub, then"
" submit a \"pull request\" (PR)."
msgstr ""

#: ../../devel/contributing.rst:108
msgid "A brief overview is:"
msgstr ""

#: ../../devel/contributing.rst:110
msgid ""
"`Create an account <https://github.com/join>`_ on GitHub if you do not "
"already have one."
msgstr ""

#: ../../devel/contributing.rst:113
msgid ""
"Fork the `project repository "
"<https://github.com/matplotlib/matplotlib>`_: click on the 'Fork' button "
"near the top of the page. This creates a copy of the code under your "
"account on the GitHub server."
msgstr ""

#: ../../devel/contributing.rst:117
msgid "Clone this copy to your local disk::"
msgstr ""

#: ../../devel/contributing.rst:121
msgid ""
"Enter the directory and install the local version of Matplotlib. See "
":ref:`installing_for_devs` for instructions"
msgstr ""

#: ../../devel/contributing.rst:124
msgid "Create a branch to hold your changes::"
msgstr ""

#: ../../devel/contributing.rst:128
msgid "and start making changes. Never work in the ``master`` branch!"
msgstr ""

#: ../../devel/contributing.rst:130
msgid ""
"Work on this copy, on your computer, using Git to do the version control."
" When you're done editing e.g., ``lib/matplotlib/collections.py``, do::"
msgstr ""

#: ../../devel/contributing.rst:136
msgid "to record your changes in Git, then push them to GitHub with::"
msgstr ""

#: ../../devel/contributing.rst:140
msgid ""
"Finally, go to the web page of your fork of the Matplotlib repo, and "
"click 'Pull request' to send your changes to the maintainers for review."
msgstr ""

#: ../../devel/contributing.rst:145
msgid "`Git documentation <https://git-scm.com/doc>`_"
msgstr ""

#: ../../devel/contributing.rst:146
msgid ""
"`Git-Contributing to a Project <https://git-scm.com/book/en/v2/GitHub-"
"Contributing-to-a-Project>`_"
msgstr ""

#: ../../devel/contributing.rst:147
msgid ""
"`Introduction to GitHub  <https://lab.github.com/githubtraining"
"/introduction-to-github>`_"
msgstr ""

#: ../../devel/contributing.rst:148
msgid ":ref:`development-workflow` for best practices for Matplotlib"
msgstr ""

#: ../../devel/contributing.rst:149
msgid ":ref:`using-git`"
msgstr ""

#: ../../devel/contributing.rst:152
msgid "Contributing pull requests"
msgstr ""

#: ../../devel/contributing.rst:154
msgid ""
"It is recommended to check that your contribution complies with the "
"following rules before submitting a pull request:"
msgstr ""

#: ../../devel/contributing.rst:157
msgid ""
"If your pull request addresses an issue, please use the title to describe"
" the issue and mention the issue number in the pull request description "
"to ensure that a link is created to the original issue."
msgstr ""

#: ../../devel/contributing.rst:161
msgid ""
"All public methods should have informative docstrings with sample usage "
"when appropriate. Use the `numpy docstring standard "
"<https://numpydoc.readthedocs.io/en/latest/format.html>`_."
msgstr ""

#: ../../devel/contributing.rst:165
msgid ""
"Formatting should follow the recommendations of PEP8_, as enforced by "
"flake8_.  You can check flake8 compliance from the command line with ::"
msgstr ""

#: ../../devel/contributing.rst:171
msgid ""
"or your editor may provide integration with it.  Note that Matplotlib "
"intentionally does not use the black_ auto-formatter (1__), in particular"
" due to its unability to understand the semantics of mathematical "
"expressions (2__, 3__)."
msgstr ""

#: ../../devel/contributing.rst:183
msgid ""
"Each high-level plotting function should have a simple example in the "
"``Example`` section of the docstring.  This should be as simple as "
"possible to demonstrate the method.  More complex examples should go in "
"the ``examples`` tree."
msgstr ""

#: ../../devel/contributing.rst:188
msgid ""
"Changes (both new features and bugfixes) should have good test coverage. "
"See :ref:`testing` for more details."
msgstr ""

#: ../../devel/contributing.rst:191
msgid "Import the following modules using the standard scipy conventions::"
msgstr ""

#: ../../devel/contributing.rst:200
msgid ""
"In general, Matplotlib modules should **not** import `.rcParams` using "
"``from matplotlib import rcParams``, but rather access it as "
"``mpl.rcParams``.  This is because some modules are imported very early, "
"before the `.rcParams` singleton is constructed."
msgstr ""

#: ../../devel/contributing.rst:205
msgid ""
"If your change is a major new feature, add an entry to the ``What's new``"
" section by adding a new file in ``doc/users/next_whats_new`` (see "
":file:`doc/users/next_whats_new/README.rst` for more information)."
msgstr ""

#: ../../devel/contributing.rst:209
msgid ""
"If you change the API in a backward-incompatible way, please document it "
"in :file:`doc/api/next_api_changes/behavior`, by adding a new file with "
"the naming convention ``99999-ABC.rst`` where the pull request number is "
"followed by the contributor's initials. (see "
":file:`doc/api/api_changes.rst` for more information)"
msgstr ""

#: ../../devel/contributing.rst:215
msgid ""
"See below for additional points about :ref:`keyword-argument-processing`,"
" if applicable for your pull request."
msgstr ""

#: ../../devel/contributing.rst:220
msgid ""
"The current state of the Matplotlib code base is not compliant with all "
"of those guidelines, but we expect that enforcing those constraints on "
"all new contributions will move the overall code base quality in the "
"right direction."
msgstr ""

#: ../../devel/contributing.rst:228
msgid ":ref:`coding_guidelines`"
msgstr ""

#: ../../devel/contributing.rst:229
msgid ":ref:`testing`"
msgstr ""

#: ../../devel/contributing.rst:230 ../../devel/contributing.rst:258
msgid ":ref:`documenting-matplotlib`"
msgstr ""

#: ../../devel/contributing.rst:238
msgid "Contributing documentation"
msgstr ""

#: ../../devel/contributing.rst:240
msgid ""
"You as an end-user of Matplotlib can make a valuable contribution because"
" you more clearly see the potential for improvement than a core "
"developer. For example, you can:"
msgstr ""

#: ../../devel/contributing.rst:243
msgid "Fix a typo"
msgstr ""

#: ../../devel/contributing.rst:244
msgid "Clarify a docstring"
msgstr ""

#: ../../devel/contributing.rst:245
msgid "Write or update an :ref:`example plot <gallery>`"
msgstr ""

#: ../../devel/contributing.rst:246
msgid "Write or update a comprehensive :ref:`tutorial <tutorials>`"
msgstr ""

#: ../../devel/contributing.rst:248
msgid ""
"The documentation source files live in the same GitHub repository as the "
"code. Contributions are proposed and accepted through the pull request "
"process. For details see :ref:`how-to-contribute`."
msgstr ""

#: ../../devel/contributing.rst:252
msgid ""
"If you have trouble getting started, you may instead open an `issue`_ "
"describing the intended improvement."
msgstr ""

#: ../../devel/contributing.rst:263
msgid "Other ways to contribute"
msgstr ""

#: ../../devel/contributing.rst:265
msgid ""
"It also helps us if you spread the word: reference the project from your "
"blog and articles or link to it from your website!  If Matplotlib "
"contributes to a project that leads to a scientific publication, please "
"follow the :doc:`/users/project/citing` guidelines."
msgstr ""

#: ../../devel/contributing.rst:273
msgid "Coding guidelines"
msgstr ""

#: ../../devel/contributing.rst:276
msgid "API changes"
msgstr ""

#: ../../devel/contributing.rst:278
msgid ""
"API consistency and stability are of great value. Therefore, API changes "
"(e.g. signature changes, behavior changes, removals) will only be "
"conducted if the added benefit is worth the user effort for adapting."
msgstr ""

#: ../../devel/contributing.rst:282
msgid ""
"API changes in Matplotlib have to be performed following the deprecation "
"process below, except in very rare circumstances as deemed necessary by "
"the development team. This ensures that users are notified before the "
"change will take effect and thus prevents unexpected breaking of code."
msgstr ""

#: ../../devel/contributing.rst:288
msgid "Rules"
msgstr ""

#: ../../devel/contributing.rst:290
msgid "Deprecations are targeted at the next point.release (e.g. 3.x)"
msgstr ""

#: ../../devel/contributing.rst:291
msgid ""
"Deprecated API is generally removed two two point-releases after "
"introduction of the deprecation. Longer deprecations can be imposed by "
"core developers on a case-by-case basis to give more time for the "
"transition"
msgstr ""

#: ../../devel/contributing.rst:294
msgid "The old API must remain fully functional during the deprecation period"
msgstr ""

#: ../../devel/contributing.rst:295
msgid ""
"If alternatives to the deprecated API exist, they should be available "
"during the deprecation period"
msgstr ""

#: ../../devel/contributing.rst:297
msgid ""
"If in doubt, decisions about API changes are finally made by the API "
"consistency lead developer"
msgstr ""

#: ../../devel/contributing.rst:301
msgid "Introducing"
msgstr ""

#: ../../devel/contributing.rst:303
msgid ""
"Announce the deprecation in a new file "
":file:`doc/api/next_api_changes/deprecations/99999-ABC.rst` where "
"``99999`` is the pull request number and ``ABC`` are the contributor's "
"initials."
msgstr ""

#: ../../devel/contributing.rst:306
msgid ""
"If possible, issue a `.MatplotlibDeprecationWarning` when the deprecated "
"API is used. There are a number of helper tools for this:"
msgstr ""

#: ../../devel/contributing.rst:309
msgid "Use ``_api.warn_deprecated()`` for general deprecation warnings"
msgstr ""

#: ../../devel/contributing.rst:310
msgid ""
"Use the decorator ``@_api.deprecated`` to deprecate classes, functions, "
"methods, or properties"
msgstr ""

#: ../../devel/contributing.rst:312
msgid ""
"To warn on changes of the function signature, use the decorators "
"``@_api.delete_parameter``, ``@_api.rename_parameter``, and "
"``@_api.make_keyword_only``"
msgstr ""

#: ../../devel/contributing.rst:316
msgid ""
"All these helpers take a first parameter *since*, which should be set to "
"the next point release, e.g. \"3.x\"."
msgstr ""

#: ../../devel/contributing.rst:320
msgid "Expiring"
msgstr ""

#: ../../devel/contributing.rst:322
msgid ""
"Announce the API changes in a new file "
":file:`doc/api/next_api_changes/[kind]/99999-ABC.rst` where ``99999`` is "
"the pull request number and ``ABC`` are the contributor's initials, and "
"``[kind]`` is one of the folders :file:`behavior`, :file:`development`, "
":file:`removals`. See :file:`doc/api/next_api_changes/README.rst` for "
"more information. For the content, you can usually copy the deprecation "
"notice and adapt it slightly."
msgstr ""

#: ../../devel/contributing.rst:329
msgid "Change the code functionality and remove any related deprecation warnings."
msgstr ""

#: ../../devel/contributing.rst:332
msgid "Adding new API"
msgstr ""

#: ../../devel/contributing.rst:334
msgid ""
"Every new function, parameter and attribute that is not explicitly marked"
" as private (i.e., starts with an underscore) becomes part of "
"Matplotlib's public API. As discussed above, changing the existing API is"
" cumbersome. Therefore, take particular care when adding new API:"
msgstr ""

#: ../../devel/contributing.rst:339
msgid ""
"Mark helper functions and internal attributes as private by prefixing "
"them with an underscore."
msgstr ""

#: ../../devel/contributing.rst:341
msgid "Carefully think about good names for your functions and variables."
msgstr ""

#: ../../devel/contributing.rst:342
msgid ""
"Try to adopt patterns and naming conventions from existing parts of the "
"Matplotlib API."
msgstr ""

#: ../../devel/contributing.rst:344
msgid ""
"Consider making as many arguments keyword-only as possible. See also `API"
" Evolution the Right Way -- Add Parameters Compatibly`__."
msgstr ""

#: ../../devel/contributing.rst:351
msgid "New modules and files: installation"
msgstr ""

#: ../../devel/contributing.rst:353
msgid ""
"If you have added new files or directories, or reorganized existing ones,"
" make sure the new files are included in the match patterns in in "
"*package_data* in :file:`setupext.py`."
msgstr ""

#: ../../devel/contributing.rst:358
msgid "C/C++ extensions"
msgstr ""

#: ../../devel/contributing.rst:360
msgid "Extensions may be written in C or C++."
msgstr ""

#: ../../devel/contributing.rst:362
msgid ""
"Code style should conform to PEP7 (understanding that PEP7 doesn't "
"address C++, but most of its admonitions still apply)."
msgstr ""

#: ../../devel/contributing.rst:365
msgid ""
"Python/C interface code should be kept separate from the core C/C++ code."
"  The interface code should be named :file:`FOO_wrap.cpp` or "
":file:`FOO_wrapper.cpp`."
msgstr ""

#: ../../devel/contributing.rst:369
msgid ""
"Header file documentation (aka docstrings) should be in Numpydoc format."
"  We don't plan on using automated tools for these docstrings, and the "
"Numpydoc format is well understood in the scientific Python community."
msgstr ""

#: ../../devel/contributing.rst:374
msgid ""
"C/C++ code in the :file:`extern/` directory is vendored, and should be "
"kept close to upstream whenever possible.  It can be modified to fix bugs"
" or implement new features only if the required changes cannot be made "
"elsewhere in the codebase.  In particular, avoid making style fixes to "
"it."
msgstr ""

#: ../../devel/contributing.rst:382
msgid "Keyword argument processing"
msgstr ""

#: ../../devel/contributing.rst:384
msgid ""
"Matplotlib makes extensive use of ``**kwargs`` for pass-through "
"customizations from one function to another.  A typical example is "
"`~matplotlib.axes.Axes.text`.  The definition of `matplotlib.pyplot.text`"
" is a simple pass-through to `matplotlib.axes.Axes.text`::"
msgstr ""

#: ../../devel/contributing.rst:393
msgid ""
"`matplotlib.axes.Axes.text` (simplified for illustration) just passes all"
" ``args`` and ``kwargs`` on to ``matplotlib.text.Text.__init__``::"
msgstr ""

#: ../../devel/contributing.rst:400
msgid ""
"and ``matplotlib.text.Text.__init__`` (again, simplified) just passes "
"them on to the `matplotlib.artist.Artist.update` method::"
msgstr ""

#: ../../devel/contributing.rst:408
msgid ""
"``update`` does the work looking for methods named like ``set_property`` "
"if ``property`` is a keyword argument.  i.e., no one looks at the "
"keywords, they just get passed through the API to the artist constructor "
"which looks for suitably named methods and calls them with the value."
msgstr ""

#: ../../devel/contributing.rst:414
msgid ""
"As a general rule, the use of ``**kwargs`` should be reserved for pass-"
"through keyword arguments, as in the example above.  If all the keyword "
"args are to be used in the function, and not passed on, use the key/value"
" keyword args in the function definition rather than the ``**kwargs`` "
"idiom."
msgstr ""

#: ../../devel/contributing.rst:420
msgid ""
"In some cases, you may want to consume some keys in the local function, "
"and let others pass through.  Instead of popping arguments to use off "
"``**kwargs``, specify them as keyword-only arguments to the local "
"function.  This makes it obvious at a glance which arguments will be "
"consumed in the function.  For example, in "
":meth:`~matplotlib.axes.Axes.plot`, ``scalex`` and ``scaley`` are local "
"arguments and the rest are passed on as :meth:`~matplotlib.lines.Line2D` "
"keyword arguments::"
msgstr ""

#: ../../devel/contributing.rst:439
msgid "Using logging for debug messages"
msgstr ""

#: ../../devel/contributing.rst:441
msgid ""
"Matplotlib uses the standard Python `logging` library to write verbose "
"warnings, information, and debug messages. Please use it! In all those "
"places you write `print` calls to do your debugging, try using "
"`logging.debug` instead!"
msgstr ""

#: ../../devel/contributing.rst:447
msgid ""
"To include `logging` in your module, at the top of the module, you need "
"to ``import logging``.  Then calls in your code like::"
msgstr ""

#: ../../devel/contributing.rst:457
msgid "will log to a logger named ``matplotlib.yourmodulename``."
msgstr ""

#: ../../devel/contributing.rst:459
msgid ""
"If an end-user of Matplotlib sets up `logging` to display at levels more "
"verbose than ``logging.WARNING`` in their code with the Matplotlib-"
"provided helper::"
msgstr ""

#: ../../devel/contributing.rst:465
msgid "or manually with ::"
msgstr ""

#: ../../devel/contributing.rst:471
msgid "Then they will receive messages like"
msgstr ""

#: ../../devel/contributing.rst:480
msgid "Which logging level to use?"
msgstr ""

#: ../../devel/contributing.rst:482
msgid "There are five levels at which you can emit messages."
msgstr ""

#: ../../devel/contributing.rst:484
msgid ""
"`logging.critical` and `logging.error` are really only there for errors "
"that will end the use of the library but not kill the interpreter."
msgstr ""

#: ../../devel/contributing.rst:486
msgid ""
"`logging.warning` and `._api.warn_external` are used to warn the user, "
"see below."
msgstr ""

#: ../../devel/contributing.rst:488
msgid ""
"`logging.info` is for information that the user may want to know if the "
"program behaves oddly. They are not displayed by default. For instance, "
"if an object isn't drawn because its position is ``NaN``, that can "
"usually be ignored, but a mystified user could call "
"``logging.basicConfig(level=logging.INFO)`` and get an error message that"
" says why."
msgstr ""

#: ../../devel/contributing.rst:494
msgid ""
"`logging.debug` is the least likely to be displayed, and hence can be the"
" most verbose.  \"Expected\" code paths (e.g., reporting normal "
"intermediate steps of layouting or rendering) should only log at this "
"level."
msgstr ""

#: ../../devel/contributing.rst:498
msgid ""
"By default, `logging` displays all log messages at levels higher than "
"``logging.WARNING`` to `sys.stderr`."
msgstr ""

#: ../../devel/contributing.rst:501
msgid ""
"The `logging tutorial`_ suggests that the difference between "
"`logging.warning` and `._api.warn_external` (which uses `warnings.warn`) "
"is that `._api.warn_external` should be used for things the user must "
"change to stop the warning (typically in the source), whereas "
"`logging.warning` can be more persistent. Moreover, note that "
"`._api.warn_external` will by default only emit a given warning *once* "
"for each line of user code, whereas `logging.warning` will display the "
"message every time it is called."
msgstr ""

#: ../../devel/contributing.rst:509
msgid ""
"By default, `warnings.warn` displays the line of code that has the "
"``warn`` call. This usually isn't more informative than the warning "
"message itself. Therefore, Matplotlib uses `._api.warn_external` which "
"uses `warnings.warn`, but goes up the stack and displays the first line "
"of code outside of Matplotlib. For example, for the module::"
msgstr ""

#: ../../devel/contributing.rst:522
msgid "running the script::"
msgstr ""

#: ../../devel/contributing.rst:527
msgid "will display::"
msgstr ""

#: ../../devel/contributing.rst:532
msgid "Modifying the module to use `._api.warn_external`::"
msgstr ""

#: ../../devel/contributing.rst:540
msgid "and running the same script will display"
msgstr ""

#: ../../devel/contributing.rst:552
msgid "Writing examples"
msgstr ""

#: ../../devel/contributing.rst:554
msgid ""
"We have hundreds of examples in subdirectories of "
":file:`matplotlib/examples`, and these are automatically generated when "
"the website is built to show up in the :ref:`examples <gallery>` section "
"of the website."
msgstr ""

#: ../../devel/contributing.rst:558
msgid ""
"Any sample data that the example uses should be kept small and "
"distributed with Matplotlib in the :file:`lib/matplotlib/mpl-"
"data/sample_data/` directory.  Then in your example code you can load it "
"into a file handle with::"
msgstr ""

