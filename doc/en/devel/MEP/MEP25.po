# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../devel/MEP/MEP25.rst:3
msgid "MEP25: Serialization"
msgstr ""

#: ../../devel/MEP/MEP25.rst:8
msgid "Status"
msgstr ""

#: ../../devel/MEP/MEP25.rst:10
msgid "**Rejected**"
msgstr ""

#: ../../devel/MEP/MEP25.rst:12
msgid "This work is important, but this particular effort has stalled."
msgstr ""

#: ../../devel/MEP/MEP25.rst:15
msgid "Branches and Pull requests"
msgstr ""

#: ../../devel/MEP/MEP25.rst:17
msgid "development branches:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:19
msgid "related pull requests:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:22
msgid "Abstract"
msgstr ""

#: ../../devel/MEP/MEP25.rst:24
msgid ""
"This MEP aims at adding a serializable ``Controller`` objects to act as "
"an ``Artist`` managers. Users would then communicate changes to an "
"``Artist`` via a ``Controller``. In this way, functionality of the "
"``Controller`` objects may be added incrementally since each ``Artist`` "
"is still responsible for drawing everything. The goal is to create an API"
" that is usable both by graphing libraries requiring high-level "
"descriptions of figures and libraries requiring low-level "
"interpretations."
msgstr ""

#: ../../devel/MEP/MEP25.rst:34
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP25.rst:36
msgid ""
"Matplotlib is a core plotting engine with an API that many users already "
"understand. It's difficult/impossible for other graphing libraries to (1)"
" get a complete figure description, (2) output raw data from the figure "
"object as the user has provided it, (3) understand the semantics of the "
"figure objects without heuristics, and (4) give matplotlib a complete "
"figure description to visualize. In addition, because an ``Artist`` has "
"no conception of its own semantics within the figure, it's difficult to "
"interact with them in a natural way."
msgstr ""

#: ../../devel/MEP/MEP25.rst:46
msgid ""
"In this sense, matplotlib will adopt a standard Model-View-Controller "
"(MVC) framework. The *Model* will be the user defined data, style, and "
"semantics. The *Views* are the ensemble of each individual ``Artist``, "
"which are responsible for producing the final image based on the *model*."
" The *Controller* will be the ``Controller`` object managing its set of "
"``Artist`` objects."
msgstr ""

#: ../../devel/MEP/MEP25.rst:53
msgid ""
"The ``Controller`` must be able to export the information that it's "
"carrying about the figure on command, perhaps via a ``to_json`` method or"
" similar. Because it would be extremely extraneous to duplicate all of "
"the information in the model with the controller, only user-specified "
"information (data + style) are explicitly kept. If a user wants more "
"information (defaults) from the view/model, it should be able to query "
"for it."
msgstr ""

#: ../../devel/MEP/MEP25.rst:61
msgid ""
"This might be annoying to do, non-specified kwargs are pulled from the "
"rcParams object which is in turn created from reading a user specified "
"file and can be dynamically changed at run time.  I suppose we could keep"
" a dict of default defaults and compare against that. Not clear how this "
"will interact with the style sheet [[MEP26]] - @tacaswell"
msgstr ""

#: ../../devel/MEP/MEP25.rst:68
msgid "Additional Notes:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:70
msgid ""
"The \"raw data\" does not necessarily need to be a ``list``, ``ndarray``,"
" etc. Rather, it can more abstractly just have a method to yield data "
"when needed."
msgstr ""

#: ../../devel/MEP/MEP25.rst:74
msgid ""
"Because the ``Controller`` will contain extra information that users may "
"not want to keep around, it should *not* be created by default. You "
"should be able to both (a) instantiate a ``Controller`` with a figure and"
" (b) build a figure with a ``Controller``."
msgstr ""

#: ../../devel/MEP/MEP25.rst:79
msgid "Use Cases:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:81
msgid "Export all necessary informat"
msgstr ""

#: ../../devel/MEP/MEP25.rst:82
msgid "Serializing a matplotlib figure, saving it, and being able to rerun later."
msgstr ""

#: ../../devel/MEP/MEP25.rst:83
msgid ""
"Any other source sending an appropriately formatted representation to "
"matplotlib to open"
msgstr ""

#: ../../devel/MEP/MEP25.rst:86
msgid "Examples"
msgstr ""

#: ../../devel/MEP/MEP25.rst:87
msgid "Here are some examples of what the controllers should be able to do."
msgstr ""

#: ../../devel/MEP/MEP25.rst:89
msgid ""
"Instantiate a matplotlib figure from a serialized representation (e.g., "
"JSON): ::"
msgstr ""

#: ../../devel/MEP/MEP25.rst:98
msgid "Manage artists from the controller (e.g., Line2D): ::"
msgstr ""

#: ../../devel/MEP/MEP25.rst:104
msgid "Export serializable figure representation: ::"
msgstr ""

#: ../../devel/MEP/MEP25.rst:111
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP25.rst:113
msgid ""
"Create base ``Controller`` objects that are able to manage ``Artist`` "
"objects (e.g., ``Hist``)"
msgstr ""

#: ../../devel/MEP/MEP25.rst:116 ../../devel/MEP/MEP25.rst:135
msgid "Comments:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:118
msgid ""
"initialization should happen via unpacking ``**``, so we need a copy of "
"call signature parameter for the ``Artist`` we're ultimately trying to "
"control. Unfortunate hard-coded repetition..."
msgstr ""

#: ../../devel/MEP/MEP25.rst:122
msgid ""
"should the additional ``**kwargs`` accepted by each ``Artist`` be tracked"
" at the ``Controller``"
msgstr ""

#: ../../devel/MEP/MEP25.rst:124
msgid ""
"how does a ``Controller`` know which artist belongs where? E.g., do we "
"need to pass ``axes`` references?"
msgstr ""

#: ../../devel/MEP/MEP25.rst:127
msgid "Progress:"
msgstr ""

#: ../../devel/MEP/MEP25.rst:129
msgid ""
"A simple NB demonstrating some functionality for ``Line2DController`` "
"objects: "
"https://nbviewer.jupyter.org/gist/theengineear/f0aa8d79f64325e767c0"
msgstr ""

#: ../../devel/MEP/MEP25.rst:133
msgid "Write in protocols for the ``Controller`` to *update* the model."
msgstr ""

#: ../../devel/MEP/MEP25.rst:137
msgid ""
"how should containers be dealt with? E.g., what happens to old patches "
"when we re-bin a histogram?"
msgstr ""

#: ../../devel/MEP/MEP25.rst:139
msgid ""
"in the link from (1), the old line is completely destroyed and redrawn, "
"what if something is referencing it?"
msgstr ""

#: ../../devel/MEP/MEP25.rst:142
msgid ""
"Create method by which a json object can be assembled from the "
"``Controllers``"
msgstr ""

#: ../../devel/MEP/MEP25.rst:144
msgid ""
"Deal with serializing the unserializable aspects of a figure (e.g., non-"
"affine transforms?)"
msgstr ""

#: ../../devel/MEP/MEP25.rst:146
msgid "Be able to instantiate from a serialized representation"
msgstr ""

#: ../../devel/MEP/MEP25.rst:147
msgid ""
"Reimplement the existing pyplot and Axes method, e.g. ``pyplot.hist`` and"
" ``Axes.hist`` in terms of the new controller class."
msgstr ""

#: ../../devel/MEP/MEP25.rst:151
msgid ""
"> @theengineer: in #2 above, what do you mean by *get updates* from each "
"``Artist``?"
msgstr ""

#: ../../devel/MEP/MEP25.rst:154
msgid ""
"^ Yup. The ``Controller`` *shouldn't* need to get updated. This just "
"happens in #3. Delete comments when you see this."
msgstr ""

#: ../../devel/MEP/MEP25.rst:158
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP25.rst:160
msgid "pickling will change"
msgstr ""

#: ../../devel/MEP/MEP25.rst:161
msgid "non-affine transformations will require a defined pickling method"
msgstr ""

#: ../../devel/MEP/MEP25.rst:164
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP25.rst:166
msgid ""
"PR #3150 suggested adding semantics by parasitically attaching extra "
"containers to axes objects. This is a more complete solution with what "
"should be a more developed/flexible/powerful framework."
msgstr ""

