# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../devel/MEP/MEP09.rst:3
msgid "MEP9: Global interaction manager"
msgstr ""

#: ../../devel/MEP/MEP09.rst:8
msgid ""
"Add a global manager for all user interactivity with artists; make any "
"artist resizeable, moveable, highlightable, and selectable as desired by "
"the user."
msgstr ""

#: ../../devel/MEP/MEP09.rst:13
msgid "Status"
msgstr ""

#: ../../devel/MEP/MEP09.rst:15
msgid "**Discussion**"
msgstr ""

#: ../../devel/MEP/MEP09.rst:18
msgid "Branches and Pull requests"
msgstr ""

#: ../../devel/MEP/MEP09.rst:19
msgid "https://github.com/dhyams/matplotlib/tree/MEP9"
msgstr ""

#: ../../devel/MEP/MEP09.rst:22
msgid "Abstract"
msgstr ""

#: ../../devel/MEP/MEP09.rst:24
msgid ""
"The goal is to be able to interact with matplotlib artists in a very "
"similar way as drawing programs do.  When appropriate, the user should be"
" able to move, resize, or select an artist that is already on the canvas."
"  Of course, the script writer is ultimately in control of whether an "
"artist is able to be interacted with, or whether it is static."
msgstr ""

#: ../../devel/MEP/MEP09.rst:31
msgid ""
"This code to do this has already been privately implemented and tested, "
"and would need to be migrated from its current \"mixin\" implementation, "
"to a bona-fide part of matplotlib."
msgstr ""

#: ../../devel/MEP/MEP09.rst:35
msgid ""
"The end result would be to have four new keywords available to "
"matplotlib.artist.Artist: _moveable_, _resizeable_, _selectable_, and "
"_highlightable_.  Setting any one of these keywords to True would "
"activate interactivity for that artist."
msgstr ""

#: ../../devel/MEP/MEP09.rst:40
msgid ""
"In effect, this MEP is a logical extension of event handling in "
"matplotlib; matplotlib already supports \"low level\" interactions like "
"left mouse presses, a key press, or similar.  The MEP extends the support"
" to the logical level, where callbacks are performed on the artists when "
"certain interactive gestures from the user are detected."
msgstr ""

#: ../../devel/MEP/MEP09.rst:47
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP09.rst:49
msgid ""
"This new functionality would be used to allow the end-user to better "
"interact with the graph.  Many times, a graph is almost what the user "
"wants, but a small repositioning and/or resizing of components is "
"necessary.  Rather than force the user to go back to the script to trial-"
"and-error the location, and simple drag and drop would be appropriate."
msgstr ""

#: ../../devel/MEP/MEP09.rst:56
msgid ""
"Also, this would better support applications that use matplotlib; here, "
"the end-user has no reasonable access or desire to edit the underlying "
"source in order to fine-tune a plot.  Here, if matplotlib offered the "
"capability, one could move or resize artists on the canvas to suit their "
"needs.  Also, the user should be able to highlight (with a mouse over) an"
" artist, and select it with a double-click, if the application supports "
"that sort of thing.  In this MEP, we also want to support the "
"highlighting and selection natively; it is up to application to handle "
"what happens when the artist is selected.  A typical handling would be to"
" display a dialog to edit the properties of the artist."
msgstr ""

#: ../../devel/MEP/MEP09.rst:68
msgid ""
"In the future, as well (this is not part of this MEP), matplotlib could "
"offer backend-specific property dialogs for each artist, which are raised"
" on artist selection.  This MEP would be a necessary stepping stone for "
"that sort of capability."
msgstr ""

#: ../../devel/MEP/MEP09.rst:73
msgid ""
"There are currently a few interactive capabilities in matplotlib (e.g. "
"legend.draggable()), but they tend to be scattered and are not available "
"for all artists.  This MEP seeks to unify the interactive interface and "
"make it work for all artists."
msgstr ""

#: ../../devel/MEP/MEP09.rst:78
msgid ""
"The current MEP also includes grab handles for resizing artists, and "
"appropriate boxes drawn when artists are moved or resized."
msgstr ""

#: ../../devel/MEP/MEP09.rst:82
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP09.rst:83
msgid ""
"Add appropriate methods to the \"tree\" of artists so that the "
"interactivity manager has a consistent interface for the interactivity "
"manager to deal with.  The proposed methods to add to the artists, if "
"they are to support interactivity, are:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:88
msgid ""
"get_pixel_position_ll(self): get the pixel position of the lower left "
"corner of the artist's bounding box"
msgstr ""

#: ../../devel/MEP/MEP09.rst:90
msgid "get_pixel_size(self): get the size of the artist's bounding box, in pixels"
msgstr ""

#: ../../devel/MEP/MEP09.rst:92
msgid ""
"set_pixel_position_and_size(self,x,y,dx,dy): set the new size of the "
"artist, such that it fits within the specified bounding box."
msgstr ""

#: ../../devel/MEP/MEP09.rst:95
msgid ""
"add capability to the backends to 1) provide cursors, since these are "
"needed for visual indication of moving/resizing, and 2) provide a "
"function that gets the current mouse position"
msgstr ""

#: ../../devel/MEP/MEP09.rst:98
msgid ""
"Implement the manager.  This has already been done privately (by dhyams) "
"as a mixin, and has been tested quite a bit.  The goal would be to move "
"the functionality of the manager into the artists so that it is in "
"matplotlib properly, and not as a \"monkey patch\" as I currently have it"
" coded."
msgstr ""

#: ../../devel/MEP/MEP09.rst:107
msgid "Current summary of the mixin"
msgstr ""

#: ../../devel/MEP/MEP09.rst:109
msgid ""
"(Note that this mixin is for now just private code, but can be added to a"
" branch obviously)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:112
msgid "InteractiveArtistMixin:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:114
msgid ""
"Mixin class to make any generic object that is drawn on a matplotlib "
"canvas moveable and possibly resizeable.  The Powerpoint model is "
"followed as closely as possible; not because I'm enamoured with "
"Powerpoint, but because that's what most people understand.  An artist "
"can also be selectable, which means that the artist will receive the "
"on_activated() callback when double clicked.  Finally, an artist can be "
"highlightable, which means that a highlight is drawn on the artist "
"whenever the mouse passes over.  Typically, highlightable artists will "
"also be selectable, but that is left up to the user.  So, basically there"
" are four attributes that can be set by the user on a per-artist basis:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:126
msgid "highlightable"
msgstr ""

#: ../../devel/MEP/MEP09.rst:127
msgid "selectable"
msgstr ""

#: ../../devel/MEP/MEP09.rst:128
msgid "moveable"
msgstr ""

#: ../../devel/MEP/MEP09.rst:129
msgid "resizeable"
msgstr ""

#: ../../devel/MEP/MEP09.rst:131
msgid ""
"To be moveable (draggable) or resizeable, the object that is the target "
"of the mixin must support the following protocols:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:134
msgid "get_pixel_position_ll(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:135
msgid "get_pixel_size(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:136
msgid "set_pixel_position_and_size(self,x,y,sx,sy)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:138
msgid ""
"Note that nonresizeable objects are free to ignore the sx and sy "
"parameters. To be highlightable, the object that is the target of the "
"mixin must also support the following protocol:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:142
msgid "get_highlight(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:144
msgid "Which returns a list of artists that will be used to draw the highlight."
msgstr ""

#: ../../devel/MEP/MEP09.rst:146
msgid ""
"If the object that is the target of the mixin is not an matplotlib "
"artist, the following protocols must also be implemented.  Doing so is "
"usually fairly trivial, as there has to be an artist *somewhere* that is "
"being drawn.  Typically your object would just route these calls to that "
"artist."
msgstr ""

#: ../../devel/MEP/MEP09.rst:152
msgid "get_figure(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:153
msgid "get_axes(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:154
msgid "contains(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:155
msgid "set_animated(self,flag)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:156
msgid "draw(self,renderer)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:157
msgid "get_visible(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:159
msgid ""
"The following notifications are called on the artist, and the artist can "
"optionally implement these."
msgstr ""

#: ../../devel/MEP/MEP09.rst:162
msgid "on_select_begin(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:163
msgid "on_select_end(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:164
msgid "on_drag_begin(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:165
msgid "on_drag_end(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:166
msgid "on_activated(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:167
msgid "on_highlight(self)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:168 ../../devel/MEP/MEP09.rst:181
msgid "on_right_click(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:169 ../../devel/MEP/MEP09.rst:179
msgid "on_left_click(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:170 ../../devel/MEP/MEP09.rst:180
msgid "on_middle_click(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:171 ../../devel/MEP/MEP09.rst:182
msgid "on_context_click(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:172 ../../devel/MEP/MEP09.rst:183
msgid "on_key_up(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:173 ../../devel/MEP/MEP09.rst:184
msgid "on_key_down(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:175
msgid ""
"The following notifications are called on the canvas, if no interactive "
"artist handles the event:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:178
msgid "on_press(self,event)"
msgstr ""

#: ../../devel/MEP/MEP09.rst:186
msgid ""
"The following functions, if present, can be used to modify the behavior "
"of the interactive object:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:189
msgid ""
"press_filter(self,event) # determines if the object wants to have the "
"press event routed to it"
msgstr ""

#: ../../devel/MEP/MEP09.rst:191
msgid ""
"handle_unpicked_cursor() # can be used by the object to set a cursor as "
"the cursor passes over the object when it is unpicked."
msgstr ""

#: ../../devel/MEP/MEP09.rst:194
msgid ""
"Supports multiple canvases, maintaining a drag lock, motion notifier, and"
" a global \"enabled\" flag per canvas. Supports fixed aspect ratio "
"resizings by holding the shift key during the resize."
msgstr ""

#: ../../devel/MEP/MEP09.rst:198
msgid "Known problems:"
msgstr ""

#: ../../devel/MEP/MEP09.rst:200
msgid ""
"Zorder is not obeyed during the selection/drag operations.  Because of "
"the blit technique used, I do not believe this can be fixed.  The only "
"way I can think of is to search for all artists that have a zorder "
"greater then me, set them all to animated, and then redraw them all on "
"top during each drag refresh.  This might be very slow; need to try."
msgstr ""

#: ../../devel/MEP/MEP09.rst:206
msgid ""
"the mixin only works for wx backends because of two things: 1) the "
"cursors are hardcoded, and 2) there is a call to wx.GetMousePosition() "
"Both of these shortcomings are reasonably fixed by having each backend "
"supply these things."
msgstr ""

#: ../../devel/MEP/MEP09.rst:212
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP09.rst:214
msgid ""
"No problems with backward compatibility, although once this is in place, "
"it would be appropriate to obsolete some of the existing interactive "
"functions (like legend.draggable())"
msgstr ""

#: ../../devel/MEP/MEP09.rst:219
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP09.rst:221
msgid "None that I know of."
msgstr ""

