# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../devel/documenting_mpl.rst:5
msgid "Writing documentation"
msgstr ""

#: ../../devel/documenting_mpl.rst:8
msgid "Getting started"
msgstr ""

#: ../../devel/documenting_mpl.rst:11
msgid "General file structure"
msgstr ""

#: ../../devel/documenting_mpl.rst:13
msgid ""
"All documentation is built from the :file:`doc/`.  The :file:`doc/` "
"directory contains configuration files for Sphinx and reStructuredText "
"(ReST_; ``.rst``) files that are rendered to documentation pages."
msgstr ""

#: ../../devel/documenting_mpl.rst:17
msgid ""
"Documentation is created in three ways.  First, API documentation "
"(:file:`doc/api`) is created by Sphinx_ from the docstrings of the "
"classes in the Matplotlib library.  Except for "
":file:`doc/api/api_changes/`,  ``.rst`` files in :file:`doc/api` are "
"created when the documentation is built.  See :ref:`writing-docstrings` "
"below."
msgstr ""

#: ../../devel/documenting_mpl.rst:23
msgid ""
"Second, the contents of :file:`doc/plot_types`, :file:`doc/gallery` and "
":file:`doc/tutorials` are generated by the `Sphinx Gallery`_ from python "
"files in :file:`plot_types/`, :file:`examples/` and :file:`tutorials/`. "
"These sources consist of python scripts that have ReST_ documentation "
"built into their comments.  See :ref:`writing-examples-and-tutorials` "
"below."
msgstr ""

#: ../../devel/documenting_mpl.rst:29
msgid ""
"Third, Matplotlib has narrative docs written in ReST_ in subdirectories "
"of :file:`doc/users/`.  If you would like to add new documentation that "
"is suited to an ``.rst`` file rather than a gallery or tutorial example, "
"choose an appropriate subdirectory to put it in, and add the file to the "
"table of contents of :file:`index.rst` of the subdirectory.  See :ref"
":`writing-rest-pages` below."
msgstr ""

#: ../../devel/documenting_mpl.rst:38
msgid ""
"Don't directly edit the ``.rst`` files in :file:`doc/plot_types`, "
":file:`doc/gallery`,  :file:`doc/tutorials`, and :file:`doc/api` "
"(excepting :file:`doc/api/api_changes/`).  Sphinx_ regenerates files in "
"these directories when building documentation."
msgstr ""

#: ../../devel/documenting_mpl.rst:44
msgid "Setting up the doc build"
msgstr ""

#: ../../devel/documenting_mpl.rst:46
msgid ""
"The documentation for Matplotlib is generated from reStructuredText "
"(ReST_) using the Sphinx_ documentation generation tool."
msgstr ""

#: ../../devel/documenting_mpl.rst:49
msgid ""
"To build the documentation you will need to :ref:`set up Matplotlib for "
"development <installing_for_devs>`. Note in particular the "
":ref:`additional dependencies <doc-dependencies>` required to build the "
"documentation."
msgstr ""

#: ../../devel/documenting_mpl.rst:55
msgid "Building the docs"
msgstr ""

#: ../../devel/documenting_mpl.rst:57
msgid ""
"The documentation sources are found in the :file:`doc/` directory in the "
"trunk. The configuration file for Sphinx is :file:`doc/conf.py`. It "
"controls which directories Sphinx parses, how the docs are built, and how"
" the extensions are used. To build the documentation in html format, cd "
"into :file:`doc/` and run:"
msgstr ""

#: ../../devel/documenting_mpl.rst:66
msgid "Other useful invocations include"
msgstr ""

#: ../../devel/documenting_mpl.rst:77
msgid ""
"The ``SPHINXOPTS`` variable is set to ``-W --keep-going`` by default to "
"build the complete docs but exit with exit status 1 if there are "
"warnings.  To unset it, use"
msgstr ""

#: ../../devel/documenting_mpl.rst:85
msgid "On Windows the arguments must be at the end of the statement:"
msgstr ""

#: ../../devel/documenting_mpl.rst:91
msgid "You can use the ``O`` variable to set additional options:"
msgstr ""

#: ../../devel/documenting_mpl.rst:93
msgid "``make O=-j4 html`` runs a parallel build with 4 processes."
msgstr ""

#: ../../devel/documenting_mpl.rst:94
msgid "``make O=-Dplot_formats=png:100 html`` saves figures in low resolution."
msgstr ""

#: ../../devel/documenting_mpl.rst:95
msgid "``make O=-Dplot_gallery=0 html`` skips the gallery build."
msgstr ""

#: ../../devel/documenting_mpl.rst:97
msgid ""
"Multiple options can be combined using e.g. ``make O='-j4 "
"-Dplot_gallery=0' html``."
msgstr ""

#: ../../devel/documenting_mpl.rst:100
msgid ""
"On Windows, either use the format shown above or set options as "
"environment variables, e.g.:"
msgstr ""

#: ../../devel/documenting_mpl.rst:108
msgid "Showing locally built docs"
msgstr ""

#: ../../devel/documenting_mpl.rst:110
msgid ""
"The built docs are available in the folder :file:`build/html`. A shortcut"
" for opening them in your default browser is:"
msgstr ""

#: ../../devel/documenting_mpl.rst:120
msgid "Writing ReST pages"
msgstr ""

#: ../../devel/documenting_mpl.rst:122
msgid ""
"Most documentation is either in the docstrings of individual classes and "
"methods, in explicit ``.rst`` files, or in examples and tutorials. All of"
" these use the ReST_ syntax and are processed by Sphinx_."
msgstr ""

#: ../../devel/documenting_mpl.rst:126
msgid ""
"The `Sphinx reStructuredText Primer <https://www.sphinx-"
"doc.org/en/master/usage/restructuredtext/basics.html>`_ is a good "
"introduction into using ReST. More complete information is available in "
"the `reStructuredText reference documentation "
"<https://docutils.sourceforge.io/rst.html#reference-documentation>`_."
msgstr ""

#: ../../devel/documenting_mpl.rst:132
msgid ""
"This section contains additional information and conventions how ReST is "
"used in the Matplotlib documentation."
msgstr ""

#: ../../devel/documenting_mpl.rst:136
msgid "Formatting and style conventions"
msgstr ""

#: ../../devel/documenting_mpl.rst:138
msgid ""
"It is useful to strive for consistency in the Matplotlib documentation.  "
"Here are some formatting and style conventions that are used."
msgstr ""

#: ../../devel/documenting_mpl.rst:142
msgid "Section formatting"
msgstr ""

#: ../../devel/documenting_mpl.rst:144
msgid ""
"For everything but top-level chapters,  use ``Upper lower`` for section "
"titles, e.g., ``Possible hangups`` rather than ``Possible Hangups``"
msgstr ""

#: ../../devel/documenting_mpl.rst:148
msgid ""
"We aim to follow the recommendations from the `Python documentation "
"<https://devguide.python.org/documenting/#sections>`_ and the `Sphinx "
"reStructuredText documentation <https://www.sphinx-"
"doc.org/en/master/usage/restructuredtext/basics.html#sections>`_ for "
"section markup characters, i.e.:"
msgstr ""

#: ../../devel/documenting_mpl.rst:153
msgid ""
"``#`` with overline, for parts. This is reserved for the main title in "
"``index.rst``. All other pages should start with \"chapter\" or lower."
msgstr ""

#: ../../devel/documenting_mpl.rst:155
msgid "``*`` with overline, for chapters"
msgstr ""

#: ../../devel/documenting_mpl.rst:156
msgid "``=``, for sections"
msgstr ""

#: ../../devel/documenting_mpl.rst:157
msgid "``-``, for subsections"
msgstr ""

#: ../../devel/documenting_mpl.rst:158
msgid "``^``, for subsubsections"
msgstr ""

#: ../../devel/documenting_mpl.rst:159
msgid "``\"``, for paragraphs"
msgstr ""

#: ../../devel/documenting_mpl.rst:161
msgid "This may not yet be applied consistently in existing docs."
msgstr ""

#: ../../devel/documenting_mpl.rst:164 ../../devel/documenting_mpl.rst:434
msgid "Function arguments"
msgstr ""

#: ../../devel/documenting_mpl.rst:166 ../../devel/documenting_mpl.rst:435
msgid ""
"Function arguments and keywords within docstrings should be referred to "
"using the ``*emphasis*`` role. This will keep Matplotlib's documentation "
"consistent with Python's documentation:"
msgstr ""

#: ../../devel/documenting_mpl.rst:174
msgid "Do not use the ```default role```:"
msgstr ""

#: ../../devel/documenting_mpl.rst:182
msgid "nor the ````literal```` role:"
msgstr ""

#: ../../devel/documenting_mpl.rst:192
msgid "Referring to other documents and sections"
msgstr ""

#: ../../devel/documenting_mpl.rst:194
msgid "Sphinx_ allows internal references_ between documents."
msgstr ""

#: ../../devel/documenting_mpl.rst:196
msgid "Documents can be linked with the ``:doc:`` directive:"
msgstr ""

#: ../../devel/documenting_mpl.rst:206
msgid "will render as:"
msgstr ""

#: ../../devel/documenting_mpl.rst:208
msgid "See the :doc:`/users/installing/index`"
msgstr ""

#: ../../devel/documenting_mpl.rst:210
msgid "See the tutorial :doc:`/tutorials/introductory/usage`"
msgstr ""

#: ../../devel/documenting_mpl.rst:212
msgid "See the example :doc:`/gallery/lines_bars_and_markers/simple_plot`"
msgstr ""

#: ../../devel/documenting_mpl.rst:214
msgid ""
"Sections can also be given reference names.  For instance from the "
":doc:`/users/installing/index` link:"
msgstr ""

#: ../../devel/documenting_mpl.rst:226
msgid "and refer to it using the standard reference syntax:"
msgstr ""

#: ../../devel/documenting_mpl.rst:232
msgid "will give the following link: :ref:`clean-install`"
msgstr ""

#: ../../devel/documenting_mpl.rst:234
msgid ""
"To maximize internal consistency in section labeling and references, use "
"hyphen separated, descriptive labels for section references. Keep in mind"
" that contents may be reorganized later, so avoid top level names in "
"references like ``user`` or ``devel`` or ``faq`` unless necessary, "
"because for example the FAQ \"what is a backend?\" could later become "
"part of the users guide, so the label:"
msgstr ""

#: ../../devel/documenting_mpl.rst:245
msgid "is better than:"
msgstr ""

#: ../../devel/documenting_mpl.rst:251
msgid ""
"In addition, since underscores are widely used by Sphinx itself, use "
"hyphens to separate words."
msgstr ""

#: ../../devel/documenting_mpl.rst:257
msgid "Referring to other code"
msgstr ""

#: ../../devel/documenting_mpl.rst:259
msgid ""
"To link to other methods, classes, or modules in Matplotlib you can use "
"back ticks, for example:"
msgstr ""

#: ../../devel/documenting_mpl.rst:266
msgid "generates a link like this: `matplotlib.collections.LineCollection`."
msgstr ""

#: ../../devel/documenting_mpl.rst:268
msgid ""
"*Note:* We use the sphinx setting ``default_role = 'obj'`` so that you "
"don't have to use qualifiers like ``:class:``, ``:func:``, ``:meth:`` and"
" the likes."
msgstr ""

#: ../../devel/documenting_mpl.rst:271
msgid ""
"Often, you don't want to show the full package and module name. As long "
"as the target is unanbigous you can simply leave them out:"
msgstr ""

#: ../../devel/documenting_mpl.rst:278
msgid "and the link still works: `.LineCollection`."
msgstr ""

#: ../../devel/documenting_mpl.rst:280
msgid ""
"If there are multiple code elements with the same name (e.g. ``plot()`` "
"is a method in multiple classes), you'll have to extend the definition:"
msgstr ""

#: ../../devel/documenting_mpl.rst:287
msgid ""
"These will show up as `.pyplot.plot` or `.Axes.plot`. To still show only "
"the last segment you can add a tilde as prefix:"
msgstr ""

#: ../../devel/documenting_mpl.rst:294
msgid "will render as `~.pyplot.plot` or `~.Axes.plot`."
msgstr ""

#: ../../devel/documenting_mpl.rst:296
msgid ""
"Other packages can also be linked via `intersphinx <http://www.sphinx-"
"doc.org/en/master/ext/intersphinx.html>`_:"
msgstr ""

#: ../../devel/documenting_mpl.rst:303
msgid ""
"will return this link: `numpy.mean`.  This works for Python, Numpy, "
"Scipy, and Pandas (full list is in :file:`doc/conf.py`).  If external "
"linking fails, you can check the full list of referenceable objects with "
"the following commands::"
msgstr ""

#: ../../devel/documenting_mpl.rst:316
msgid "Including figures and files"
msgstr ""

#: ../../devel/documenting_mpl.rst:318
msgid ""
"Image files can directly included in pages with the ``image::`` "
"directive. e.g., "
":file:`tutorials/intermediate/constrainedlayout_guide.py` displays a "
"couple of static images::"
msgstr ""

#: ../../devel/documenting_mpl.rst:326
msgid ""
"Files can be included verbatim.  For instance the ``LICENSE`` file is "
"included at :ref:`license-agreement` using ::"
msgstr ""

#: ../../devel/documenting_mpl.rst:331
msgid ""
"The examples directory is copied to :file:`doc/gallery` by sphinx-"
"gallery, so plots from the examples directory can be included using"
msgstr ""

#: ../../devel/documenting_mpl.rst:338
msgid ""
"Note that the python script that generates the plot is referred to, "
"rather than any plot that is created.  Sphinx-gallery will provide the "
"correct reference when the documentation is built."
msgstr ""

#: ../../devel/documenting_mpl.rst:346
msgid "Writing docstrings"
msgstr ""

#: ../../devel/documenting_mpl.rst:348
msgid ""
"Most of the API documentation is written in docstrings. These are comment"
" blocks in source code that explain how the code works."
msgstr ""

#: ../../devel/documenting_mpl.rst:353
msgid ""
"Some parts of the documentation do not yet conform to the current "
"documentation style. If in doubt, follow the rules given here and not "
"what you may see in the source code. Pull requests updating docstrings to"
" the current style are very welcome."
msgstr ""

#: ../../devel/documenting_mpl.rst:358
msgid ""
"All new or edited docstrings should conform to the `numpydoc docstring "
"guide`_. Much of the ReST_ syntax discussed above (:ref:`writing-rest-"
"pages`) can be used for links and references.  These docstrings "
"eventually populate the :file:`doc/api` directory and form the reference "
"documentation for the library."
msgstr ""

#: ../../devel/documenting_mpl.rst:365
msgid "Example docstring"
msgstr ""

#: ../../devel/documenting_mpl.rst:367
msgid "An example docstring looks like:"
msgstr ""

#: ../../devel/documenting_mpl.rst:405
msgid "See the `~.Axes.hlines` documentation for how this renders."
msgstr ""

#: ../../devel/documenting_mpl.rst:407
msgid ""
"The Sphinx_ website also contains plenty of documentation_ concerning "
"ReST markup and working with Sphinx in general."
msgstr ""

#: ../../devel/documenting_mpl.rst:411
msgid "Formatting conventions"
msgstr ""

#: ../../devel/documenting_mpl.rst:413
msgid ""
"The basic docstring conventions are covered in the `numpydoc docstring "
"guide`_ and the Sphinx_ documentation.  Some Matplotlib-specific "
"formatting conventions to keep in mind:"
msgstr ""

#: ../../devel/documenting_mpl.rst:418
msgid "Quote positions"
msgstr ""

#: ../../devel/documenting_mpl.rst:419
msgid ""
"The quotes for single line docstrings are on the same line (pydocstyle "
"D200)::"
msgstr ""

#: ../../devel/documenting_mpl.rst:424
msgid ""
"The quotes for multi-line docstrings are on separate lines (pydocstyle "
"D213)::"
msgstr ""

#: ../../devel/documenting_mpl.rst:443
msgid "Do not use the ```default role``` or the ````literal```` role:"
msgstr ""

#: ../../devel/documenting_mpl.rst:451
msgid "Quotes for strings"
msgstr ""

#: ../../devel/documenting_mpl.rst:452
msgid ""
"Matplotlib does not have a convention whether to use single-quotes or "
"double-quotes.  There is a mixture of both in the current code."
msgstr ""

#: ../../devel/documenting_mpl.rst:455
msgid "Use simple single or double quotes when giving string values, e.g."
msgstr ""

#: ../../devel/documenting_mpl.rst:463
msgid ""
"The use of extra literal quotes around the text is discouraged. While "
"they slightly improve the rendered docs, they are cumbersome to type and "
"difficult to read in plain-text docs."
msgstr ""

#: ../../devel/documenting_mpl.rst:468
msgid "Parameter type descriptions"
msgstr ""

#: ../../devel/documenting_mpl.rst:469
msgid ""
"The main goal for parameter type descriptions is to be readable and "
"understandable by humans. If the possible types are too complex use a "
"simplification for the type description and explain the type more "
"precisely in the text."
msgstr ""

#: ../../devel/documenting_mpl.rst:474
msgid ""
"Generally, the `numpydoc docstring guide`_ conventions apply. The "
"following rules expand on them where the numpydoc conventions are not "
"specific."
msgstr ""

#: ../../devel/documenting_mpl.rst:477
msgid "Use ``float`` for a type that can be any number."
msgstr ""

#: ../../devel/documenting_mpl.rst:479
msgid ""
"Use ``(float, float)`` to describe a 2D position. The parentheses should "
"be included to make the tuple-ness more obvious."
msgstr ""

#: ../../devel/documenting_mpl.rst:482
msgid ""
"Use ``array-like`` for homogeneous numeric sequences, which could "
"typically be a numpy.array. Dimensionality may be specified using ``2D``,"
" ``3D``, ``n-dimensional``. If you need to have variables denoting the "
"sizes of the dimensions, use capital letters in brackets (``(M, N) array-"
"like``). When referring to them in the text they are easier read and no "
"special formatting is needed. Use ``array`` instead of ``array-like`` for"
" return types if the returned object is indeed a numpy array."
msgstr ""

#: ../../devel/documenting_mpl.rst:490
msgid ""
"``float`` is the implicit default dtype for array-likes. For other dtypes"
" use ``array-like of int``."
msgstr ""

#: ../../devel/documenting_mpl.rst:493
msgid "Some possible uses::"
msgstr ""

#: ../../devel/documenting_mpl.rst:501
msgid "Non-numeric homogeneous sequences are described as lists, e.g.::"
msgstr ""

#: ../../devel/documenting_mpl.rst:507
msgid "Referencing types"
msgstr ""

#: ../../devel/documenting_mpl.rst:508
msgid ""
"Generally, the rules from referring-to-other-code_ apply. More "
"specifically:"
msgstr ""

#: ../../devel/documenting_mpl.rst:510
msgid ""
"Use full references ```~matplotlib.colors.Normalize``` with an "
"abbreviation tilde in parameter types. While the full name helps the "
"reader of plain text docstrings, the HTML does not need to show the full "
"name as it links to it. Hence, the ``~``-shortening keeps it more "
"readable."
msgstr ""

#: ../../devel/documenting_mpl.rst:515
msgid "Use abbreviated links ```.Normalize``` in the text."
msgstr ""

#: ../../devel/documenting_mpl.rst:523
msgid "Default values"
msgstr ""

#: ../../devel/documenting_mpl.rst:524
msgid ""
"As opposed to the numpydoc guide, parameters need not be marked as "
"*optional* if they have a simple default:"
msgstr ""

#: ../../devel/documenting_mpl.rst:527
msgid "use ``{name} : {type}, default: {val}`` when possible."
msgstr ""

#: ../../devel/documenting_mpl.rst:528
msgid ""
"use ``{name} : {type}, optional`` and describe the default in the text if"
" it cannot be explained sufficiently in the recommended manner."
msgstr ""

#: ../../devel/documenting_mpl.rst:531
msgid ""
"The default value should provide semantic information targeted at a human"
" reader. In simple cases, it restates the value in the function "
"signature. If applicable, units should be added."
msgstr ""

#: ../../devel/documenting_mpl.rst:542
msgid ""
"If *None* is only used as a sentinel value for \"parameter not "
"specified\", do not document it as the default. Depending on the context,"
" give the actual default, or mark the parameter as optional if not "
"specifying has no particular effect."
msgstr ""

#: ../../devel/documenting_mpl.rst:565
msgid "``See also`` sections"
msgstr ""

#: ../../devel/documenting_mpl.rst:566
msgid ""
"Sphinx automatically links code elements in the definition blocks of "
"``See also`` sections. No need to use backticks there::"
msgstr ""

#: ../../devel/documenting_mpl.rst:575
msgid "Wrapping parameter lists"
msgstr ""

#: ../../devel/documenting_mpl.rst:576
msgid ""
"Long parameter lists should be wrapped using a ``\\`` for continuation "
"and starting on the new line without any indent (no indent because pydoc "
"will parse the docstring and strip the line continuation so that indent "
"would result in a lot of whitespace within the line):"
msgstr ""

#: ../../devel/documenting_mpl.rst:596
msgid ""
"Alternatively, you can describe the valid parameter values in a dedicated"
" section of the docstring."
msgstr ""

#: ../../devel/documenting_mpl.rst:600
msgid "rcParams"
msgstr ""

#: ../../devel/documenting_mpl.rst:601
msgid ""
"rcParams can be referenced with the custom ``:rc:`` role: "
":literal:`:rc:\\`foo\\`` yields ``rcParams[\"foo\"] = 'default'``, which "
"is a link to the :file:`matplotlibrc` file description."
msgstr ""

#: ../../devel/documenting_mpl.rst:606
msgid "Setters and getters"
msgstr ""

#: ../../devel/documenting_mpl.rst:608
msgid ""
"Artist properties are implemented using setter and getter methods "
"(because Matplotlib predates the Python `property` decorator). By "
"convention, these setters and getters are named ``set_PROPERTYNAME`` and "
"``get_PROPERTYNAME``; the list of properties thusly defined on an artist "
"and their values can be listed by the `~.pyplot.setp` and `~.pyplot.getp`"
" functions."
msgstr ""

#: ../../devel/documenting_mpl.rst:614
msgid ""
"The Parameters block of property setter methods is parsed to document the"
" accepted values, e.g. the docstring of `.Line2D.set_linestyle` starts "
"with"
msgstr ""

#: ../../devel/documenting_mpl.rst:629
msgid ""
"which results in the following line in the output of ``plt.setp(line)`` "
"or ``plt.setp(line, \"linestyle\")``::"
msgstr ""

#: ../../devel/documenting_mpl.rst:634
msgid ""
"In some rare cases (mostly, setters which accept both a single tuple and "
"an unpacked tuple), the accepted values cannot be documented in such a "
"fashion; in that case, they can be documented as an ``.. ACCEPTS:`` "
"block, e.g. for `.axes.Axes.set_xlim`:"
msgstr ""

#: ../../devel/documenting_mpl.rst:661
msgid ""
"Note that the leading ``..`` makes the ``.. ACCEPTS:`` block a reST "
"comment, hiding it from the rendered docs."
msgstr ""

#: ../../devel/documenting_mpl.rst:665
msgid "Keyword arguments"
msgstr ""

#: ../../devel/documenting_mpl.rst:669
msgid ""
"The information in this section is being actively discussed by the "
"development team, so use the docstring interpolation only if necessary. "
"This section has been left in place for now because this interpolation is"
" part of the existing documentation."
msgstr ""

#: ../../devel/documenting_mpl.rst:674
msgid ""
"Since Matplotlib uses a lot of pass-through ``kwargs``, e.g., in every "
"function that creates a line (`~.pyplot.plot`, `~.pyplot.semilogx`, "
"`~.pyplot.semilogy`, etc...), it can be difficult for the new user to "
"know which ``kwargs`` are supported.  Matplotlib uses a docstring "
"interpolation scheme to support documentation of every function that "
"takes a ``**kwargs``.  The requirements are:"
msgstr ""

#: ../../devel/documenting_mpl.rst:681
msgid ""
"single point of configuration so changes to the properties don't require "
"multiple docstring edits."
msgstr ""

#: ../../devel/documenting_mpl.rst:684
msgid ""
"as automated as possible so that as properties change, the docs are "
"updated automatically."
msgstr ""

#: ../../devel/documenting_mpl.rst:687
msgid ""
"The ``@docstring.interpd`` decorator implements this.  Any function "
"accepting `.Line2D` pass-through ``kwargs``, e.g., "
"`matplotlib.axes.Axes.plot`, can list a summary of the `.Line2D` "
"properties, as follows:"
msgstr ""

#: ../../devel/documenting_mpl.rst:722
msgid ""
"The ``%(Line2D:kwdoc)`` syntax makes ``interpd`` lookup an `.Artist` "
"subclass named ``Line2D``, and call `.artist.kwdoc` on that class.  "
"`.artist.kwdoc` introspects the subclass and summarizes its properties as"
" a substring, which gets interpolated into the docstring."
msgstr ""

#: ../../devel/documenting_mpl.rst:727
msgid ""
"Note that this scheme does not work for decorating an Artist's "
"``__init__``, as the subclass and its properties are not defined yet at "
"that point.  Instead, ``@docstring.interpd`` can be used to decorate the "
"class itself -- at that point, `.kwdoc` can list the properties and "
"interpolate them into ``__init__.__doc__``."
msgstr ""

#: ../../devel/documenting_mpl.rst:735
msgid "Inheriting docstrings"
msgstr ""

#: ../../devel/documenting_mpl.rst:737
msgid ""
"If a subclass overrides a method but does not change the semantics, we "
"can reuse the parent docstring for the method of the child class. Python "
"does this automatically, if the subclass method does not have a "
"docstring."
msgstr ""

#: ../../devel/documenting_mpl.rst:741
msgid ""
"Use a plain comment ``# docstring inherited`` to denote the intention to "
"reuse the parent docstring. That way we do not accidentally create a "
"docstring in the future::"
msgstr ""

#: ../../devel/documenting_mpl.rst:759
msgid "Adding figures"
msgstr ""

#: ../../devel/documenting_mpl.rst:761
msgid ""
"As above (see :ref:`rst-figures-and-includes`), figures in the examples "
"gallery can be referenced with a ``.. plot::`` directive pointing to the "
"python script that created the figure.  For instance the `~.Axes.legend` "
"docstring references the file "
":file:`examples/text_labels_and_annotations/legend.py`:"
msgstr ""

#: ../../devel/documenting_mpl.rst:777
msgid ""
"Note that ``examples/text_labels_and_annotations/legend.py`` has been "
"mapped to ``gallery/text_labels_and_annotations/legend.py``, a "
"redirection that may be fixed in future re-organization of the docs."
msgstr ""

#: ../../devel/documenting_mpl.rst:781
msgid ""
"Plots can also be directly placed inside docstrings.  Details are in "
":doc:`/api/sphinxext_plot_directive_api`.  A short example is:"
msgstr ""

#: ../../devel/documenting_mpl.rst:798
msgid ""
"An advantage of this style over referencing an example script is that the"
" code will also appear in interactive docstrings."
msgstr ""

#: ../../devel/documenting_mpl.rst:804
msgid "Writing examples and tutorials"
msgstr ""

#: ../../devel/documenting_mpl.rst:806
msgid ""
"Examples and tutorials are python scripts that are run by `Sphinx "
"Gallery`_ to create a gallery of images in the :file:`/doc/gallery` and "
":file:`/doc/tutorials` directories respectively.  To exclude an example "
"from having an plot generated insert \"sgskip\" somewhere in the "
"filename."
msgstr ""

#: ../../devel/documenting_mpl.rst:811
msgid ""
"The format of these files is relatively straightforward.  Properly "
"formatted comment blocks are treated as ReST_ text, the code is "
"displayed, and figures are put into the built page."
msgstr ""

#: ../../devel/documenting_mpl.rst:815
msgid ""
"For instance the example "
":doc:`/gallery/lines_bars_and_markers/simple_plot` example is generated "
"from :file:`/examples/lines_bars_and_markers/simple_plot.py`, which looks"
" like:"
msgstr ""

#: ../../devel/documenting_mpl.rst:845
msgid ""
"The first comment block is treated as ReST_ text.  The other comment "
"blocks render as comments in "
":doc:`/gallery/lines_bars_and_markers/simple_plot`."
msgstr ""

#: ../../devel/documenting_mpl.rst:848
msgid ""
"Tutorials are made with the exact same mechanism, except they are longer,"
" and typically have more than one comment block (i.e. "
":doc:`/tutorials/introductory/usage`).  The first comment block can be "
"the same as the example above.  Subsequent blocks of ReST text are "
"delimited by a line of ``###`` characters:"
msgstr ""

#: ../../devel/documenting_mpl.rst:876
msgid "In this way text, code, and figures are output in a \"notebook\" style."
msgstr ""

#: ../../devel/documenting_mpl.rst:879
msgid "References for sphinx-gallery"
msgstr ""

#: ../../devel/documenting_mpl.rst:881
msgid ""
"The showcased Matplotlib functions should be listed in an admonition at "
"the bottom as follows"
msgstr ""

#: ../../devel/documenting_mpl.rst:896
msgid ""
"This allows sphinx-gallery to place an entry to the example in the mini-"
"gallery of the mentioned functions. Whether or not a function is "
"mentioned here should be decided depending on if a mini-gallery link "
"prominently helps to illustrate that function; e.g. mention "
"``matplotlib.pyplot.subplots`` only in examples that are about laying out"
" subplots, not in every example that uses it."
msgstr ""

#: ../../devel/documenting_mpl.rst:903
msgid ""
"Functions that exist in ``pyplot`` as well as in Axes or Figure should "
"mention both references no matter which one is used in the example code. "
"The ``pyplot`` reference should always be the second to mention; see the "
"example above."
msgstr ""

#: ../../devel/documenting_mpl.rst:908
msgid "Order of examples in the gallery"
msgstr ""

#: ../../devel/documenting_mpl.rst:910
msgid ""
"The order of the sections of the :ref:`tutorials` and the :ref:`gallery`,"
" as well as the order of the examples within each section are determined "
"in a two step process from within the "
":file:`/doc/sphinxext/gallery_order.py`:"
msgstr ""

#: ../../devel/documenting_mpl.rst:914
msgid ""
"*Explicit order*: This file contains a list of folders for the section "
"order and a list of examples for the subsection order. The order of the "
"items shown in the doc pages is the order those items appear in those "
"lists."
msgstr ""

#: ../../devel/documenting_mpl.rst:917
msgid ""
"*Implicit order*: If a folder or example is not in those lists, it will "
"be appended after the explicitly ordered items and all of those "
"additional items will be ordered by pathname (for the sections) or by "
"filename (for the subsections)."
msgstr ""

#: ../../devel/documenting_mpl.rst:922
msgid ""
"As a consequence, if you want to let your example appear in a certain "
"position in the gallery, extend those lists with your example. In case no"
" explicit order is desired or necessary, still make sure to name your "
"example consistently, i.e. use the main function or subject of the "
"example as first word in the filename; e.g. an image example should "
"ideally be named similar to :file:`imshow_mynewexample.py`."
msgstr ""

#: ../../devel/documenting_mpl.rst:930
msgid "Miscellaneous"
msgstr ""

#: ../../devel/documenting_mpl.rst:933
msgid "Moving documentation"
msgstr ""

#: ../../devel/documenting_mpl.rst:935
msgid ""
"Sometimes it is desirable to move or consolidate documentation.  With no "
"action this will lead to links either going dead (404) or pointing to old"
" versions of the documentation.  Preferable is to replace the old page "
"with an html refresh that immediately redirects the viewer to the new "
"page. So, for example we move ``/doc/topic/old_info.rst`` to "
"``/doc/topic/new_info.rst``.  We remove ``/doc/topic/old_info.rst`` and "
"in ``/doc/topic/new_info.rst`` we insert a ``redirect-from`` directive "
"that tells sphinx to still make the old file with the html "
"refresh/redirect in it (probably near the top of the file to make it "
"noticeable)"
msgstr ""

#: ../../devel/documenting_mpl.rst:949
msgid ""
"In the built docs this will yield an html file "
"``/build/html/topic/old_info.html`` that has a refresh to "
"``new_info.html``. If the two files are in different subdirectories:"
msgstr ""

#: ../../devel/documenting_mpl.rst:957
msgid ""
"will yield an html file ``/build/html/old_topic/old_info2.html`` that has"
" a (relative) refresh to ``../topic/new_info.html``."
msgstr ""

#: ../../devel/documenting_mpl.rst:960
msgid ""
"Use the full path for this directive, relative to the doc root at "
"``https://matplotlib.org/stable/``.  So ``/old_topic/old_info2`` would be"
" found by users at ``http://matplotlib.org/stable/old_topic/old_info2``. "
"For clarity, do not use relative links."
msgstr ""

#: ../../devel/documenting_mpl.rst:967
msgid "Adding animations"
msgstr ""

#: ../../devel/documenting_mpl.rst:969
msgid ""
"Animations are scraped automatically by Sphinx-gallery. If this is not "
"desired, there is also a Matplotlib Google/Gmail account with username "
"``mplgithub`` which was used to setup the github account but can be used "
"for other purposes, like hosting Google docs or Youtube videos.  You can "
"embed a Matplotlib animation in the docs by first saving the animation as"
" a movie using :meth:`matplotlib.animation.Animation.save`, and then "
"uploading to `Matplotlib's Youtube channel "
"<https://www.youtube.com/user/matplotlib>`_ and inserting the embedding "
"string youtube provides like:"
msgstr ""

#: ../../devel/documenting_mpl.rst:989
msgid "An example save command to generate a movie looks like this"
msgstr ""

#: ../../devel/documenting_mpl.rst:998
msgid ""
"Contact Michael Droettboom for the login password to upload youtube "
"videos of google docs to the mplgithub account."
msgstr ""

#: ../../devel/documenting_mpl.rst:1004
msgid "Generating inheritance diagrams"
msgstr ""

#: ../../devel/documenting_mpl.rst:1006
msgid ""
"Class inheritance diagrams can be generated with the Sphinx `inheritance-"
"diagram`_ directive."
msgstr ""

#: ../../devel/documenting_mpl.rst:1011
msgid "Example:"
msgstr ""

#: ../../devel/documenting_mpl.rst:1023
msgid "Navbar and style"
msgstr ""

#: ../../devel/documenting_mpl.rst:1025
msgid ""
"Matplotlib has a few subprojects that share the same navbar and style, so"
" these are centralized as a sphinx theme at `mpl_sphinx_theme "
"<https://github.com/matplotlib/mpl-sphinx-theme>`_.  Changes to the style"
" or topbar should be made there to propagate across all subprojects."
msgstr ""

