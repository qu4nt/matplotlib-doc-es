# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/toolkits/axes_grid.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_tutorials_toolkits_axes_grid.py>` to "
"download the full example code"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:25
msgid "Overview of :mod:`mpl_toolkits.axes_grid1`"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:27
msgid ":mod:`.axes_grid1` provides the following features:"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:29
msgid ""
"Helper classes (ImageGrid_, RGBAxes_, AxesDivider_) to ease the layout of"
" axes displaying images with a fixed aspect ratio while satisfying "
"additional constraints (matching the heights of a colorbar and an image, "
"or fixing the padding between images);"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:33
msgid ""
"ParasiteAxes_ (twinx/twiny-like features so that you can plot different "
"data (e.g., different y-scale) in a same Axes);"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:35
msgid ""
"AnchoredArtists_ (custom artists which are placed at an anchored "
"position, similarly to legends)."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:43
msgid "axes_grid1"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:46
msgid "ImageGrid"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:48
msgid ""
"In Matplotlib, axes location and size are usually specified in normalized"
" figure coordinates (0 = bottom left, 1 = top right), which makes it "
"difficult to achieve a fixed (absolute) padding between images. "
"`~.axes_grid1.axes_grid.ImageGrid` can be used to achieve such a padding;"
" see its docs for detailed API information."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:58
msgid ""
"The position of each axes is determined at the drawing time (see "
"AxesDivider_), so that the size of the entire grid fits in the given "
"rectangle (like the aspect of axes). Note that in this example, the "
"paddings between axes are fixed even if you changes the figure size."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:64
msgid ""
"Axes in the same column share their x-axis, and axes in the same row "
"share their y-axis (in the sense of `~.Axes.sharex`, `~.Axes.sharey`). "
"Additionally, Axes in the same column all have the same width, and axes "
"in the same row all have the same height.  These widths and heights are "
"scaled in proportion to the axes' view limits (xlim or ylim)."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:74
msgid "The examples below show what you can do with ImageGrid."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:81
msgid "AxesDivider Class"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:83
msgid ""
"Behind the scenes, ImageGrid (and RGBAxes, described below) rely on "
"`~.axes_grid1.axes_divider.AxesDivider`, whose role is to calculate the "
"location of the axes at drawing time."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:87
msgid ""
"Users typically do not need to directly instantiate dividers by calling "
"`~.axes_grid1.axes_divider.AxesDivider`; instead, "
"`~.axes_grid1.axes_divider.make_axes_locatable` can be used to create a "
"divider for an axes::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:95
msgid ""
"`.AxesDivider.append_axes` can then be used to create a new axes on a "
"given side (\"left\", \"right\", \"top\", \"bottom\") of the original "
"axes."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:99
msgid "colorbar whose height (or width) in sync with the master axes"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:106
msgid "scatter_hist.py with AxesDivider"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:108
msgid ""
"The :doc:`/gallery/lines_bars_and_markers/scatter_hist` example can be "
"rewritten using `~.axes_grid1.axes_divider.make_axes_locatable`::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:126
msgid "See the full source code below."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:132
msgid ""
"The :doc:`/gallery/axes_grid1/scatter_hist_locatable_axes` using the "
"AxesDivider has some advantages over the original "
":doc:`/gallery/lines_bars_and_markers/scatter_hist` in Matplotlib. For "
"example, you can set the aspect ratio of the scatter plot, even with the "
"x-axis or y-axis is shared accordingly."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:139
msgid "ParasiteAxes"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:141
msgid ""
"The ParasiteAxes is an axes whose location is identical to its host axes."
" The location is adjusted in the drawing time, thus it works even if the "
"host change its location (e.g., images)."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:145
msgid ""
"In most cases, you first create a host axes, which provides a few method "
"that can be used to create parasite axes. They are *twinx*, *twiny* "
"(which are similar to twinx and twiny in the matplotlib) and *twin*. "
"*twin* takes an arbitrary transformation that maps between the data "
"coordinates of the host axes and the parasite axes.  *draw* method of the"
" parasite axes are never called. Instead, host axes collects artists in "
"parasite axes and draw them as if they belong to the host axes, i.e., "
"artists in parasite axes are merged to those of the host axes and then "
"drawn according to their zorder.  The host and parasite axes modifies "
"some of the axes behavior. For example, color cycle for plot lines are "
"shared between host and parasites. Also, the legend command in host, "
"creates a legend that includes lines in the parasite axes.  To create a "
"host axes, you may use *host_subplot* or *host_axes* command."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:161
msgid "Example 1. twinx"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:168
msgid "Example 2. twin"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:170
msgid ""
"*twin* without a transform argument assumes that the parasite axes has "
"the same data transform as the host. This can be useful when you want the"
" top(or right)-axis to have different tick-locations, tick-labels, or "
"tick-formatter for bottom(or left)-axis. ::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:184
msgid ""
"A more sophisticated example using twin. Note that if you change the "
"x-limit in the host axes, the x-limit of the parasite axes will change "
"accordingly."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:193
msgid "AnchoredArtists"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:195
msgid ""
":mod:`.axes_grid1.anchored_artists` is a collection of artists whose "
"location is anchored to the (axes) bbox, similarly to legends.  These "
"artists derive from `.offsetbox.OffsetBox`, and the artist need to be "
"drawn in canvas coordinates.  There is limited support for arbitrary "
"transforms.  For example, the ellipse in the example below will have "
"width and height in data coordinate."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:206
msgid "InsetLocator"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:209
msgid "`.Axes.inset_axes` and `.Axes.indicate_inset_zoom` in the main library."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:211
msgid ""
":mod:`.axes_grid1.inset_locator` provides helper classes and functions to"
" place inset axes at an anchored position of the parent axes, similarly "
"to AnchoredArtist."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:215
msgid ""
"`.inset_locator.inset_axes` creates an inset axes whose size is either "
"fixed, or a fixed proportion of the parent axes::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:223
#, python-format
msgid ""
"creates an inset axes whose width is 30% of the parent axes and whose "
"height is fixed at 1 inch."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:226
msgid ""
"`.inset_locator.zoomed_inset_axes` creates an inset axes whose data scale"
" is that of the parent axes multiplied by some factor, e.g. ::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:233
msgid ""
"creates an inset axes whose data scale is half of the parent axes.  This "
"can be useful to mark the zoomed area on the parent axes:"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:240
msgid ""
"`.inset_locator.mark_inset` allows marking the location of the area "
"represented by the inset axes:"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:248
msgid "RGBAxes"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:250
msgid ""
"RGBAxes is a helper class to conveniently show RGB composite images. Like"
" ImageGrid, the location of axes are adjusted so that the area occupied "
"by them fits in a given rectangle.  Also, the xaxis and yaxis of each "
"axes are shared. ::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:267
msgid "AxesDivider"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:269
msgid ""
"The :mod:`mpl_toolkits.axes_grid1.axes_divider` module provides helper "
"classes to adjust the axes positions of a set of images at drawing time."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:272
msgid ""
":mod:`~mpl_toolkits.axes_grid1.axes_size` provides a class of units that "
"are used to determine the size of each axes. For example, you can specify"
" a fixed size."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:276
msgid ""
"`~mpl_toolkits.axes_grid1.axes_divider.Divider` is the class that "
"calculates the axes position. It divides the given rectangular area into "
"several areas. The divider is initialized by setting the lists of "
"horizontal and vertical sizes on which the division will be based. Then "
"use :meth:`~mpl_toolkits.axes_grid1.axes_divider.Divider.new_locator`, "
"which returns a callable object that can be used to set the axes_locator "
"of the axes."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:284
msgid ""
"Here, we demonstrate how to achieve the following layout: we want to "
"position axes in a 3x4 grid (note that `.Divider` makes row indices start"
" from the *bottom*\\(!) of the grid):"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:298
msgid ""
"such that the bottom row has a fixed height of 2 (inches) and the top two"
" rows have a height ratio of 2 (middle) to 3 (top).  (For example, if the"
" grid has a size of 7 inches, the bottom row will be 2 inches, the middle"
" row also 2 inches, and the top row 3 inches.)"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:303
msgid ""
"These constraints are specified using classes from the "
":mod:`~mpl_toolkits.axes_grid1.axes_size` module, namely::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:309
msgid ""
"(More generally, :mod:`~mpl_toolkits.axes_grid1.axes_size` classes define"
" a ``get_size(renderer)`` method that returns a pair of floats -- a "
"relative size, and an absolute size.  ``Fixed(2).get_size(renderer)`` "
"returns ``(0, 2)``; ``Scaled(2).get_size(renderer)`` returns ``(2, 0)``.)"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:314
msgid "We use these constraints to initialize a `.Divider` object::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:321
msgid ""
"then use `.Divider.new_locator` to create an `.AxesLocator` instance for "
"a given grid entry::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:326
msgid "and make it responsible for locating the axes::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:330
msgid ""
"The `.AxesLocator` is a callable object that returns the location and "
"size of the cell at the first column and the second row."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:333
msgid "Locators that spans over multiple cells can be created with, e.g.::"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:338
msgid "See the example,"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:344
msgid ""
"You can also adjust the size of each axes according to its x or y data "
"limits (AxesX and AxesY)."
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:364
msgid ":download:`Download Python source code: axes_grid.py <axes_grid.py>`"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:370
msgid ":download:`Download Jupyter notebook: axes_grid.ipynb <axes_grid.ipynb>`"
msgstr ""

#: ../../tutorials/toolkits/axes_grid.rst:377
msgid ""
"Keywords: matplotlib code example, codex, python plot, pyplot `Gallery "
"generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

