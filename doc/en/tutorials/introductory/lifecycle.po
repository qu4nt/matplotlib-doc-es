# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/introductory/lifecycle.rst:13
msgid ""
"Click :ref:`here <sphx_glr_download_tutorials_introductory_lifecycle.py>`"
" to download the full example code"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:23
msgid "The Lifecycle of a Plot"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:25
msgid ""
"This tutorial aims to show the beginning, middle, and end of a single "
"visualization using Matplotlib. We'll begin with some raw data and end by"
" saving a figure of a customized visualization. Along the way we try to "
"highlight some neat features and best-practices using Matplotlib."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:34
msgid ""
"This tutorial is based on `this excellent blog post <https://pbpython.com"
"/effective-matplotlib.html>`_ by Chris Moffitt. It was transformed into "
"this tutorial by Chris Holdgraf."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:40
msgid "A note on the Object-Oriented API vs. Pyplot"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:42
msgid ""
"Matplotlib has two interfaces. The first is an object-oriented (OO) "
"interface. In this case, we utilize an instance of :class:`axes.Axes` in "
"order to render visualizations on an instance of :class:`figure.Figure`."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:46
msgid ""
"The second is based on MATLAB and uses a state-based interface. This is "
"encapsulated in the :mod:`.pyplot` module. See the :doc:`pyplot tutorials"
" </tutorials/introductory/pyplot>` for a more in-depth look at the pyplot"
" interface."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:51
msgid ""
"Most of the terms are straightforward but the main thing to remember is "
"that:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:54
msgid "The Figure is the final image that may contain 1 or more Axes."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:55
msgid ""
"The Axes represent an individual plot (don't confuse this with the word "
"\"axis\", which refers to the x/y axis of a plot)."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:58
msgid ""
"We call methods that do the plotting directly from the Axes, which gives "
"us much more flexibility and power in customizing our plot."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:63
msgid ""
"In general, try to use the object-oriented interface over the pyplot "
"interface."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:67
msgid "Our data"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:69
msgid ""
"We'll use the data from the post from which this tutorial was derived. It"
" contains sales information for a number of companies."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:105
msgid "Getting started"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:107
msgid ""
"This data is naturally visualized as a barplot, with one bar per group. "
"To do this with the object-oriented approach, we first generate an "
"instance of :class:`figure.Figure` and :class:`axes.Axes`. The Figure is "
"like a canvas, and the Axes is a part of that canvas on which we will "
"make a particular visualization."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:115
msgid ""
"Figures can have multiple axes on them. For information on how to do "
"this, see the :doc:`Tight Layout tutorial "
"</tutorials/intermediate/tight_layout_guide>`."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:140
msgid "Now that we have an Axes instance, we can plot on top of it."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:161
#: ../../tutorials/introductory/lifecycle.rst:192
#: ../../tutorials/introductory/lifecycle.rst:242
#: ../../tutorials/introductory/lifecycle.rst:312
#: ../../tutorials/introductory/lifecycle.rst:353
#: ../../tutorials/introductory/lifecycle.rst:391
#: ../../tutorials/introductory/lifecycle.rst:435
#: ../../tutorials/introductory/lifecycle.rst:581
msgid "Out:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:173
msgid "Controlling the style"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:175
msgid ""
"There are many styles available in Matplotlib in order to let you tailor "
"your visualization to your needs. To see a list of styles, we can use "
":mod:`.style`."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:203
msgid "You can activate a style with the following:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:221
msgid "Now let's remake the above plot to see how it looks:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:253
msgid ""
"The style controls many things, such as color, linewidths, backgrounds, "
"etc."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:257
msgid "Customizing the plot"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:259
msgid ""
"Now we've got a plot with the general look that we want, so let's fine-"
"tune it so that it's ready for print. First let's rotate the labels on "
"the x-axis so that they show up more clearly. We can gain access to these"
" labels with the :meth:`axes.Axes.get_xticklabels` method:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:287
msgid ""
"If we'd like to set the property of many items at once, it's useful to "
"use the :func:`pyplot.setp` function. This will take a list (or many "
"lists) of Matplotlib objects, and attempt to set some style element of "
"each one."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:323
msgid ""
"It looks like this cut off some of the labels on the bottom. We can tell "
"Matplotlib to automatically make room for elements in the figures that we"
" create. To do this we set the ``autolayout`` value of our rcParams. For "
"more information on controlling the style, layout, and other features of "
"plots with rcParams, see :doc:`/tutorials/introductory/customizing`."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:364
msgid ""
"Next, we add labels to the plot. To do this with the OO interface, we can"
" use the :meth:`.Artist.set` method to set properties of this Axes "
"object."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:402
msgid ""
"We can also adjust the size of this plot using the "
":func:`pyplot.subplots` function. We can do this with the *figsize* "
"keyword argument."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:407
msgid ""
"While indexing in NumPy follows the form (row, column), the *figsize* "
"keyword argument follows the form (width, height). This follows "
"conventions in visualization, which unfortunately are different from "
"those of linear algebra."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:446
msgid ""
"For labels, we can specify custom formatting guidelines in the form of "
"functions. Below we define a function that takes an integer as input, and"
" returns a string as an output. When used with "
"`.Axis.set_major_formatter` or `.Axis.set_minor_formatter`, they will "
"automatically create and use a :class:`ticker.FuncFormatter` class."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:452
msgid ""
"For this function, the ``x`` argument is the original tick label and "
"``pos`` is the tick position.  We will only use ``x`` here but both "
"arguments are needed."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:479
msgid ""
"We can then apply this function to the labels on our plot. To do this, we"
" use the ``xaxis`` attribute of our axes. This lets you perform actions "
"on a specific axis on our plot."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:512
msgid "Combining multiple visualizations"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:514
msgid ""
"It is possible to draw multiple plot elements on the same instance of "
":class:`axes.Axes`. To do this we simply need to call another one of the "
"plot methods on that axes object."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:562
msgid "Saving our plot"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:564
msgid ""
"Now that we're happy with the outcome of our plot, we want to save it to "
"disk. There are many file formats we can save to in Matplotlib. To see a "
"list of available options, use:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:592
msgid ""
"We can then use the :meth:`figure.Figure.savefig` in order to save the "
"figure to disk. Note that there are several useful flags we show below:"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:595
msgid ""
"``transparent=True`` makes the background of the saved figure transparent"
" if the format supports it."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:597
msgid "``dpi=80`` controls the resolution (dots per square inch) of the output."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:598
msgid "``bbox_inches=\"tight\"`` fits the bounds of the figure to our plot."
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:617
msgid "**Total running time of the script:** ( 0 minutes  3.851 seconds)"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:632
msgid ":download:`Download Python source code: lifecycle.py <lifecycle.py>`"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:638
msgid ":download:`Download Jupyter notebook: lifecycle.ipynb <lifecycle.ipynb>`"
msgstr ""

#: ../../tutorials/introductory/lifecycle.rst:645
msgid ""
"Keywords: matplotlib code example, codex, python plot, pyplot `Gallery "
"generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

