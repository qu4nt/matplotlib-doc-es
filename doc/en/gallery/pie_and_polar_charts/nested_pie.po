# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2002 - 2012 John Hunter, Darren Dale, Eric Firing, Michael
# Droettboom and the Matplotlib development team; 2012 - 2022 The Matplotlib
# development team
# This file is distributed under the same license as the Matplotlib package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Matplotlib 3.5.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:13
msgid ""
"Click :ref:`here "
"<sphx_glr_download_gallery_pie_and_polar_charts_nested_pie.py>` to "
"download the full example code"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:23
msgid "Nested pie charts"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:25
msgid ""
"The following examples show two ways to build a nested pie chart in "
"Matplotlib. Such charts are often referred to as donut charts."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:45
msgid ""
"The most straightforward way to build a pie chart is to use the "
"`~matplotlib.axes.Axes.pie` method."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:48
msgid ""
"In this case, pie takes values corresponding to counts in a group. We'll "
"first generate some fake data, corresponding to three groups. In the "
"inner circle, we'll treat each number as belonging to its own group. In "
"the outer circle, we'll plot them as members of their original 3 groups."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:54
msgid ""
"The effect of the donut shape is achieved by setting a ``width`` to the "
"pie's wedges through the *wedgeprops* argument."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:95
msgid ""
"However, you can accomplish the same output by using a bar plot on axes "
"with a polar coordinate system. This may give more flexibility on the "
"exact design of the plot."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:99
msgid ""
"In this case, we need to map x-values of the bar chart onto radians of a "
"circle. The cumulative sum of the values are used as the edges of the "
"bars."
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:147
msgid "References"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:149
msgid ""
"The use of the following functions, methods, classes and modules is shown"
" in this example:"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:152
msgid "`matplotlib.axes.Axes.pie` / `matplotlib.pyplot.pie`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:153
msgid "`matplotlib.axes.Axes.bar` / `matplotlib.pyplot.bar`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:154
msgid "`matplotlib.projections.polar`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:155
msgid "``Axes.set`` (`matplotlib.artist.Artist.set`)"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:156
msgid "`matplotlib.axes.Axes.set_axis_off`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:171
msgid ":download:`Download Python source code: nested_pie.py <nested_pie.py>`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:177
msgid ":download:`Download Jupyter notebook: nested_pie.ipynb <nested_pie.ipynb>`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/nested_pie.rst:184
msgid ""
"Keywords: matplotlib code example, codex, python plot, pyplot `Gallery "
"generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

