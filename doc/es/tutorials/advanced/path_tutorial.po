msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-16 19:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/advanced/path_tutorial.po\n"
"X-Crowdin-File-ID: 3278\n"
"Language: es_ES\n"

#: ../../tutorials/advanced/path_tutorial.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_advanced_path_tutorial.py>` to download the full example code"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:23
msgid "Path Tutorial"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:25
msgid "Defining paths in your Matplotlib visualization."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:27
msgid "The object underlying all of the :mod:`matplotlib.patches` objects is the :class:`~matplotlib.path.Path`, which supports the standard set of moveto, lineto, curveto commands to draw simple and compound outlines consisting of line segments and splines.  The ``Path`` is instantiated with a (N, 2) array of (x, y) vertices, and a N-length array of path codes.  For example to draw the unit rectangle from (0, 0) to (1, 1), we could use this code:"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:84
msgid "The following path codes are recognized"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:87
msgid "Code"
msgstr "Código"

#: ../../tutorials/advanced/path_tutorial.rst:87
msgid "Vertices"
msgstr "Vértices"

#: ../../tutorials/advanced/path_tutorial.rst:87
msgid "Description"
msgstr "Descripción"

#: ../../tutorials/advanced/path_tutorial.rst:89
msgid "``STOP``"
msgstr "``STOP``"

#: ../../tutorials/advanced/path_tutorial.rst:89
msgid "1 (ignored)"
msgstr "1 (ignorado)"

#: ../../tutorials/advanced/path_tutorial.rst:89
msgid "A marker for the end of the entire path (currently not required and ignored)."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:92
msgid "``MOVETO``"
msgstr "``MOVETO``"

#: ../../tutorials/advanced/path_tutorial.rst:92
#: ../../tutorials/advanced/path_tutorial.rst:94
msgid "1"
msgstr "1"

#: ../../tutorials/advanced/path_tutorial.rst:92
msgid "Pick up the pen and move to the given vertex."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:94
msgid "``LINETO``"
msgstr "``LINETO``"

#: ../../tutorials/advanced/path_tutorial.rst:94
msgid "Draw a line from the current position to the given vertex."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:96
msgid "``CURVE3``"
msgstr "``CURVE3``"

#: ../../tutorials/advanced/path_tutorial.rst:96
msgid "2: 1 control point, 1 end point"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:96
msgid "Draw a quadratic Bézier curve from the current position, with the given control point, to the given end point."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:99
msgid "``CURVE4``"
msgstr "``CURVE4``"

#: ../../tutorials/advanced/path_tutorial.rst:99
msgid "3: 2 control points, 1 end point"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:99
msgid "Draw a cubic Bézier curve from the current position, with the given control points, to the given end point."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:103
msgid "``CLOSEPOLY``"
msgstr "``CLOSEPOLY``"

#: ../../tutorials/advanced/path_tutorial.rst:103
msgid "1 (the point is ignored)"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:103
msgid "Draw a line segment to the start point of the current polyline."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:112
msgid "Bézier example"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:114
msgid "Some of the path components require multiple vertices to specify them: for example CURVE 3 is a `bézier <https://en.wikipedia.org/wiki/B%C3%A9zier_curve>`_ curve with one control point and one end point, and CURVE4 has three vertices for the two control points and the end point.  The example below shows a CURVE4 Bézier spline -- the bézier curve will be contained in the convex hull of the start point, the two control points, and the end point"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:177
msgid "Compound paths"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:179
msgid "All of the simple patch primitives in matplotlib, Rectangle, Circle, Polygon, etc, are implemented with simple path.  Plotting functions like :meth:`~matplotlib.axes.Axes.hist` and :meth:`~matplotlib.axes.Axes.bar`, which create a number of primitives, e.g., a bunch of Rectangles, can usually be implemented more efficiently using a compound path.  The reason ``bar`` creates a list of rectangles and not a compound path is largely historical: the :class:`~matplotlib.path.Path` code is comparatively new and ``bar`` predates it.  While we could change it now, it would break old code, so here we will cover how to create compound paths, replacing the functionality in bar, in case you need to do so in your own code for efficiency reasons, e.g., you are creating an animated bar plot."
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:192
msgid "We will make the histogram chart by creating a series of rectangles for each histogram bar: the rectangle width is the bin width and the rectangle height is the number of datapoints in that bin.  First we'll create some random normally distributed data and compute the histogram.  Because numpy returns the bin edges and not centers, the length of ``bins`` is 1 greater than the length of ``n`` in the example below::"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:204
msgid "We'll now extract the corners of the rectangles.  Each of the ``left``, ``bottom``, etc, arrays below is ``len(n)``, where ``n`` is the array of counts for each histogram bar::"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:214
msgid "Now we have to construct our compound path, which will consist of a series of ``MOVETO``, ``LINETO`` and ``CLOSEPOLY`` for each rectangle. For each rectangle, we need 5 vertices: 1 for the ``MOVETO``, 3 for the ``LINETO``, and 1 for the ``CLOSEPOLY``.  As indicated in the table above, the vertex for the closepoly is ignored but we still need it to keep the codes aligned with the vertices::"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:235
msgid "All that remains is to create the path, attach it to a :class:`~matplotlib.patches.PathPatch`, and add it to our axes::"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:305
msgid "**Total running time of the script:** ( 0 minutes  1.038 seconds)"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:320
msgid ":download:`Download Python source code: path_tutorial.py <path_tutorial.py>`"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:326
msgid ":download:`Download Jupyter notebook: path_tutorial.ipynb <path_tutorial.ipynb>`"
msgstr ""

#: ../../tutorials/advanced/path_tutorial.rst:333
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

