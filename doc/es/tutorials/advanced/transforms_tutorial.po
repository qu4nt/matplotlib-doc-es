msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 00:04\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/advanced/transforms_tutorial.po\n"
"X-Crowdin-File-ID: 3284\n"
"Language: es_ES\n"

#: ../../tutorials/advanced/transforms_tutorial.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_advanced_transforms_tutorial.py>` to download the full example code"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:23
msgid "Transformations Tutorial"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:25
#, python-format
msgid "Like any graphics packages, Matplotlib is built on top of a transformation framework to easily move between coordinate systems, the userland *data* coordinate system, the *axes* coordinate system, the *figure* coordinate system, and the *display* coordinate system. In 95% of your plotting, you won't need to think about this, as it happens under the hood, but as you push the limits of custom figure generation, it helps to have an understanding of these objects so you can reuse the existing transformations Matplotlib makes available to you, or create your own (see :mod:`matplotlib.transforms`).  The table below summarizes the some useful coordinate systems, the transformation object you should use to work in that coordinate system, and the description of that system. In the ``Transformation Object`` column, ``ax`` is a :class:`~matplotlib.axes.Axes` instance, and ``fig`` is a :class:`~matplotlib.figure.Figure` instance."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:41
msgid "Coordinates"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:41
msgid "Transformation object"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:41
msgid "Description"
msgstr "Descripci√≥n"

#: ../../tutorials/advanced/transforms_tutorial.rst:43
msgid "\"data\""
msgstr "\"datos\""

#: ../../tutorials/advanced/transforms_tutorial.rst:43
msgid "``ax.transData``"
msgstr "``ax.transData``"

#: ../../tutorials/advanced/transforms_tutorial.rst:43
msgid "The coordinate system for the data, controlled by xlim and ylim."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:46
msgid "\"axes\""
msgstr "\"ejes\""

#: ../../tutorials/advanced/transforms_tutorial.rst:46
msgid "``ax.transAxes``"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:46
msgid "The coordinate system of the `~matplotlib.axes.Axes`; (0, 0) is bottom left of the axes, and (1, 1) is top right of the axes."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:51
msgid "\"subfigure\""
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:51
msgid "``subfigure.transSubfigure``"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:51
msgid "The coordinate system of the `.SubFigure`; (0, 0) is bottom left of the subfigure, and (1, 1) is top right of the subfigure.  If a figure has no subfigures, this is the same as ``transFigure``."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:58
msgid "\"figure\""
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:58
msgid "``fig.transFigure``"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:58
msgid "The coordinate system of the `.Figure`; (0, 0) is bottom left of the figure, and (1, 1) is top right of the figure."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:63
msgid "\"figure-inches\""
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:63
msgid "``fig.dpi_scale_trans``"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:63
msgid "The coordinate system of the `.Figure` in inches; (0, 0) is bottom left of the figure, and (width, height) is the top right of the figure in inches."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:69
msgid "\"display\""
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:69
msgid "``None``, or ``IdentityTransform()``"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:69
msgid "The pixel coordinate system of the display window; (0, 0) is bottom left of the window, and (width, height) is top right of the display window in pixels."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:75
msgid "\"xaxis\", \"yaxis\""
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:75
msgid "``ax.get_xaxis_transform()``, ``ax.get_yaxis_transform()``"
msgstr "``ax.get_xaxis_transform()``, ``ax.get_yaxis_transform()``"

#: ../../tutorials/advanced/transforms_tutorial.rst:75
msgid "Blended coordinate systems; use data coordinates on one of the axis and axes coordinates on the other."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:80
msgid "All of the transformation objects in the table above take inputs in their coordinate system, and transform the input to the *display* coordinate system.  That is why the *display* coordinate system has ``None`` for the ``Transformation Object`` column -- it already is in *display* coordinates.  The transformations also know how to invert themselves, to go from *display* back to the native coordinate system. This is particularly useful when processing events from the user interface, which typically occur in display space, and you want to know where the mouse click or key-press occurred in your *data* coordinate system."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:91
msgid "Note that specifying objects in *display* coordinates will change their location if the ``dpi`` of the figure changes.  This can cause confusion when printing or changing screen resolution, because the object can change location and size.  Therefore it is most common for artists placed in an axes or figure to have their transform set to something *other* than the `~.transforms.IdentityTransform()`; the default when an artist is placed on an axes using `~.axes.Axes.add_artist` is for the transform to be ``ax.transData``."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:103
msgid "Data coordinates"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:105
msgid "Let's start with the most commonly used coordinate, the *data* coordinate system.  Whenever you add data to the axes, Matplotlib updates the datalimits, most commonly updated with the :meth:`~matplotlib.axes.Axes.set_xlim` and :meth:`~matplotlib.axes.Axes.set_ylim` methods.  For example, in the figure below, the data limits stretch from 0 to 10 on the x-axis, and -1 to 1 on the y-axis."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:145
msgid "You can use the ``ax.transData`` instance to transform from your *data* to your *display* coordinate system, either a single point or a sequence of points as shown below:"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:162
msgid "You can use the :meth:`~matplotlib.transforms.Transform.inverted` method to create a transform which will take you from *display* to *data* coordinates:"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:176
msgid "If your are typing along with this tutorial, the exact values of the *display* coordinates may differ if you have a different window size or dpi setting.  Likewise, in the figure below, the display labeled points are probably not the same as in the ipython session because the documentation figure size defaults are different."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:235
msgid "If you run the source code in the example above in a GUI backend, you may also find that the two arrows for the *data* and *display* annotations do not point to exactly the same point.  This is because the display point was computed before the figure was displayed, and the GUI backend may slightly resize the figure when it is created. The effect is more pronounced if you resize the figure yourself. This is one good reason why you rarely want to work in *display* space, but you can connect to the ``'on_draw'`` :class:`~matplotlib.backend_bases.Event` to update *figure* coordinates on figure draws; see :ref:`event-handling-tutorial`."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:246
msgid "When you change the x or y limits of your axes, the data limits are updated so the transformation yields a new display point.  Note that when we just change the ylim, only the y-display coordinate is altered, and when we change the xlim too, both are altered.  More on this later when we talk about the :class:`~matplotlib.transforms.Bbox`."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:274
msgid "Axes coordinates"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:276
msgid "After the *data* coordinate system, *axes* is probably the second most useful coordinate system.  Here the point (0, 0) is the bottom left of your axes or subplot, (0.5, 0.5) is the center, and (1.0, 1.0) is the top right.  You can also refer to points outside the range, so (-0.1, 1.1) is to the left and above your axes.  This coordinate system is extremely useful when placing text in your axes, because you often want a text bubble in a fixed, location, e.g., the upper left of the axes pane, and have that location remain fixed when you pan or zoom.  Here is a simple example that creates four panels and labels them 'A', 'B', 'C', 'D' as you often see in journals."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:314
msgid "You can also make lines or patches in the *axes* coordinate system, but this is less useful in my experience than using ``ax.transAxes`` for placing text.  Nonetheless, here is a silly example which plots some random dots in data space, and overlays a semi-transparent :class:`~matplotlib.patches.Circle` centered in the middle of the axes with a radius one quarter of the axes -- if your axes does not preserve aspect ratio (see :meth:`~matplotlib.axes.Axes.set_aspect`), this will look like an ellipse.  Use the pan/zoom tool to move around, or manually change the data xlim and ylim, and you will see the data move, but the circle will remain fixed because it is not in *data* coordinates and will always remain at the center of the axes."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:357
msgid "Blended transformations"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:359
msgid "Drawing in *blended* coordinate spaces which mix *axes* with *data* coordinates is extremely useful, for example to create a horizontal span which highlights some region of the y-data but spans across the x-axis regardless of the data limits, pan or zoom level, etc.  In fact these blended lines and spans are so useful, we have built in functions to make them easy to plot (see :meth:`~matplotlib.axes.Axes.axhline`, :meth:`~matplotlib.axes.Axes.axvline`, :meth:`~matplotlib.axes.Axes.axhspan`, :meth:`~matplotlib.axes.Axes.axvspan`) but for didactic purposes we will implement the horizontal span here using a blended transformation.  This trick only works for separable transformations, like you see in normal Cartesian coordinate systems, but not on inseparable transformations like the :class:`~matplotlib.projections.polar.PolarAxes.PolarTransform`."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:415
msgid "The blended transformations where x is in *data* coords and y in *axes* coordinates is so useful that we have helper methods to return the versions Matplotlib uses internally for drawing ticks, ticklabels, etc. The methods are :meth:`matplotlib.axes.Axes.get_xaxis_transform` and :meth:`matplotlib.axes.Axes.get_yaxis_transform`.  So in the example above, the call to :meth:`~matplotlib.transforms.blended_transform_factory` can be replaced by ``get_xaxis_transform``::"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:429
msgid "Plotting in physical coordinates"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:431
msgid "Sometimes we want an object to be a certain physical size on the plot. Here we draw the same circle as above, but in physical coordinates.  If done interactively, you can see that changing the size of the figure does not change the offset of the circle from the lower-left corner, does not change its size, and the circle remains a circle regardless of the aspect ratio of the axes."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:466
msgid "If we change the figure size, the circle does not change its absolute position and is cropped."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:497
msgid "Another use is putting a patch with a set physical dimension around a data point on the axes.  Here we add together two transforms.  The first sets the scaling of how large the ellipse should be and the second sets its position.  The ellipse is then placed at the origin, and then we use the helper transform :class:`~matplotlib.transforms.ScaledTranslation` to move it to the right place in the ``ax.transData`` coordinate system. This helper is instantiated with::"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:508
msgid "where *xt* and *yt* are the translation offsets, and *scale_trans* is a transformation which scales *xt* and *yt* at transformation time before applying the offsets."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:512
msgid "Note the use of the plus operator on the transforms below. This code says: first apply the scale transformation ``fig.dpi_scale_trans`` to make the ellipse the proper size, but still centered at (0, 0), and then translate the data to ``xdata[0]`` and ``ydata[0]`` in data space."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:517
msgid "In interactive use, the ellipse stays the same size even if the axes limits are changed via zoom."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:556
msgid "The order of transformation matters.  Here the ellipse is given the right dimensions in display space *first* and then moved in data space to the correct spot. If we had done the ``ScaledTranslation`` first, then ``xdata[0]`` and ``ydata[0]`` would first be transformed to *display* coordinates (``[ 358.4  475.2]`` on a 200-dpi monitor) and then those coordinates would be scaled by ``fig.dpi_scale_trans`` pushing the center of the ellipse well off the screen (i.e. ``[ 71680.  95040.]``)."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:569
msgid "Using offset transforms to create a shadow effect"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:571
msgid "Another use of :class:`~matplotlib.transforms.ScaledTranslation` is to create a new transformation that is offset from another transformation, e.g., to place one object shifted a bit relative to another object.  Typically you want the shift to be in some physical dimension, like points or inches rather than in *data* coordinates, so that the shift effect is constant at different zoom levels and dpi settings."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:579
msgid "One use for an offset is to create a shadow effect, where you draw one object identical to the first just to the right of it, and just below it, adjusting the zorder to make sure the shadow is drawn first and then the object it is shadowing above it."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:584
msgid "Here we apply the transforms in the *opposite* order to the use of :class:`~matplotlib.transforms.ScaledTranslation` above. The plot is first made in data coordinates (``ax.transData``) and then shifted by ``dx`` and ``dy`` points using ``fig.dpi_scale_trans``.  (In typography, a `point <https://en.wikipedia.org/wiki/Point_%28typography%29>`_ is 1/72 inches, and by specifying your offsets in points, your figure will look the same regardless of the dpi resolution it is saved in.)"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:635
msgid "The dpi and inches offset is a common-enough use case that we have a special helper function to create it in :func:`matplotlib.transforms.offset_copy`, which returns a new transform with an added offset. So above we could have done::"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:647
msgid "The transformation pipeline"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:649
msgid "The ``ax.transData`` transform we have been working with in this tutorial is a composite of three different transformations that comprise the transformation pipeline from *data* -> *display* coordinates.  Michael Droettboom implemented the transformations framework, taking care to provide a clean API that segregated the nonlinear projections and scales that happen in polar and logarithmic plots, from the linear affine transformations that happen when you pan and zoom.  There is an efficiency here, because you can pan and zoom in your axes which affects the affine transformation, but you may not need to compute the potentially expensive nonlinear scales or projections on simple navigation events.  It is also possible to multiply affine transformation matrices together, and then apply them to coordinates in one step.  This is not true of all possible transformations."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:665
msgid "Here is how the ``ax.transData`` instance is defined in the basic separable axis :class:`~matplotlib.axes.Axes` class::"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:670
msgid "We've been introduced to the ``transAxes`` instance above in :ref:`axes-coords`, which maps the (0, 0), (1, 1) corners of the axes or subplot bounding box to *display* space, so let's look at these other two pieces."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:675
msgid "``self.transLimits`` is the transformation that takes you from *data* to *axes* coordinates; i.e., it maps your view xlim and ylim to the unit space of the axes (and ``transAxes`` then takes that unit space to display space).  We can see this in action here"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:702
msgid "and we can use this same inverted transformation to go from the unit *axes* coordinates back to *data* coordinates."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:710
msgid "The final piece is the ``self.transScale`` attribute, which is responsible for the optional non-linear scaling of the data, e.g., for logarithmic axes.  When an Axes is initially setup, this is just set to the identity transform, since the basic Matplotlib axes has linear scale, but when you call a logarithmic scaling function like :meth:`~matplotlib.axes.Axes.semilogx` or explicitly set the scale to logarithmic with :meth:`~matplotlib.axes.Axes.set_xscale`, then the ``ax.transScale`` attribute is set to handle the nonlinear projection. The scales transforms are properties of the respective ``xaxis`` and ``yaxis`` :class:`~matplotlib.axis.Axis` instances.  For example, when you call ``ax.set_xscale('log')``, the xaxis updates its scale to a :class:`matplotlib.scale.LogScale` instance."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:723
msgid "For non-separable axes the PolarAxes, there is one more piece to consider, the projection transformation.  The ``transData`` :class:`matplotlib.projections.polar.PolarAxes` is similar to that for the typical separable matplotlib Axes, with one additional piece ``transProjection``::"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:732
msgid "``transProjection`` handles the projection from the space, e.g., latitude and longitude for map data, or radius and theta for polar data, to a separable Cartesian coordinate system.  There are several projection examples in the :mod:`matplotlib.projections` package, and the best way to learn more is to open the source for those packages and see how to make your own, since Matplotlib supports extensible axes and projections.  Michael Droettboom has provided a nice tutorial example of creating a Hammer projection axes; see :doc:`/gallery/misc/custom_projection`."
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:745
msgid "**Total running time of the script:** ( 0 minutes  2.926 seconds)"
msgstr ""

#: ../../tutorials/advanced/transforms_tutorial.rst:760
msgid ":download:`Download Python source code: transforms_tutorial.py <transforms_tutorial.py>`"
msgstr ":download:`Descargar c√≥digo fuente de Python: transforms_tutorial.py <transforms_tutorial.py>`"

#: ../../tutorials/advanced/transforms_tutorial.rst:766
msgid ":download:`Download Jupyter notebook: transforms_tutorial.ipynb <transforms_tutorial.ipynb>`"
msgstr ":download:`Descargar Jupyter notebook: transforms_tutorial.ipynb <transforms_tutorial.ipynb>`"

#: ../../tutorials/advanced/transforms_tutorial.rst:773
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

