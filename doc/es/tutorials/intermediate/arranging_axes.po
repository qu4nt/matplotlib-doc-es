msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/intermediate/arranging_axes.po\n"
"X-Crowdin-File-ID: 3300\n"
"Language: es_ES\n"

#: ../../tutorials/intermediate/arranging_axes.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_intermediate_arranging_axes.py>` to download the full example code"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:23
msgid "Arranging multiple Axes in a Figure"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:25
msgid "Often more than one Axes is wanted on a figure at a time, usually organized into a regular grid.  Matplotlib has a variety of tools for working with grids of Axes that have evolved over the history of the library. Here we will discuss the tools we think users should use most often, the tools that underpin how Axes are organized, and mention some of the older tools."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:33
msgid "Matplotlib uses *Axes* to refer to the drawing area that contains data, x- and y-axis, ticks, labels, title, etc. See :ref:`figure_parts` for more details.  Another term that is often used is \"subplot\", which refers to an Axes that is in a grid with other Axes objects."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:39
msgid "Overview"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:42
msgid "Create grid-shaped combinations of Axes"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:48
msgid "`~matplotlib.pyplot.subplots`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:45
msgid "The primary function used to create figures and a grid of Axes.  It creates and places all Axes on the figure at once, and returns an object array with handles for the Axes in the grid.  See `.Figure.subplots`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:50
msgid "or"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:56
msgid "`~matplotlib.pyplot.subplot_mosaic`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:53
msgid "A simple way to create figures and a grid of Axes, with the added flexibility that Axes can also span rows or columns. The Axes are returned in a labelled dictionary instead of an array.  See also `.Figure.subplot_mosaic` and :doc:`/tutorials/provisional/mosaic`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:58
msgid "Sometimes it is natural to have more than one distinct group of Axes grids, in which case Matplotlib has the concept of `~.figure.SubFigure`:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:62
msgid "`~matplotlib.figure.SubFigure`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:62
msgid "A virtual figure within a figure."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:65
msgid "Underlying tools"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:67
msgid "Underlying these are the concept of a `~.gridspec.GridSpec` and a `~.SubplotSpec`:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:74
msgid "`~matplotlib.gridspec.GridSpec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:71
msgid "Specifies the geometry of the grid that a subplot will be placed. The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:77
msgid "`~matplotlib.gridspec.SubplotSpec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:77
msgid "Specifies the location of the subplot in the given `.GridSpec`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:80
msgid "Adding single Axes at a time"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:82
msgid "The above functions create all Axes in a single function call.  It is also possible to add Axes one at a time, and this was originally how Matplotlib used to work.  Doing so is generally less elegant and flexible, though sometimes useful for interactive work or to place an Axes in a custom location:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:90
msgid "`~matplotlib.figure.Figure.add_axes`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:89
msgid "Adds a single axes at a location specified by ``[left, bottom, width, height]`` in fractions of figure width or height."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:95
msgid "`~matplotlib.pyplot.subplot` or `.Figure.add_subplot`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:93
msgid "Adds a single subplot on a figure, with 1-based indexing (inherited from Matlab).  Columns and rows can be spanned by specifying a range of grid cells."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:99
msgid "`~matplotlib.pyplot.subplot2grid`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:98
msgid "Similar to `.pyplot.subplot`, but uses 0-based indexing and two-d python slicing to choose cells."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:106
msgid "High-level methods for making grids"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:109
#: ../../tutorials/intermediate/arranging_axes.rst:408
msgid "Basic 2x2 grid"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:111
msgid "We can create a basic 2-by-2 grid of Axes using `~matplotlib.pyplot.subplots`.  It returns a `~matplotlib.figure.Figure` instance and an array of `~matplotlib.axes.Axes` objects.  The Axes objects can be used to access methods to place artists on the Axes; here we use `~.Axes.annotate`, but other examples could be `~.Axes.plot`, `~.Axes.pcolormesh`, etc."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:148
#: ../../tutorials/intermediate/arranging_axes.rst:211
#: ../../tutorials/intermediate/arranging_axes.rst:253
#: ../../tutorials/intermediate/arranging_axes.rst:302
#: ../../tutorials/intermediate/arranging_axes.rst:350
#: ../../tutorials/intermediate/arranging_axes.rst:446
#: ../../tutorials/intermediate/arranging_axes.rst:495
#: ../../tutorials/intermediate/arranging_axes.rst:546
#: ../../tutorials/intermediate/arranging_axes.rst:603
msgid "Out:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:159
msgid "We will annotate a lot of Axes, so lets encapsulate the annotation, rather than having that large piece of annotation code every time we need it:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:182
msgid "The same effect can be achieved with `~.pyplot.subplot_mosaic`, but the return type is a dictionary instead of an array, where the user can give the keys useful meanings.  Here we provide two lists, each list representing a row, and each element in the list a key representing the column."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:223
msgid "Axes spanning rows or columns in a grid"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:225
msgid "Sometimes we want Axes to span rows or columns of the grid. There are actually multiple ways to accomplish this, but the most convenient is probably to use `~.pyplot.subplot_mosaic` by repeating one of the keys:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:264
msgid "See below for the description of how to do the same thing using `~matplotlib.gridspec.GridSpec` or `~matplotlib.pyplot.subplot2grid`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:268
msgid "Variable widths or heights in a grid"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:270
msgid "Both `~.pyplot.subplots` and `~.pyplot.subplot_mosaic` allow the rows in the grid to be different heights, and the columns to be different widths using the *gridspec_kw* keyword argument. Spacing parameters accepted by `~matplotlib.gridspec.GridSpec` can be passed to `~matplotlib.pyplot.subplots` and `~matplotlib.pyplot.subplot_mosaic`:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:314
msgid "Nested Axes layouts"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:316
msgid "Sometimes it is helpful to have two or more grids of Axes that may not need to be related to one another.  The most simple way toin accomplish this is to use `.Figure.subfigures`.  Note that the subfigure layouts are independent, so the Axes spines in each subfigure are not necessarily aligned.  See below for a more verbose way to achieve the same effect with `~.gridspec.GridSpecFromSubplotSpec`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:361
msgid "It is also possible to nest Axes using `~.pyplot.subplot_mosaic` using nested lists.  This method does not use subfigures, like above, so lacks the ability to add per-subfigure ``suptitle`` and ``supxlabel``, etc. Rather it is a convenience wrapper around the `~.SubplotSpec.subgridspec` method described below."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:396
msgid "Low-level and advanced grid methods"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:398
msgid "Internally, the arrangement of a grid of Axes is controlled by creating instances of `~.GridSpec` and `~.SubplotSpec`. *GridSpec* defines a (possibly non-uniform) grid of cells. Indexing into the *GridSpec* returns a SubplotSpec that covers one or more grid cells, and can be used to specify the location of an Axes."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:404
msgid "The following examples show how to use low-level methods to arrange Axes using *GridSpec* objects."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:410
msgid "We can accopmplish a 2x2 grid in the same manner as ``plt.subplots(2, 2)``:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:458
msgid "Axes spanning rows or grids in a grid"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:460
msgid "We can index the *spec* array using `NumPy slice syntax <https://numpy.org/doc/stable/reference/arrays.indexing.html>`_ and the new Axes will span the slice.  This would be the same as ``fig, axd = plt.subplot_mosaic([['ax0', 'ax0'], ['ax1', 'ax2']], ...)``:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:507
msgid "Manual adjustments to a *GridSpec* layout"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:509
msgid "When a  *GridSpec* is explicitly used, you can adjust the layout parameters of subplots that are created from the  *GridSpec*.  Note this option is not compatible with ``constrained_layout`` or `.Figure.tight_layout` which both ignore *left* and *right* and adjust subplot sizes to fill the figure.  Usually such manual placement requires iterations to make the Axes tick labels not overlap the Axes."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:516
msgid "These spacing parameters can also be passed to `~.pyplot.subplots` and `~.pyplot.subplot_mosaic` as the *gridspec_kw* argument."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:558
msgid "Nested layouts with SubplotSpec"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:560
msgid "You can create nested layout similar to `~.Figure.subfigures` using `~.gridspec.SubplotSpec.subgridspec`.  Here the Axes spines *are* aligned."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:564
msgid "Note this is also available from the more verbose `.gridspec.GridSpecFromSubplotSpec`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:614
msgid "Here's a more sophisticated example of nested *GridSpec*: We create an outer 4x4 grid with each cell containing an inner 3x3 grid of Axes. We outline the outer 4x4 grid by hiding appropriate spines in each of the inner 3x3 grids."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:665
msgid "More reading"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:667
msgid "More details about :doc:`subplot mosaic </tutorials/provisional/mosaic>`."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:668
msgid "More details about :doc:`constrained layout </tutorials/intermediate/constrainedlayout_guide>`, used to align spacing in most of these examples."
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:672
msgid "References"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:674
msgid "The use of the following functions, methods, classes and modules is shown in this example:"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:677
msgid "`matplotlib.pyplot.subplots`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:678
msgid "`matplotlib.pyplot.subplot_mosaic`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:679
msgid "`matplotlib.figure.Figure.add_gridspec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:680
msgid "`matplotlib.figure.Figure.add_subplot`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:681
msgid "`matplotlib.gridspec.GridSpec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:682
msgid "`matplotlib.gridspec.SubplotSpec.subgridspec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:683
msgid "`matplotlib.gridspec.GridSpecFromSubplotSpec`"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:688
msgid "**Total running time of the script:** ( 0 minutes  9.936 seconds)"
msgstr ""

#: ../../tutorials/intermediate/arranging_axes.rst:703
msgid ":download:`Download Python source code: arranging_axes.py <arranging_axes.py>`"
msgstr ":download:`Descargar código fuente de Python: arranging_axes.py <arranging_axes.py>`"

#: ../../tutorials/intermediate/arranging_axes.rst:709
msgid ":download:`Download Jupyter notebook: arranging_axes.ipynb <arranging_axes.ipynb>`"
msgstr ":download:`Descargar Jupyter notebook: arranging_axes.ipynb <arranging_axes.ipynb>`"

#: ../../tutorials/intermediate/arranging_axes.rst:716
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

