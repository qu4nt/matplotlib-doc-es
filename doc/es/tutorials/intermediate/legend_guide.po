msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/intermediate/legend_guide.po\n"
"X-Crowdin-File-ID: 3312\n"
"Language: es_ES\n"

#: ../../tutorials/intermediate/legend_guide.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_intermediate_legend_guide.py>` to download the full example code"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:23
msgid "Legend guide"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:25
msgid "Generating legends flexibly in Matplotlib."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:29
msgid "This legend guide is an extension of the documentation available at :func:`~matplotlib.pyplot.legend` - please ensure you are familiar with contents of that documentation before proceeding with this guide."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:34
msgid "This guide makes use of some common terms, which are documented here for clarity:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:38
msgid "legend entry"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:40
msgid "A legend is made up of one or more legend entries. An entry is made up of exactly one key and one label."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:42
msgid "legend key"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:44
msgid "The colored/patterned marker to the left of each legend label."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:45
msgid "legend label"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:47
msgid "The text which describes the handle represented by the key."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:48
msgid "legend handle"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:50
msgid "The original object which is used to generate an appropriate entry in the legend."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:55
msgid "Controlling the legend entries"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:57
msgid "Calling :func:`legend` with no arguments automatically fetches the legend handles and their associated labels. This functionality is equivalent to::"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:63
msgid "The :meth:`~matplotlib.axes.Axes.get_legend_handles_labels` function returns a list of handles/artists which exist on the Axes which can be used to generate entries for the resulting legend - it is worth noting however that not all artists can be added to a legend, at which point a \"proxy\" will have to be created (see :ref:`proxy_legend_handles` for further details)."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:69
msgid "Those artists with an empty string as label or with a label starting with \"_\" will be ignored."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:72
msgid "For full control of what is being added to the legend, it is common to pass the appropriate handles directly to :func:`legend`::"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:80
msgid "In some cases, it is not possible to set the label of the handle, so it is possible to pass through the list of labels to :func:`legend`::"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:92
msgid "Creating artists specifically for adding to the legend (aka. Proxy artists)"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:94
msgid "Not all handles can be turned into legend entries automatically, so it is often necessary to create an artist which *can*. Legend handles don't have to exist on the Figure or Axes in order to be used."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:98
msgid "Suppose we wanted to create a legend which has an entry for some data which is represented by a red color:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:129
msgid "There are many supported legend handles. Instead of creating a patch of color we could have created a line with a marker:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:161
msgid "Legend location"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:163
msgid "The location of the legend can be specified by the keyword argument *loc*. Please see the documentation at :func:`legend` for more details."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:166
msgid "The ``bbox_to_anchor`` keyword gives a great degree of control for manual legend placement. For example, if you want your axes legend located at the figure's top right-hand corner instead of the axes' corner, simply specify the corner's location and the coordinate system of that location::"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:174
msgid "More examples of custom legend placement:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:213
msgid "Multiple legends on the same Axes"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:215
msgid "Sometimes it is more clear to split legend entries across multiple legends. Whilst the instinctive approach to doing this might be to call the :func:`legend` function multiple times, you will find that only one legend ever exists on the Axes. This has been done so that it is possible to call :func:`legend` repeatedly to update the legend to the latest handles on the Axes. To keep old legend instances, we must add them manually to the Axes:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:258
msgid "Legend Handlers"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:260
msgid "In order to create legend entries, handles are given as an argument to an appropriate :class:`~matplotlib.legend_handler.HandlerBase` subclass. The choice of handler subclass is determined by the following rules:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:264
msgid "Update :func:`~matplotlib.legend.Legend.get_legend_handler_map` with the value in the ``handler_map`` keyword."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:266
msgid "Check if the ``handle`` is in the newly created ``handler_map``."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:267
msgid "Check if the type of ``handle`` is in the newly created ``handler_map``."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:268
msgid "Check if any of the types in the ``handle``'s mro is in the newly created ``handler_map``."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:271
msgid "For completeness, this logic is mostly implemented in :func:`~matplotlib.legend.Legend.get_legend_handler`."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:274
msgid "All of this flexibility means that we have the necessary hooks to implement custom handlers for our own type of legend key."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:277
msgid "The simplest example of using custom handlers is to instantiate one of the existing `.legend_handler.HandlerBase` subclasses. For the sake of simplicity, let's choose `.legend_handler.HandlerLine2D` which accepts a *numpoints* argument (numpoints is also a keyword on the :func:`legend` function for convenience). We can then pass the mapping of instance to Handler as a keyword to legend."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:308
#: ../../tutorials/intermediate/legend_guide.rst:356
#: ../../tutorials/intermediate/legend_guide.rst:445
#: ../../tutorials/intermediate/legend_guide.rst:506
msgid "Out:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:319
msgid "As you can see, \"Line 1\" now has 4 marker points, where \"Line 2\" has 2 (the default). Try the above code, only change the map's key from ``line1`` to ``type(line1)``. Notice how now both `.Line2D` instances get 4 markers."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:323
msgid "Along with handlers for complex plot types such as errorbars, stem plots and histograms, the default ``handler_map`` has a special ``tuple`` handler (`.legend_handler.HandlerTuple`) which simply plots the handles on top of one another for each item in the given tuple. The following example demonstrates combining two legend keys on top of one another:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:367
msgid "The `.legend_handler.HandlerTuple` class can also be used to assign several legend keys to the same entry:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:399
msgid "Implementing a custom legend handler"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:401
msgid "A custom handler can be implemented to turn any handle into a legend key (handles don't necessarily need to be matplotlib artists).  The handler must implement a ``legend_artist`` method which returns a single artist for the legend to use. The required signature for ``legend_artist`` is documented at `~.legend_handler.HandlerBase.legend_artist`."
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:456
msgid "Alternatively, had we wanted to globally accept ``AnyObject`` instances without needing to manually set the *handler_map* keyword all the time, we could have registered the new handler with::"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:463
msgid "Whilst the power here is clear, remember that there are already many handlers implemented and what you want to achieve may already be easily possible with existing classes. For example, to produce elliptical legend keys, rather than rectangular ones:"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:518
msgid "**Total running time of the script:** ( 0 minutes  3.237 seconds)"
msgstr ""

#: ../../tutorials/intermediate/legend_guide.rst:533
msgid ":download:`Download Python source code: legend_guide.py <legend_guide.py>`"
msgstr ":download:`Descargar código fuente de Python: legend_guide.py <legend_guide.py>`"

#: ../../tutorials/intermediate/legend_guide.rst:539
msgid ":download:`Download Jupyter notebook: legend_guide.ipynb <legend_guide.ipynb>`"
msgstr ":download:`Descargar Jupyter notebook: legend_guide.ipynb <legend_guide.ipynb>`"

#: ../../tutorials/intermediate/legend_guide.rst:546
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

