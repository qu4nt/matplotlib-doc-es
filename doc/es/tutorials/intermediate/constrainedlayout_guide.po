msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/intermediate/constrainedlayout_guide.po\n"
"X-Crowdin-File-ID: 3308\n"
"Language: es_ES\n"

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_intermediate_constrainedlayout_guide.py>` to download the full example code"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:23
msgid "Constrained Layout Guide"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:25
msgid "How to use constrained-layout to fit plots within your figure cleanly."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:27
msgid "*constrained_layout* automatically adjusts subplots and decorations like legends and colorbars so that they fit in the figure window while still preserving, as best they can, the logical layout requested by the user."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:31
msgid "*constrained_layout* is similar to :doc:`tight_layout</tutorials/intermediate/tight_layout_guide>`, but uses a constraint solver to determine the size of axes that allows them to fit."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:36
msgid "*constrained_layout* needs to be activated before any axes are added to a figure. Two ways of doing so are"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:39
msgid "using the respective argument to :func:`~.pyplot.subplots` or :func:`~.pyplot.figure`, e.g.::"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:44
msgid "activate it via :ref:`rcParams<customizing-with-dynamic-rc-settings>`, like::"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:49
msgid "Those are described in detail throughout the following sections."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:53
msgid "Currently Constrained Layout is **experimental**.  The behaviour and API are subject to change, or the whole functionality may be removed without a deprecation period.  If you *require* your plots to be absolutely reproducible, get the Axes positions after running Constrained Layout and use ``ax.set_position()`` in your code with ``constrained_layout=False``."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:61
msgid "Simple Example"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:63
msgid "In Matplotlib, the location of axes (including subplots) are specified in normalized figure coordinates. It can happen that your axis labels or titles (or sometimes even ticklabels) go outside the figure area, and are thus clipped."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:114
msgid "To prevent this, the location of axes needs to be adjusted. For subplots, this can be done manually by adjusting the subplot parameters using `.Figure.subplots_adjust`. However, specifying your figure with the # ``constrained_layout=True`` keyword argument will do the adjusting # automatically."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:142
msgid "When you have multiple subplots, often you see labels of different axes overlapping each other."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:168
msgid "Specifying ``constrained_layout=True`` in the call to ``plt.subplots`` causes the layout to be properly constrained."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:195
msgid "Colorbars"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:197
msgid "If you create a colorbar with `.Figure.colorbar`, you need to make room for it.  ``constrained_layout`` does this automatically.  Note that if you specify ``use_gridspec=True`` it will be ignored because this option is made for improving the layout via ``tight_layout``."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:205
msgid "For the `~.axes.Axes.pcolormesh` keyword arguments (``pc_kwargs``) we use a dictionary. Below we will assign one colorbar to a number of axes each containing a `~.cm.ScalarMappable`; specifying the norm and colormap ensures the colorbar is accurate for all the axes."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:234
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:270
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:307
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:345
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:384
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:418
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:795
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:846
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:993
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1033
msgid "Out:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:245
msgid "If you specify a list of axes (or other iterable container) to the ``ax`` argument of ``colorbar``, constrained_layout will take space from the specified axes."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:281
msgid "If you specify a list of axes from inside a grid of axes, the colorbar will steal space appropriately, and leave a gap, but all subplots will still be the same size."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:319
msgid "Suptitle"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:321
msgid "``constrained_layout`` can also make room for `~.figure.Figure.suptitle`."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:357
msgid "Legends"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:359
msgid "Legends can be placed outside of their parent axis. Constrained-layout is designed to handle this for :meth:`.Axes.legend`. However, constrained-layout does *not* handle legends being created via :meth:`.Figure.legend` (yet)."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:395
msgid "However, this will steal space from a subplot layout:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:429
msgid "In order for a legend or other artist to *not* steal space from the subplot layout, we can ``leg.set_in_layout(False)``. Of course this can mean the legend ends up cropped, but can be useful if the plot is subsequently called with ``fig.savefig('outname.png', bbox_inches='tight')``.  Note, however, that the legend's ``get_in_layout`` status will have to be toggled again to make the saved file work, and we must manually trigger a draw if we want constrained_layout to adjust the size of the axes before printing."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:474
#: ../../tutorials/intermediate/constrainedlayout_guide.rst:509
msgid "The saved file looks like:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:479
msgid "A better way to get around this awkwardness is to simply use the legend method provided by `.Figure.legend`:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:518
msgid "Padding and Spacing"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:520
msgid "Padding between axes is controlled in the horizontal by *w_pad* and *wspace*, and vertical by *h_pad* and *hspace*.  These can be edited via `~.figure.Figure.set_constrained_layout_pads`.  *w/h_pad* are the minimum space around the axes in units of inches:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:549
msgid "Spacing between subplots is further set by *wspace* and *hspace*. These are specified as a fraction of the size of the subplot group as a whole. If these values are smaller than *w_pad* or *h_pad*, then the fixed pads are used instead. Note in the below how the space at the edges doesn't change from the above, but the space between subplots does."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:580
msgid "If there are more than two columns, the *wspace* is shared between them, so here the wspace is divided in 2, with a *wspace* of 0.1 between each column:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:609
msgid "GridSpecs also have optional *hspace* and *wspace* keyword arguments, that will be used instead of the pads set by ``constrained_layout``:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:642
msgid "Spacing with colorbars"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:644
msgid "Colorbars are placed a distance *pad* from their parent, where *pad* is a fraction of the width of the parent(s).  The spacing to the next subplot is then given by *w/hspace*."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:679
msgid "rcParams"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:681
msgid "There are five :ref:`rcParams<customizing-with-dynamic-rc-settings>` that can be set, either in a script or in the :file:`matplotlibrc` file. They all have the prefix ``figure.constrained_layout``:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:685
msgid "*use*: Whether to use constrained_layout. Default is False"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:686
msgid "*w_pad*, *h_pad*:    Padding around axes objects. Float representing inches.  Default is 3./72. inches (3 pts)"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:688
msgid "*wspace*, *hspace*:  Space between subplot groups. Float representing a fraction of the subplot widths being separated. Default is 0.02."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:717
msgid "Use with GridSpec"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:719
msgid "constrained_layout is meant to be used with :func:`~matplotlib.figure.Figure.subplots` or :func:`~matplotlib.gridspec.GridSpec` and :func:`~matplotlib.figure.Figure.add_subplot`."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:724
msgid "Note that in what follows ``constrained_layout=True``"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:754
msgid "More complicated gridspec layouts are possible.  Note here we use the convenience functions `~.Figure.add_gridspec` and `~.SubplotSpec.subgridspec`."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:806
msgid "Note that in the above the left and right columns don't have the same vertical extent.  If we want the top and bottom of the two grids to line up then they need to be in the same gridspec.  We need to make this figure larger as well in order for the axes not to collapse to zero height:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:857
msgid "This example uses two gridspecs to have the colorbar only pertain to one set of pcolors.  Note how the left column is wider than the two right-hand columns because of this.  Of course, if you wanted the subplots to be the same size you only needed one gridspec."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:908
msgid "Manually setting axes positions"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:910
msgid "There can be good reasons to manually set an axes position.  A manual call to `~.axes.Axes.set_position` will set the axes so constrained_layout has no effect on it anymore. (Note that ``constrained_layout`` still leaves the space for the axes that is moved)."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:939
msgid "Manually turning off ``constrained_layout``"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:941
msgid "``constrained_layout`` usually adjusts the axes positions on each draw of the figure.  If you want to get the spacing provided by ``constrained_layout`` but not have it update, then do the initial draw and then call ``fig.set_constrained_layout(False)``. This is potentially useful for animations where the tick labels may change length."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:948
msgid "Note that ``constrained_layout`` is turned off for ``ZOOM`` and ``PAN`` GUI events for the backends that use the toolbar.  This prevents the axes from changing position during zooming and panning."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:954
msgid "Limitations"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:957
msgid "Incompatible functions"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:959
msgid "``constrained_layout`` will work with `.pyplot.subplot`, but only if the number of rows and columns is the same for each call. The reason is that each call to `.pyplot.subplot` will create a new `.GridSpec` instance if the geometry is not the same, and ``constrained_layout``.  So the following works fine:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1004
msgid "but the following leads to a poor layout:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1044
msgid "Similarly, `~matplotlib.pyplot.subplot2grid` works with the same limitation that nrows and ncols cannot change for the layout to look good."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1082
msgid "Other Caveats"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1084
msgid "``constrained_layout`` only considers ticklabels, axis labels, titles, and legends.  Thus, other artists may be clipped and also may overlap."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1087
msgid "It assumes that the extra space needed for ticklabels, axis labels, and titles is independent of original location of axes. This is often true, but there are rare cases where it is not."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1091
msgid "There are small differences in how the backends handle rendering fonts, so the results will not be pixel-identical."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1094
msgid "An artist using axes coordinates that extend beyond the axes boundary will result in unusual layouts when added to an axes. This can be avoided by adding the artist directly to the :class:`~matplotlib.figure.Figure` using :meth:`~matplotlib.figure.Figure.add_artist`. See :class:`~matplotlib.patches.ConnectionPatch` for an example."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1104
msgid "Debugging"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1106
msgid "Constrained-layout can fail in somewhat unexpected ways.  Because it uses a constraint solver the solver can find solutions that are mathematically correct, but that aren't at all what the user wants.  The usual failure mode is for all sizes to collapse to their smallest allowable value. If this happens, it is for one of two reasons:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1112
msgid "There was not enough room for the elements you were requesting to draw."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1113
msgid "There is a bug - in which case open an issue at https://github.com/matplotlib/matplotlib/issues."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1116
msgid "If there is a bug, please report with a self-contained example that does not require outside data or dependencies (other than numpy)."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1122
msgid "Notes on the algorithm"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1124
msgid "The algorithm for the constraint is relatively straightforward, but has some complexity due to the complex ways we can layout a figure."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1127
msgid "Layout in Matplotlib is carried out with gridspecs via the `.GridSpec` class. A gridspec is a logical division of the figure into rows and columns, with the relative width of the Axes in those rows and columns set by *width_ratios* and *height_ratios*."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1132
msgid "In constrained_layout, each gridspec gets a *layoutgrid* associated with it.  The *layoutgrid* has a series of ``left`` and ``right`` variables for each column, and ``bottom`` and ``top`` variables for each row, and further it has a margin for each of left, right, bottom and top.  In each row, the bottom/top margins are widened until all the decorators in that row are accommodated.  Similarly for columns and the left/right margins."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1142
msgid "Simple case: one Axes"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1144
msgid "For a single Axes the layout is straight forward.  There is one parent layoutgrid for the figure consisting of one column and row, and a child layoutgrid for the gridspec that contains the axes, again consisting of one row and column. Space is made for the \"decorations\" on each side of the axes.  In the code, this is accomplished by the entries in ``do_constrained_layout()`` like::"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1154
msgid "where ``bbox`` is the tight bounding box of the axes, and ``pos`` its position.  Note how the four margins encompass the axes decorations."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1183
msgid "Simple case: two Axes"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1184
msgid "When there are multiple axes they have their layouts bound in simple ways.  In this example the left axes has much larger decorations than the right, but they share a bottom margin, which is made large enough to accommodate the larger xlabel.   Same with the shared top margin.  The left and right margins are not shared, and hence are allowed to be different."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1216
msgid "Two Axes and colorbar"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1218
msgid "A colorbar is simply another item that expands the margin of the parent layoutgrid cell:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1247
msgid "Colorbar associated with a Gridspec"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1249
msgid "If a colorbar belongs to more than one cell of the grid, then it makes a larger margin for each:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1278
msgid "Uneven sized Axes"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1280
msgid "There are two ways to make axes have an uneven size in a Gridspec layout, either by specifying them to cross Gridspecs rows or columns, or by specifying width and height ratios."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1284
msgid "The first method is used here.  Note that the middle ``top`` and ``bottom`` margins are not affected by the left-hand column.  This is a conscious decision of the algorithm, and leads to the case where the two right-hand axes have the same height, but it is not 1/2 the height of the left-hand axes.  This is consietent with how ``gridspec`` works without constrained layout."
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1320
msgid "One case that requires finessing is if margins do not have any artists constraining their width. In the case below, the right margin for column 0 and the left margin for column 3 have no margin artists to set their width, so we take the maximum width of the margin widths that do have artists. This makes all the axes have the same size:"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1354
msgid "**Total running time of the script:** ( 0 minutes  18.128 seconds)"
msgstr ""

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1369
msgid ":download:`Download Python source code: constrainedlayout_guide.py <constrainedlayout_guide.py>`"
msgstr ":download:`Descargar código fuente de Python: constrainedlayout_guide.py <constrainedlayout_guide.py>`"

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1375
msgid ":download:`Download Jupyter notebook: constrainedlayout_guide.ipynb <constrainedlayout_guide.ipynb>`"
msgstr ":download:`Descargar Jupyter notebook: constrainedlayout_guide.ipynb <constrainedlayout_guide.ipynb>`"

#: ../../tutorials/intermediate/constrainedlayout_guide.rst:1382
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

