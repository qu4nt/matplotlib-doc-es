msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-22 00:03\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/text/pgf.po\n"
"X-Crowdin-File-ID: 3340\n"
"Language: es_ES\n"

#: ../../tutorials/text/pgf.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_text_pgf.py>` to download the full example code"
msgstr ""

#: ../../tutorials/text/pgf.rst:23
msgid "Typesetting with XeLaTeX/LuaLaTeX"
msgstr ""

#: ../../tutorials/text/pgf.rst:25
msgid "How to typeset text with the ``pgf`` backend in Matplotlib."
msgstr ""

#: ../../tutorials/text/pgf.rst:27
msgid "Using the ``pgf`` backend, Matplotlib can export figures as pgf drawing commands that can be processed with pdflatex, xelatex or lualatex. XeLaTeX and LuaLaTeX have full Unicode support and can use any font that is installed in the operating system, making use of advanced typographic features of OpenType, AAT and Graphite. Pgf pictures created by ``plt.savefig('figure.pgf')`` can be embedded as raw commands in LaTeX documents. Figures can also be directly compiled and saved to PDF with ``plt.savefig('figure.pdf')`` by switching the backend ::"
msgstr ""

#: ../../tutorials/text/pgf.rst:38
msgid "or by explicitly requesting the use of the ``pgf`` backend ::"
msgstr ""

#: ../../tutorials/text/pgf.rst:42
msgid "or by registering it for handling pdf output ::"
msgstr ""

#: ../../tutorials/text/pgf.rst:47
msgid "The last method allows you to keep using regular interactive backends and to save xelatex, lualatex or pdflatex compiled PDF files from the graphical user interface."
msgstr ""

#: ../../tutorials/text/pgf.rst:51
msgid "Matplotlib's pgf support requires a recent LaTeX_ installation that includes the TikZ/PGF packages (such as TeXLive_), preferably with XeLaTeX or LuaLaTeX installed. If either pdftocairo or ghostscript is present on your system, figures can optionally be saved to PNG images as well. The executables for all applications must be located on your :envvar:`PATH`."
msgstr ""

#: ../../tutorials/text/pgf.rst:57
msgid "`.rcParams` that control the behavior of the pgf backend:"
msgstr ""

#: ../../tutorials/text/pgf.rst:60
msgid "Parameter"
msgstr ""

#: ../../tutorials/text/pgf.rst:60
msgid "Documentation"
msgstr ""

#: ../../tutorials/text/pgf.rst:62
msgid "pgf.preamble"
msgstr ""

#: ../../tutorials/text/pgf.rst:62
msgid "Lines to be included in the LaTeX preamble"
msgstr ""

#: ../../tutorials/text/pgf.rst:63
msgid "pgf.rcfonts"
msgstr ""

#: ../../tutorials/text/pgf.rst:63
msgid "Setup fonts from rc params using the fontspec package"
msgstr ""

#: ../../tutorials/text/pgf.rst:64
msgid "pgf.texsystem"
msgstr ""

#: ../../tutorials/text/pgf.rst:64
msgid "Either \"xelatex\" (default), \"lualatex\" or \"pdflatex\""
msgstr ""

#: ../../tutorials/text/pgf.rst:69
msgid "TeX defines a set of special characters, such as::"
msgstr ""

#: ../../tutorials/text/pgf.rst:73
msgid "Generally, these characters must be escaped correctly. For convenience, some characters (_, ^, %) are automatically escaped outside of math environments."
msgstr ""

#: ../../tutorials/text/pgf.rst:81
msgid "Multi-Page PDF Files"
msgstr ""

#: ../../tutorials/text/pgf.rst:83
msgid "The pgf backend also supports multipage pdf files using `~.backend_pgf.PdfPages`"
msgstr ""

#: ../../tutorials/text/pgf.rst:103
msgid "Font specification"
msgstr ""

#: ../../tutorials/text/pgf.rst:105
msgid "The fonts used for obtaining the size of text elements or when compiling figures to PDF are usually defined in the `.rcParams`. You can also use the LaTeX default Computer Modern fonts by clearing the lists for :rc:`font.serif`, :rc:`font.sans-serif` or :rc:`font.monospace`. Please note that the glyph coverage of these fonts is very limited. If you want to keep the Computer Modern font face but require extended Unicode support, consider installing the `Computer Modern Unicode`__ fonts *CMU Serif*, *CMU Sans Serif*, etc."
msgstr ""

#: ../../tutorials/text/pgf.rst:115
msgid "When saving to ``.pgf``, the font configuration Matplotlib used for the layout of the figure is included in the header of the text file."
msgstr ""

#: ../../tutorials/text/pgf.rst:125
msgid "Custom preamble"
msgstr ""

#: ../../tutorials/text/pgf.rst:127
msgid "Full customization is possible by adding your own commands to the preamble. Use :rc:`pgf.preamble` if you want to configure the math fonts, using ``unicode-math`` for example, or for loading additional packages. Also, if you want to do the font configuration yourself instead of using the fonts specified in the rc parameters, make sure to disable :rc:`pgf.rcfonts`."
msgstr ""

#: ../../tutorials/text/pgf.rst:147
msgid "Choosing the TeX system"
msgstr ""

#: ../../tutorials/text/pgf.rst:149
msgid "The TeX system to be used by Matplotlib is chosen by :rc:`pgf.texsystem`. Possible values are ``'xelatex'`` (default), ``'lualatex'`` and ``'pdflatex'``. Please note that when selecting pdflatex, the fonts and Unicode handling must be configured in the preamble."
msgstr ""

#: ../../tutorials/text/pgf.rst:161
msgid "Troubleshooting"
msgstr ""

#: ../../tutorials/text/pgf.rst:163
msgid "Please note that the TeX packages found in some Linux distributions and MiKTeX installations are dramatically outdated. Make sure to update your package catalog and upgrade or install a recent TeX distribution."
msgstr ""

#: ../../tutorials/text/pgf.rst:167
msgid "On Windows, the :envvar:`PATH` environment variable may need to be modified to include the directories containing the latex, dvipng and ghostscript executables. See :ref:`environment-variables` and :ref:`setting-windows-environment-variables` for details."
msgstr ""

#: ../../tutorials/text/pgf.rst:172
msgid "Sometimes the font rendering in figures that are saved to png images is very bad. This happens when the pdftocairo tool is not available and ghostscript is used for the pdf to png conversion."
msgstr ""

#: ../../tutorials/text/pgf.rst:176
msgid "Make sure what you are trying to do is possible in a LaTeX document, that your LaTeX syntax is valid and that you are using raw strings if necessary to avoid unintended escape sequences."
msgstr ""

#: ../../tutorials/text/pgf.rst:180
msgid ":rc:`pgf.preamble` provides lots of flexibility, and lots of ways to cause problems. When experiencing problems, try to minimalize or disable the custom preamble."
msgstr ""

#: ../../tutorials/text/pgf.rst:184
msgid "Configuring an ``unicode-math`` environment can be a bit tricky. The TeXLive distribution for example provides a set of math fonts which are usually not installed system-wide. XeTeX, unlike LuaLatex, cannot find these fonts by their name, which is why you might have to specify ``\\setmathfont{xits-math.otf}`` instead of ``\\setmathfont{XITS Math}`` or alternatively make the fonts available to your OS. See this `tex.stackexchange.com question`__ for more details."
msgstr ""

#: ../../tutorials/text/pgf.rst:194
msgid "If the font configuration used by Matplotlib differs from the font setting in yout LaTeX document, the alignment of text elements in imported figures may be off. Check the header of your ``.pgf`` file if you are unsure about the fonts Matplotlib used for the layout."
msgstr ""

#: ../../tutorials/text/pgf.rst:199
msgid "Vector images and hence ``.pgf`` files can become bloated if there are a lot of objects in the graph. This can be the case for image processing or very big scatter graphs.  In an extreme case this can cause TeX to run out of memory: \"TeX capacity exceeded, sorry\"  You can configure latex to increase the amount of memory available to generate the ``.pdf`` image as discussed on `tex.stackexchange.com <https://tex.stackexchange.com/q/7953/>`_. Another way would be to \"rasterize\" parts of the graph causing problems using either the ``rasterized=True`` keyword, or ``.set_rasterized(True)`` as per :doc:`this example </gallery/misc/rasterization_demo>`."
msgstr ""

#: ../../tutorials/text/pgf.rst:209
msgid "Various math fonts are compiled and rendered only if corresponding font packages are loaded. Specifically, when using ``\\mathbf{}`` on Greek letters, the default computer modern font may not contain them, in which case the letter is not rendered. In such scenarios, the ``lmodern`` package should be loaded."
msgstr ""

#: ../../tutorials/text/pgf.rst:215
msgid "If you still need help, please see :ref:`reporting-problems`"
msgstr ""

#: ../../tutorials/text/pgf.rst:233
msgid ":download:`Download Python source code: pgf.py <pgf.py>`"
msgstr ":download:`Descargar c√≥digo fuente de Python: pgf.py <pgf.py>`"

#: ../../tutorials/text/pgf.rst:239
msgid ":download:`Download Jupyter notebook: pgf.ipynb <pgf.ipynb>`"
msgstr ":download:`Descargar Jupyter notebook: pgf.ipynb <pgf.ipynb>`"

#: ../../tutorials/text/pgf.rst:246
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

