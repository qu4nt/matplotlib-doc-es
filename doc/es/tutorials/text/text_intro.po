msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-05-16 19:08\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/tutorials/text/text_intro.po\n"
"X-Crowdin-File-ID: 3344\n"
"Language: es_ES\n"

#: ../../tutorials/text/text_intro.rst:13
msgid "Click :ref:`here <sphx_glr_download_tutorials_text_text_intro.py>` to download the full example code"
msgstr ""

#: ../../tutorials/text/text_intro.rst:23
msgid "Text in Matplotlib Plots"
msgstr ""

#: ../../tutorials/text/text_intro.rst:25
msgid "Introduction to plotting and working with text in Matplotlib."
msgstr ""

#: ../../tutorials/text/text_intro.rst:27
msgid "Matplotlib has extensive text support, including support for mathematical expressions, truetype support for raster and vector outputs, newline separated text with arbitrary rotations, and unicode support."
msgstr ""

#: ../../tutorials/text/text_intro.rst:32
msgid "Because it embeds fonts directly in output documents, e.g., for postscript or PDF, what you see on the screen is what you get in the hardcopy. `FreeType <https://www.freetype.org/>`_ support produces very nice, antialiased fonts, that look good even at small raster sizes.  Matplotlib includes its own :mod:`matplotlib.font_manager` (thanks to Paul Barrett), which implements a cross platform, `W3C <https://www.w3.org/>`_ compliant font finding algorithm."
msgstr ""

#: ../../tutorials/text/text_intro.rst:41
msgid "The user has a great deal of control over text properties (font size, font weight, text location and color, etc.) with sensible defaults set in the :doc:`rc file </tutorials/introductory/customizing>`. And significantly, for those interested in mathematical or scientific figures, Matplotlib implements a large number of TeX math symbols and commands, supporting :doc:`mathematical expressions </tutorials/text/mathtext>` anywhere in your figure."
msgstr ""

#: ../../tutorials/text/text_intro.rst:51
msgid "Basic text commands"
msgstr ""

#: ../../tutorials/text/text_intro.rst:53
msgid "The following commands are used to create text in the pyplot interface and the object-oriented API:"
msgstr ""

#: ../../tutorials/text/text_intro.rst:57
msgid "`.pyplot` API"
msgstr ""

#: ../../tutorials/text/text_intro.rst:57
msgid "OO API"
msgstr ""

#: ../../tutorials/text/text_intro.rst:57
msgid "description"
msgstr "descripci√≥n"

#: ../../tutorials/text/text_intro.rst:59
msgid "`~.pyplot.text`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:59
msgid "`~.Axes.text`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:59
msgid "Add text at an arbitrary location of the `~matplotlib.axes.Axes`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:62
msgid "`~.pyplot.annotate`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:62
msgid "`~.Axes.annotate`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:62
msgid "Add an annotation, with an optional arrow, at an arbitrary location of the `~matplotlib.axes.Axes`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:66
msgid "`~.pyplot.xlabel`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:66
msgid "`~.Axes.set_xlabel`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:66
msgid "Add a label to the `~matplotlib.axes.Axes`\\'s x-axis."
msgstr ""

#: ../../tutorials/text/text_intro.rst:69
msgid "`~.pyplot.ylabel`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:69
msgid "`~.Axes.set_ylabel`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:69
msgid "Add a label to the `~matplotlib.axes.Axes`\\'s y-axis."
msgstr ""

#: ../../tutorials/text/text_intro.rst:72
msgid "`~.pyplot.title`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:72
msgid "`~.Axes.set_title`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:72
msgid "Add a title to the `~matplotlib.axes.Axes`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:75
msgid "`~.pyplot.figtext`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:75
msgid "`~.Figure.text`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:75
msgid "Add text at an arbitrary location of the `.Figure`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:78
msgid "`~.pyplot.suptitle`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:78
msgid "`~.Figure.suptitle`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:78
msgid "Add a title to the `.Figure`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:81
msgid "All of these functions create and return a `.Text` instance, which can be configured with a variety of font and other properties.  The example below shows all of these commands in action, and more detail is provided in the sections that follow."
msgstr ""

#: ../../tutorials/text/text_intro.rst:141
msgid "Labels for x- and y-axis"
msgstr ""

#: ../../tutorials/text/text_intro.rst:143
msgid "Specifying the labels for the x- and y-axis is straightforward, via the `~matplotlib.axes.Axes.set_xlabel` and `~matplotlib.axes.Axes.set_ylabel` methods."
msgstr ""

#: ../../tutorials/text/text_intro.rst:180
msgid "The x- and y-labels are automatically placed so that they clear the x- and y-ticklabels.  Compare the plot below with that above, and note the y-label is to the left of the one above."
msgstr ""

#: ../../tutorials/text/text_intro.rst:211
msgid "If you want to move the labels, you can specify the *labelpad* keyword argument, where the value is points (1/72\", the same unit used to specify fontsizes)."
msgstr ""

#: ../../tutorials/text/text_intro.rst:242
msgid "Or, the labels accept all the `.Text` keyword arguments, including *position*, via which we can manually specify the label positions.  Here we put the xlabel to the far left of the axis.  Note, that the y-coordinate of this position has no effect - to adjust the y-position we need to use the *labelpad* keyword argument."
msgstr ""

#: ../../tutorials/text/text_intro.rst:275
msgid "All the labelling in this tutorial can be changed by manipulating the `matplotlib.font_manager.FontProperties` method, or by named keyword arguments to `~matplotlib.axes.Axes.set_xlabel`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:313
msgid "Finally, we can use native TeX rendering in all text objects and have multiple lines:"
msgstr ""

#: ../../tutorials/text/text_intro.rst:344
msgid "Titles"
msgstr "Titulos"

#: ../../tutorials/text/text_intro.rst:346
msgid "Subplot titles are set in much the same way as labels, but there is the *loc* keyword arguments that can change the position and justification from the default value of ``loc=center``."
msgstr ""

#: ../../tutorials/text/text_intro.rst:376
msgid "Vertical spacing for titles is controlled via :rc:`axes.titlepad`, which defaults to 5 points.  Setting to a different value moves the title."
msgstr ""

#: ../../tutorials/text/text_intro.rst:406
msgid "Ticks and ticklabels"
msgstr ""

#: ../../tutorials/text/text_intro.rst:408
msgid "Placing ticks and ticklabels is a very tricky aspect of making a figure. Matplotlib does its best to accomplish the task automatically, but it also offers a very flexible framework for determining the choices for tick locations, and how they are labelled."
msgstr ""

#: ../../tutorials/text/text_intro.rst:414
msgid "Terminology"
msgstr "Terminologia"

#: ../../tutorials/text/text_intro.rst:416
msgid "*Axes* have an `matplotlib.axis.Axis` object for the ``ax.xaxis`` and ``ax.yaxis`` that contain the information about how the labels in the axis are laid out."
msgstr ""

#: ../../tutorials/text/text_intro.rst:420
msgid "The axis API is explained in detail in the documentation to `~matplotlib.axis`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:423
msgid "An Axis object has major and minor ticks.  The Axis has `.Axis.set_major_locator` and `.Axis.set_minor_locator` methods that use the data being plotted to determine the location of major and minor ticks.  There are also `.Axis.set_major_formatter` and `.Axis.set_minor_formatter` methods that format the tick labels."
msgstr ""

#: ../../tutorials/text/text_intro.rst:430
msgid "Simple ticks"
msgstr ""

#: ../../tutorials/text/text_intro.rst:432
msgid "It often is convenient to simply define the tick values, and sometimes the tick labels, overriding the default locators and formatters.  This is discouraged because it breaks interactive navigation of the plot.  It also can reset the axis limits: note that the second plot has the ticks we asked for, including ones that are well outside the automatic view limits."
msgstr ""

#: ../../tutorials/text/text_intro.rst:464
msgid "We can of course fix this after the fact, but it does highlight a weakness of hard-coding the ticks.  This example also changes the format of the ticks:"
msgstr ""

#: ../../tutorials/text/text_intro.rst:499
msgid "Tick Locators and Formatters"
msgstr ""

#: ../../tutorials/text/text_intro.rst:501
msgid "Instead of making a list of all the tickalbels, we could have used `matplotlib.ticker.StrMethodFormatter` (new-style ``str.format()`` format string) or `matplotlib.ticker.FormatStrFormatter` (old-style '%' format string) and passed it to the ``ax.xaxis``.  A `matplotlib.ticker.StrMethodFormatter` can also be created by passing a ``str`` without having to explicitly create the formatter."
msgstr ""

#: ../../tutorials/text/text_intro.rst:536
msgid "And of course we could have used a non-default locator to set the tick locations.  Note we still pass in the tick values, but the x-limit fix used above is *not* needed."
msgstr ""

#: ../../tutorials/text/text_intro.rst:567
msgid "The default formatter is the `matplotlib.ticker.MaxNLocator` called as ``ticker.MaxNLocator(self, nbins='auto', steps=[1, 2, 2.5, 5, 10])`` The *steps* keyword contains a list of multiples that can be used for tick values.  i.e. in this case, 2, 4, 6 would be acceptable ticks, as would 20, 40, 60 or 0.2, 0.4, 0.6. However, 3, 6, 9 would not be acceptable because 3 doesn't appear in the list of steps."
msgstr ""

#: ../../tutorials/text/text_intro.rst:574
msgid "``nbins=auto`` uses an algorithm to determine how many ticks will be acceptable based on how long the axis is.  The fontsize of the ticklabel is taken into account, but the length of the tick string is not (because its not yet known.)  In the bottom row, the ticklabels are quite large, so we set ``nbins=4`` to make the labels fit in the right-hand plot."
msgstr ""

#: ../../tutorials/text/text_intro.rst:621
msgid "Finally, we can specify functions for the formatter using `matplotlib.ticker.FuncFormatter`.  Further, like `matplotlib.ticker.StrMethodFormatter`, passing a function will automatically create a `matplotlib.ticker.FuncFormatter`."
msgstr ""

#: ../../tutorials/text/text_intro.rst:664
msgid "Dateticks"
msgstr ""

#: ../../tutorials/text/text_intro.rst:666
msgid "Matplotlib can accept `datetime.datetime` and `numpy.datetime64` objects as plotting arguments.  Dates and times require special formatting, which can often benefit from manual intervention. In order to help, dates have special Locators and Formatters, defined in the `matplotlib.dates` module."
msgstr ""

#: ../../tutorials/text/text_intro.rst:672
msgid "A simple example is as follows.  Note how we have to rotate the tick labels so that they don't over-run each other."
msgstr ""

#: ../../tutorials/text/text_intro.rst:704
msgid "We can pass a format to `matplotlib.dates.DateFormatter`.  Also note that the 29th and the next month are very close together.  We can fix this by using the `.dates.DayLocator` class, which allows us to specify a list of days of the month to use. Similar formatters are listed in the `matplotlib.dates` module."
msgstr ""

#: ../../tutorials/text/text_intro.rst:742
msgid "Legends and Annotations"
msgstr ""

#: ../../tutorials/text/text_intro.rst:744
msgid "Legends: :doc:`/tutorials/intermediate/legend_guide`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:745
msgid "Annotations: :doc:`/tutorials/text/annotations`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:751
msgid "**Total running time of the script:** ( 0 minutes  4.454 seconds)"
msgstr ""

#: ../../tutorials/text/text_intro.rst:766
msgid ":download:`Download Python source code: text_intro.py <text_intro.py>`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:772
msgid ":download:`Download Jupyter notebook: text_intro.ipynb <text_intro.ipynb>`"
msgstr ""

#: ../../tutorials/text/text_intro.rst:779
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

