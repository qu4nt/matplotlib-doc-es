msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:24\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/ticker_api.po\n"
"X-Crowdin-File-ID: 1968\n"
"Language: es_ES\n"

#: ../../api/ticker_api.rst:3
msgid "``matplotlib.ticker``"
msgstr ""

#: matplotlib.ticker:2 of
msgid "Tick locating and formatting"
msgstr ""

#: matplotlib.ticker:4 of
msgid "This module contains classes for configuring tick locating and formatting. Generic tick locators and formatters are provided, as well as domain specific custom ones."
msgstr ""

#: matplotlib.ticker:8 of
msgid "Although the locators know nothing about major or minor ticks, they are used by the Axis class to support major and minor tick locating and formatting."
msgstr ""

#: matplotlib.ticker:12 of
msgid "Tick locating"
msgstr ""

#: matplotlib.ticker:14 of
msgid "The Locator class is the base class for all tick locators. The locators handle autoscaling of the view limits based on the data limits, and the choosing of tick locations. A useful semi-automatic tick locator is `MultipleLocator`. It is initialized with a base, e.g., 10, and it picks axis limits and ticks that are multiples of that base."
msgstr ""

#: matplotlib.ticker:20 of
msgid "The Locator subclasses defined here are:"
msgstr ""

#: matplotlib.ticker:23 of
msgid "`AutoLocator`"
msgstr ""

#: matplotlib.ticker:23 of
msgid "`MaxNLocator` with simple defaults. This is the default tick locator for most plotting."
msgstr ""

#: matplotlib.ticker:25 of
msgid "`MaxNLocator`"
msgstr ""

#: matplotlib.ticker:25 of
msgid "Finds up to a max number of intervals with ticks at nice locations."
msgstr ""

#: matplotlib.ticker:27 of
msgid "`LinearLocator`"
msgstr ""

#: matplotlib.ticker:27 of
msgid "Space ticks evenly from min to max."
msgstr ""

#: matplotlib.ticker:28 of
msgid "`LogLocator`"
msgstr ""

#: matplotlib.ticker:28 of
msgid "Space ticks logarithmically from min to max."
msgstr ""

#: matplotlib.ticker:29 of
msgid "`MultipleLocator`"
msgstr ""

#: matplotlib.ticker:29 of
msgid "Ticks and range are a multiple of base; either integer or float."
msgstr ""

#: matplotlib.ticker:31 of
msgid "`FixedLocator`"
msgstr ""

#: matplotlib.ticker:31 of
msgid "Tick locations are fixed."
msgstr ""

#: matplotlib.ticker:32 of
msgid "`IndexLocator`"
msgstr ""

#: matplotlib.ticker:32 of
msgid "Locator for index plots (e.g., where ``x = range(len(y))``)."
msgstr ""

#: matplotlib.ticker:34 of
msgid "`NullLocator`"
msgstr ""

#: matplotlib.ticker:34 of
msgid "No ticks."
msgstr ""

#: matplotlib.ticker:35 of
msgid "`SymmetricalLogLocator`"
msgstr ""

#: matplotlib.ticker:35 of
msgid "Locator for use with with the symlog norm; works like `LogLocator` for the part outside of the threshold and adds 0 if inside the limits."
msgstr ""

#: matplotlib.ticker:38 of
msgid "`LogitLocator`"
msgstr ""

#: matplotlib.ticker:38 of
msgid "Locator for logit scaling."
msgstr ""

#: matplotlib.ticker:39 of
msgid "`AutoMinorLocator`"
msgstr ""

#: matplotlib.ticker:39 of
msgid "Locator for minor ticks when the axis is linear and the major ticks are uniformly spaced. Subdivides the major tick interval into a specified number of minor intervals, defaulting to 4 or 5 depending on the major interval."
msgstr ""

#: matplotlib.ticker:46 of
msgid "There are a number of locators specialized for date locations - see the :mod:`.dates` module."
msgstr ""

#: matplotlib.ticker:49 of
msgid "You can define your own locator by deriving from Locator. You must override the ``__call__`` method, which returns a sequence of locations, and you will probably want to override the autoscale method to set the view limits from the data limits."
msgstr ""

#: matplotlib.ticker:54 of
msgid "If you want to override the default locator, use one of the above or a custom locator and pass it to the x or y axis instance. The relevant methods are::"
msgstr ""

#: matplotlib.ticker:62 of
msgid "The default minor locator is `NullLocator`, i.e., no minor ticks on by default."
msgstr ""

#: matplotlib.ticker:65 of
msgid "`Locator` instances should not be used with more than one `~matplotlib.axis.Axis` or `~matplotlib.axes.Axes`. So instead of::"
msgstr ""

#: matplotlib.ticker:72 of
msgid "do the following instead::"
msgstr ""

#: matplotlib.ticker:78 of
msgid "Tick formatting"
msgstr ""

#: matplotlib.ticker:80 of
msgid "Tick formatting is controlled by classes derived from Formatter. The formatter operates on a single tick value and returns a string to the axis."
msgstr ""

#: matplotlib.ticker:84 of
msgid "`NullFormatter`"
msgstr ""

#: matplotlib.ticker:84 of
msgid "No labels on the ticks."
msgstr ""

#: matplotlib.ticker:85 of
msgid "`FixedFormatter`"
msgstr ""

#: matplotlib.ticker:85 of
msgid "Set the strings manually for the labels."
msgstr ""

#: matplotlib.ticker:86 of
msgid "`FuncFormatter`"
msgstr ""

#: matplotlib.ticker:86 of
msgid "User defined function sets the labels."
msgstr ""

#: matplotlib.ticker:87 of
msgid "`StrMethodFormatter`"
msgstr ""

#: matplotlib.ticker:87 of
msgid "Use string `format` method."
msgstr ""

#: matplotlib.ticker:88 of
msgid "`FormatStrFormatter`"
msgstr ""

#: matplotlib.ticker:88 of
msgid "Use an old-style sprintf format string."
msgstr ""

#: matplotlib.ticker:89 of
msgid "`ScalarFormatter`"
msgstr ""

#: matplotlib.ticker:89 of
msgid "Default formatter for scalars: autopick the format string."
msgstr ""

#: matplotlib.ticker:91 of
msgid "`LogFormatter`"
msgstr ""

#: matplotlib.ticker:91 of
msgid "Formatter for log axes."
msgstr ""

#: matplotlib.ticker:92 of
msgid "`LogFormatterExponent`"
msgstr ""

#: matplotlib.ticker:92 matplotlib.ticker.LogFormatterExponent:2
#: matplotlib.ticker.LogFormatterMathtext:2 of
msgid "Format values for log axis using ``exponent = log_base(value)``."
msgstr ""

#: matplotlib.ticker:94 of
msgid "`LogFormatterMathtext`"
msgstr ""

#: matplotlib.ticker:94 of
msgid "Format values for log axis using ``exponent = log_base(value)`` using Math text."
msgstr ""

#: matplotlib.ticker:96 of
msgid "`LogFormatterSciNotation`"
msgstr ""

#: matplotlib.ticker:96 of
msgid "Format values for log axis using scientific notation."
msgstr ""

#: matplotlib.ticker:97 of
msgid "`LogitFormatter`"
msgstr ""

#: matplotlib.ticker:97 of
msgid "Probability formatter."
msgstr ""

#: matplotlib.ticker:98 of
msgid "`EngFormatter`"
msgstr ""

#: matplotlib.ticker:98 of
msgid "Format labels in engineering notation."
msgstr ""

#: matplotlib.ticker:99 of
msgid "`PercentFormatter`"
msgstr ""

#: matplotlib.ticker:99 of
msgid "Format labels as a percentage."
msgstr ""

#: matplotlib.ticker:102 of
msgid "You can derive your own formatter from the Formatter base class by simply overriding the ``__call__`` method. The formatter class has access to the axis view and data limits."
msgstr ""

#: matplotlib.ticker:106 of
msgid "To control the major and minor tick label formats, use one of the following methods::"
msgstr ""

#: matplotlib.ticker:114 of
msgid "In addition to a `.Formatter` instance, `~.Axis.set_major_formatter` and `~.Axis.set_minor_formatter` also accept a ``str`` or function.  ``str`` input will be internally replaced with an autogenerated `.StrMethodFormatter` with the input ``str``. For function input, a `.FuncFormatter` with the input function will be generated and used."
msgstr ""

#: matplotlib.ticker:120 of
msgid "See :doc:`/gallery/ticks/major_minor_demo` for an example of setting major and minor ticks. See the :mod:`matplotlib.dates` module for more information and examples of using date locators and formatters."
msgstr ""

#: matplotlib.ticker.AutoLocator:1 matplotlib.ticker.LogitLocator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.MaxNLocator`"
msgstr ""

#: matplotlib.ticker.AutoLocator:2 of
msgid "Dynamically find major tick positions. This is actually a subclass of `~matplotlib.ticker.MaxNLocator`, with parameters *nbins = 'auto'* and *steps = [1, 2, 2.5, 5, 10]*."
msgstr ""

#: matplotlib.ticker.AutoLocator:25 of
msgid "To know the values of the non-public parameters, please have a look to the defaults of `~matplotlib.ticker.MaxNLocator`."
msgstr ""

#: matplotlib.ticker.AutoMinorLocator:1 matplotlib.ticker.FixedLocator:1
#: matplotlib.ticker.IndexLocator:1 matplotlib.ticker.LinearLocator:1
#: matplotlib.ticker.LogLocator:1 matplotlib.ticker.MaxNLocator:1
#: matplotlib.ticker.MultipleLocator:1 matplotlib.ticker.NullLocator:1
#: matplotlib.ticker.SymmetricalLogLocator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.Locator`"
msgstr ""

#: matplotlib.ticker.AutoMinorLocator:2 of
msgid "Dynamically find minor tick positions based on the positions of major ticks. The scale must be linear with major ticks evenly spaced."
msgstr ""

#: matplotlib.ticker.AutoMinorLocator:24 of
msgid "*n* is the number of subdivisions of the interval between major ticks; e.g., n=2 will place a single minor tick midway between major ticks."
msgstr ""

#: matplotlib.ticker.AutoMinorLocator:28 of
msgid "If *n* is omitted or None, it will be set to 5 or 4."
msgstr ""

#: matplotlib.ticker.AutoMinorLocator.tick_values:2
#: matplotlib.ticker.IndexLocator.tick_values:2
#: matplotlib.ticker.LinearLocator.tick_values:2
#: matplotlib.ticker.Locator.tick_values:2
#: matplotlib.ticker.LogLocator.tick_values:2
#: matplotlib.ticker.LogitLocator.tick_values:2
#: matplotlib.ticker.MaxNLocator.tick_values:2
#: matplotlib.ticker.MultipleLocator.tick_values:2
#: matplotlib.ticker.SymmetricalLogLocator.tick_values:2 of
msgid "Return the values of the located ticks given **vmin** and **vmax**."
msgstr ""

#: matplotlib.ticker.AutoMinorLocator.tick_values:5
#: matplotlib.ticker.IndexLocator.tick_values:5
#: matplotlib.ticker.LinearLocator.tick_values:5
#: matplotlib.ticker.Locator.tick_values:5
#: matplotlib.ticker.LogLocator.tick_values:5
#: matplotlib.ticker.LogitLocator.tick_values:5
#: matplotlib.ticker.MaxNLocator.tick_values:5
#: matplotlib.ticker.MultipleLocator.tick_values:5
#: matplotlib.ticker.SymmetricalLogLocator.tick_values:5 of
msgid "To get tick locations with the vmin and vmax values defined automatically for the associated :attr:`axis` simply call the Locator instance::"
msgstr ""

#: matplotlib.ticker.EngFormatter:1 matplotlib.ticker.FixedFormatter:1
#: matplotlib.ticker.FormatStrFormatter:1 matplotlib.ticker.FuncFormatter:1
#: matplotlib.ticker.LogFormatter:1 matplotlib.ticker.LogitFormatter:1
#: matplotlib.ticker.NullFormatter:1 matplotlib.ticker.PercentFormatter:1
#: matplotlib.ticker.ScalarFormatter:1 matplotlib.ticker.StrMethodFormatter:1
#: of
msgid "Bases: :py:class:`matplotlib.ticker.Formatter`"
msgstr ""

#: matplotlib.ticker.EngFormatter:2 of
msgid "Format axis values using engineering prefixes to represent powers of 1000, plus a specified unit, e.g., 10 MHz instead of 1e7."
msgstr ""

#: matplotlib.ticker.EngFormatter matplotlib.ticker.LogFormatter
#: matplotlib.ticker.LogFormatter.label_minor matplotlib.ticker.LogLocator
#: matplotlib.ticker.LogitFormatter
#: matplotlib.ticker.LogitFormatter.set_minor_number
#: matplotlib.ticker.LogitFormatter.set_minor_threshold
#: matplotlib.ticker.LogitFormatter.use_overline matplotlib.ticker.LogitLocator
#: matplotlib.ticker.MaxNLocator matplotlib.ticker.MaxNLocator.set_params
#: matplotlib.ticker.PercentFormatter matplotlib.ticker.ScalarFormatter
#: matplotlib.ticker.ScalarFormatter.set_powerlimits
#: matplotlib.ticker.ScalarFormatter.set_useLocale
#: matplotlib.ticker.ScalarFormatter.set_useMathText
#: matplotlib.ticker.ScalarFormatter.set_useOffset
#: matplotlib.ticker.SymmetricalLogLocator of
msgid "Parameters"
msgstr ""

#: matplotlib.ticker.EngFormatter:31 of
msgid "**unit**"
msgstr ""

#: of
msgid "str, default: \"\""
msgstr ""

#: matplotlib.ticker.EngFormatter:30 of
msgid "Unit symbol to use, suitable for use with single-letter representations of powers of 1000. For example, 'Hz' or 'm'."
msgstr ""

#: matplotlib.ticker.EngFormatter:39 of
msgid "**places**"
msgstr ""

#: of
msgid "int, default: None"
msgstr ""

#: matplotlib.ticker.EngFormatter:34 of
#, python-format
msgid "Precision with which to display the number, specified in digits after the decimal point (there will be between one and three digits before the decimal point). If it is None, the formatting falls back to the floating point format '%g', which displays up to 6 *significant* digits, i.e. the equivalent value for *places* varies between 0 and 5 (inclusive)."
msgstr ""

#: matplotlib.ticker.EngFormatter:50 of
msgid "**sep**"
msgstr ""

#: of
msgid "str, default: \" \""
msgstr ""

#: matplotlib.ticker.EngFormatter:42 of
msgid "Separator used between the value and the prefix/unit. For example, one get '3.14 mV' if ``sep`` is \" \" (default) and '3.14mV' if ``sep`` is \"\". Besides the default behavior, some other useful options may be:"
msgstr ""

#: matplotlib.ticker.EngFormatter:47 of
msgid "``sep=\"\"`` to append directly the prefix/unit to the value;"
msgstr ""

#: matplotlib.ticker.EngFormatter:48 of
msgid "``sep=\"\\N{THIN SPACE}\"`` (``U+2009``);"
msgstr ""

#: matplotlib.ticker.EngFormatter:49 of
msgid "``sep=\"\\N{NARROW NO-BREAK SPACE}\"`` (``U+202F``);"
msgstr ""

#: matplotlib.ticker.EngFormatter:50 of
msgid "``sep=\"\\N{NO-BREAK SPACE}\"`` (``U+00A0``)."
msgstr ""

#: matplotlib.ticker.EngFormatter:54 of
msgid "**usetex** : bool, default: :rc:`text.usetex`"
msgstr ""

#: of
msgid "bool, default:"
msgstr ""

#: matplotlib.ticker.EngFormatter:53 of
msgid "To enable/disable the use of TeX's math mode for rendering the numbers in the formatter."
msgstr ""

#: matplotlib.ticker.EngFormatter:71 matplotlib.ticker.ScalarFormatter:11 of
msgid "**useMathText** : bool, default: :rc:`axes.formatter.use_mathtext`"
msgstr ""

#: matplotlib.ticker.EngFormatter:57 of
msgid "To enable/disable the use mathtext for rendering the numbers in the formatter."
msgstr ""

#: matplotlib.ticker.EngFormatter.format_eng:2 of
msgid "Format a number in engineering notation, appending a letter representing the power of 1000 of the original number. Some examples:"
msgstr ""

#: matplotlib.ticker.FixedFormatter:2 of
msgid "Return fixed strings for tick labels based only on position, not value."
msgstr ""

#: matplotlib.ticker.FixedFormatter:5 of
msgid "`.FixedFormatter` should only be used together with `.FixedLocator`. Otherwise, the labels may end up in unexpected positions."
msgstr ""

#: matplotlib.ticker.FixedFormatter:26 of
msgid "Set the sequence *seq* of strings that will be used for labels."
msgstr ""

#: matplotlib.ticker.FixedLocator:2 of
msgid "Tick locations are fixed.  If nbins is not None, the array of possible positions will be subsampled to keep the number of ticks <= nbins +1. The subsampling will be done so as to include the smallest absolute value; for example, if zero is included in the array of possibilities, then it is guaranteed to be one of the chosen ticks."
msgstr ""

#: matplotlib.ticker.FixedLocator.set_params:2
#: matplotlib.ticker.LinearLocator.set_params:2
#: matplotlib.ticker.LogLocator.set_params:2
#: matplotlib.ticker.LogitLocator.set_params:2
#: matplotlib.ticker.MultipleLocator.set_params:2
#: matplotlib.ticker.SymmetricalLogLocator.set_params:2 of
msgid "Set parameters within this locator."
msgstr ""

#: matplotlib.ticker.FixedLocator.tick_values:2
#: matplotlib.ticker.NullLocator.tick_values:2 of
msgid "Return the locations of the ticks."
msgstr ""

#: matplotlib.ticker.FixedLocator.tick_values:6 of
msgid "Because the values are fixed, vmin and vmax are not used in this method."
msgstr ""

#: matplotlib.ticker.FormatStrFormatter:2 of
msgid "Use an old-style ('%' operator) format string to format the tick."
msgstr ""

#: matplotlib.ticker.FormatStrFormatter:4 of
msgid "The format string should have a single variable format (%) in it. It will be applied to the value (not the position) of the tick."
msgstr ""

#: matplotlib.ticker.FormatStrFormatter:7 of
#, python-format
msgid "Negative numeric values will use a dash not a unicode minus, use mathtext to get a unicode minus by wrappping the format specifier with $ (e.g. \"$%g$\")."
msgstr ""

#: matplotlib.ticker.Formatter:1 matplotlib.ticker.Locator:1 of
msgid "Bases: :py:class:`matplotlib.ticker.TickHelper`"
msgstr ""

#: matplotlib.ticker.Formatter:2 of
msgid "Create a string based on a tick value and location."
msgstr ""

#: matplotlib.ticker.Formatter.fix_minus:2 of
msgid "Some classes may want to replace a hyphen for minus with the proper unicode symbol (U+2212) for typographical correctness.  This is a helper method to perform such a replacement when it is enabled via :rc:`axes.unicode_minus`."
msgstr ""

#: matplotlib.ticker.Formatter.format_data:2
#: matplotlib.ticker.LogFormatter.format_data:2
#: matplotlib.ticker.ScalarFormatter.format_data:2 of
msgid "Return the full string representation of the value with the position unspecified."
msgstr ""

#: matplotlib.ticker.Formatter.format_data_short:2
#: matplotlib.ticker.LogFormatter.format_data_short:2
#: matplotlib.ticker.LogitFormatter.format_data_short:2
#: matplotlib.ticker.ScalarFormatter.format_data_short:2 of
msgid "Return a short string version of the tick value."
msgstr ""

#: matplotlib.ticker.Formatter.format_data_short:4
#: matplotlib.ticker.LogFormatter.format_data_short:4
#: matplotlib.ticker.LogitFormatter.format_data_short:4
#: matplotlib.ticker.ScalarFormatter.format_data_short:4 of
msgid "Defaults to the position-independent long value."
msgstr ""

#: matplotlib.ticker.Formatter.format_ticks:2 of
msgid "Return the tick labels for all the ticks at once."
msgstr ""

#: matplotlib.ticker.Formatter.set_locs:2
#: matplotlib.ticker.LogitFormatter.set_locs:2
#: matplotlib.ticker.ScalarFormatter.set_locs:2 of
msgid "Set the locations of the ticks."
msgstr ""

#: matplotlib.ticker.Formatter.set_locs:4
#: matplotlib.ticker.LogitFormatter.set_locs:4
#: matplotlib.ticker.ScalarFormatter.set_locs:4 of
msgid "This method is called before computing the tick labels because some formatters need to know all tick locations to do so."
msgstr ""

#: matplotlib.ticker.FuncFormatter:2 of
msgid "Use a user-defined function for formatting."
msgstr ""

#: matplotlib.ticker.FuncFormatter:4 of
msgid "The function should take in two inputs (a tick value ``x`` and a position ``pos``), and return a string containing the corresponding tick label."
msgstr ""

#: matplotlib.ticker.IndexLocator:2 of
msgid "Place a tick on every multiple of some base number of points plotted, e.g., on every 5th point.  It is assumed that you are doing index plotting; i.e., the axis is 0, len(data).  This is mainly useful for x ticks."
msgstr ""

#: matplotlib.ticker.IndexLocator:26 of
msgid "Place ticks every *base* data point, starting at *offset*."
msgstr ""

#: matplotlib.ticker.IndexLocator.set_params:2 of
msgid "Set parameters within this locator"
msgstr ""

#: matplotlib.ticker.LinearLocator:2 of
msgid "Determine the tick locations"
msgstr ""

#: matplotlib.ticker.LinearLocator:4 of
msgid "The first time this function is called it will try to set the number of ticks to make a nice tick partitioning.  Thereafter the number of ticks will be fixed so that interactive navigation will be nice"
msgstr ""

#: matplotlib.ticker.LinearLocator:27 of
msgid "Use presets to set locs based on lom.  A dict mapping vmin, vmax->locs"
msgstr ""

#: matplotlib.ticker.LinearLocator.view_limits:2
#: matplotlib.ticker.LogLocator.view_limits:2
#: matplotlib.ticker.SymmetricalLogLocator.view_limits:2 of
msgid "Try to choose the view limits intelligently."
msgstr ""

#: matplotlib.ticker.Locator:2 of
msgid "Determine the tick locations;"
msgstr ""

#: matplotlib.ticker.Locator:4 of
msgid "Note that the same locator should not be used across multiple `~matplotlib.axis.Axis` because the locator stores references to the Axis data and view limits."
msgstr ""

#: matplotlib.ticker.Locator.nonsingular:2
#: matplotlib.ticker.LogLocator.nonsingular:2
#: matplotlib.ticker.LogitLocator.nonsingular:2 of
msgid "Adjust a range as needed to avoid singularities."
msgstr ""

#: matplotlib.ticker.Locator.nonsingular:4
#: matplotlib.ticker.LogLocator.nonsingular:4
#: matplotlib.ticker.LogitLocator.nonsingular:4 of
msgid "This method gets called during autoscaling, with ``(v0, v1)`` set to the data limits on the axes if the axes contains any data, or ``(-inf, +inf)`` if not."
msgstr ""

#: matplotlib.ticker.Locator.nonsingular:8
#: matplotlib.ticker.LogLocator.nonsingular:8
#: matplotlib.ticker.LogitLocator.nonsingular:8 of
msgid "If ``v0 == v1`` (possibly up to some floating point slop), this method returns an expanded interval around this value."
msgstr ""

#: matplotlib.ticker.Locator.nonsingular:10
#: matplotlib.ticker.LogLocator.nonsingular:10
#: matplotlib.ticker.LogitLocator.nonsingular:10 of
msgid "If ``(v0, v1) == (-inf, +inf)``, this method returns appropriate default view limits."
msgstr ""

#: matplotlib.ticker.Locator.nonsingular:12
#: matplotlib.ticker.LogLocator.nonsingular:12
#: matplotlib.ticker.LogitLocator.nonsingular:12 of
msgid "Otherwise, ``(v0, v1)`` is returned without modification."
msgstr ""

#: matplotlib.ticker.Locator.raise_if_exceeds:2 of
msgid "Log at WARNING level if *locs* is longer than `Locator.MAXTICKS`."
msgstr ""

#: matplotlib.ticker.Locator.raise_if_exceeds:4 of
msgid "This is intended to be called immediately before returning *locs* from ``__call__`` to inform users in case their Locator returns a huge number of ticks, causing Matplotlib to run out of memory."
msgstr ""

#: matplotlib.ticker.Locator.raise_if_exceeds:8 of
msgid "The \"strange\" name of this method dates back to when it would raise an exception instead of emitting a log."
msgstr ""

#: matplotlib.ticker.Locator.set_params:2 of
msgid "Do nothing, and raise a warning. Any locator class not supporting the set_params() function will call this."
msgstr ""

#: matplotlib.ticker.Locator.view_limits:2
#: matplotlib.ticker.MaxNLocator.view_limits:2 of
msgid "Select a scale for the range from vmin to vmax."
msgstr ""

#: matplotlib.ticker.Locator.view_limits:4
#: matplotlib.ticker.MaxNLocator.view_limits:4 of
msgid "Subclasses should override this method to change locator behaviour."
msgstr ""

#: matplotlib.ticker.LogFormatter:2 of
msgid "Base class for formatting ticks on a log or symlog scale."
msgstr ""

#: matplotlib.ticker.LogFormatter:4 of
msgid "It may be instantiated directly, or subclassed."
msgstr ""

#: matplotlib.ticker.LogFormatter:9 matplotlib.ticker.LogLocator:29 of
msgid "**base**"
msgstr ""

#: of
msgid "float, default: 10."
msgstr ""

#: matplotlib.ticker.LogFormatter:9 of
msgid "Base of the logarithm used in all calculations."
msgstr ""

#: matplotlib.ticker.LogFormatter:14
#: matplotlib.ticker.LogFormatter.label_minor:21 of
msgid "**labelOnlyBase**"
msgstr ""

#: of
msgid "bool, default: False"
msgstr ""

#: matplotlib.ticker.LogFormatter:12 of
msgid "If True, label ticks only at integer powers of base. This is normally True for major ticks and False for minor ticks."
msgstr ""

#: matplotlib.ticker.LogFormatter:26 of
msgid "**minor_thresholds**"
msgstr ""

#: of
msgid "(subset, all), default: (1, 0.4)"
msgstr ""

#: matplotlib.ticker.LogFormatter:17 of
msgid "If labelOnlyBase is False, these two numbers control the labeling of ticks that are not at integer powers of base; normally these are the minor ticks. The controlling parameter is the log of the axis data range.  In the typical case where base is 10 it is the number of decades spanned by the axis, so we can call it 'numdec'. If ``numdec <= all``, all minor ticks will be labeled.  If ``all < numdec <= subset``, then only a subset of minor ticks will be labeled, so as to avoid crowding. If ``numdec > subset`` then no minor ticks will be labeled."
msgstr ""

#: matplotlib.ticker.LogFormatter:38 of
msgid "**linthresh**"
msgstr ""

#: of
msgid "None or float, default: None"
msgstr ""

#: matplotlib.ticker.LogFormatter:29 of
msgid "If a symmetric log scale is in use, its ``linthresh`` parameter must be supplied here."
msgstr ""

#: matplotlib.ticker.LogFormatter:41 matplotlib.ticker.ScalarFormatter:26
#: matplotlib.ticker.SymmetricalLogLocator:50
#: matplotlib.ticker.TickHelper.set_bounds:15
#: matplotlib.ticker.TickHelper.set_data_interval:15
#: matplotlib.ticker.TickHelper.set_view_interval:15 of
msgid "Notes"
msgstr ""

#: matplotlib.ticker.LogFormatter:42 of
msgid "The `set_locs` method must be called to enable the subsetting logic controlled by the ``minor_thresholds`` parameter."
msgstr ""

#: matplotlib.ticker.LogFormatter:45 of
msgid "In some cases such as the colorbar, there is no distinction between major and minor ticks; the tick locations might be set manually, or by a locator that puts ticks at integer powers of base and at intermediate locations.  For this situation, disable the minor_thresholds logic by using ``minor_thresholds=(np.inf, np.inf)``, so that all ticks will be labeled."
msgstr ""

#: matplotlib.ticker.LogFormatter:52 of
msgid "To disable labeling of minor ticks when 'labelOnlyBase' is False, use ``minor_thresholds=(0, 0)``.  This is the default for the \"classic\" style."
msgstr ""

#: matplotlib.ticker.LogFormatter:58
#: matplotlib.ticker.ScalarFormatter.set_useOffset:29 of
msgid "Examples"
msgstr ""

#: matplotlib.ticker.LogFormatter:59 of
msgid "To label a subset of minor ticks when the view limits span up to 2 decades, and all of the ticks when zoomed in to 0.5 decades or less, use ``minor_thresholds=(2, 0.5)``."
msgstr ""

#: matplotlib.ticker.LogFormatter:63 of
msgid "To label all minor ticks when the view limits span up to 1.5 decades, use ``minor_thresholds=(1.5, 1.5)``."
msgstr ""

#: matplotlib.ticker.LogFormatter.base:2 of
msgid "Change the *base* for labeling."
msgstr ""

#: matplotlib.ticker.LogFormatter.base:5 of
msgid "Should always match the base used for :class:`LogLocator`"
msgstr ""

#: matplotlib.ticker.LogFormatter.label_minor:2 of
msgid "Switch minor tick labeling on or off."
msgstr ""

#: of
msgid "bool"
msgstr ""

#: matplotlib.ticker.LogFormatter.label_minor:8 of
msgid "If True, label ticks only at integer powers of base."
msgstr ""

#: matplotlib.ticker.LogFormatter.set_locs:2 of
msgid "Use axis view limits to control which ticks are labeled."
msgstr ""

#: matplotlib.ticker.LogFormatter.set_locs:4 of
msgid "The *locs* parameter is ignored in the present algorithm."
msgstr ""

#: matplotlib.ticker.LogFormatterExponent:1
#: matplotlib.ticker.LogFormatterMathtext:1 of
msgid "Bases: :py:class:`matplotlib.ticker.LogFormatter`"
msgstr ""

#: matplotlib.ticker.LogFormatterSciNotation:1 of
msgid "Bases: :py:class:`matplotlib.ticker.LogFormatterMathtext`"
msgstr ""

#: matplotlib.ticker.LogFormatterSciNotation:2 of
msgid "Format values following scientific notation in a logarithmic axis."
msgstr ""

#: matplotlib.ticker.LogLocator:2 of
msgid "Determine the tick locations for log axes"
msgstr ""

#: matplotlib.ticker.LogLocator:23 of
msgid "Place ticks on the locations : subs[j] * base**i"
msgstr ""

#: of
msgid "float, default: 10.0"
msgstr ""

#: matplotlib.ticker.LogLocator:29 of
msgid "The base of the log used, so ticks are placed at ``base**n``."
msgstr ""

#: matplotlib.ticker.LogLocator:41 matplotlib.ticker.SymmetricalLogLocator:47
#: of
msgid "**subs**"
msgstr ""

#: of
msgid "None or str or sequence of float, default: (1.0,)"
msgstr ""

#: matplotlib.ticker.LogLocator:32 of
msgid "Gives the multiples of integer powers of the base at which to place ticks.  The default places ticks only at integer powers of the base. The permitted string values are ``'auto'`` and ``'all'``, both of which use an algorithm based on the axis view limits to determine whether and how to put ticks between integer powers of the base.  With ``'auto'``, ticks are placed only between integer powers; with ``'all'``, the integer powers are included.  A value of None is equivalent to ``'auto'``."
msgstr ""

#: matplotlib.ticker.LogLocator:60 of
msgid "**numticks**"
msgstr ""

#: of
msgid "None or int, default: None"
msgstr ""

#: matplotlib.ticker.LogLocator:44 of
msgid "The maximum number of ticks to allow on a given axis. The default of ``None`` will try to choose intelligently as long as this Locator has already been assigned to an axis using `~.axis.Axis.get_tick_space`, but otherwise falls back to 9."
msgstr ""

#: matplotlib.ticker.LogLocator.base:2 of
msgid "Set the log base (major tick every ``base**i``, i integer)."
msgstr ""

#: matplotlib.ticker.LogLocator.subs:2 of
msgid "Set the minor ticks for the log scaling every ``base**i*subs[j]``."
msgstr ""

#: matplotlib.ticker.LogitFormatter:2 of
msgid "Probability formatter (using Math text)."
msgstr ""

#: matplotlib.ticker.LogitFormatter:30
#: matplotlib.ticker.LogitFormatter.use_overline:22 of
msgid "**use_overline**"
msgstr ""

#: matplotlib.ticker.LogitFormatter:29
#: matplotlib.ticker.LogitFormatter.use_overline:8 of
msgid "If x > 1/2, with x = 1-v, indicate if x should be displayed as $\\overline{v}$. The default is to display $1-v$."
msgstr ""

#: matplotlib.ticker.LogitFormatter:33 of
msgid "**one_half** : str, default: r\"\\frac{1}{2}\""
msgstr ""

#: of
msgid "str, default: r\"\\frac{1}{2}\""
msgstr ""

#: matplotlib.ticker.LogitFormatter:33
#: matplotlib.ticker.LogitFormatter.set_one_half:5 of
msgid "The string used to represent 1/2."
msgstr ""

#: matplotlib.ticker.LogitFormatter:39 matplotlib.ticker.LogitLocator:45 of
msgid "**minor**"
msgstr ""

#: matplotlib.ticker.LogitFormatter:36 of
msgid "Indicate if the formatter is formatting minor ticks or not. Basically minor ticks are not labelled, except when only few ticks are provided, ticks with most space with neighbor ticks are labelled. See other parameters to change the default behavior."
msgstr ""

#: matplotlib.ticker.LogitFormatter:43
#: matplotlib.ticker.LogitFormatter.set_minor_threshold:22 of
msgid "**minor_threshold**"
msgstr ""

#: of
msgid "int, default: 25"
msgstr ""

#: matplotlib.ticker.LogitFormatter:42 of
msgid "Maximum number of locs for labelling some minor ticks. This parameter have no effect if minor is False."
msgstr ""

#: matplotlib.ticker.LogitFormatter:60
#: matplotlib.ticker.LogitFormatter.set_minor_number:23 of
msgid "**minor_number**"
msgstr ""

#: of
msgid "int, default: 6"
msgstr ""

#: matplotlib.ticker.LogitFormatter:46
#: matplotlib.ticker.LogitFormatter.set_minor_number:9 of
msgid "Number of ticks which are labelled when the number of ticks is below the threshold."
msgstr ""

#: matplotlib.ticker.LogitFormatter.set_minor_number:2 of
msgid "Set the number of minor ticks to label when some minor ticks are labelled."
msgstr ""

#: of
msgid "int"
msgstr ""

#: matplotlib.ticker.LogitFormatter.set_minor_threshold:2 of
msgid "Set the threshold for labelling minors ticks."
msgstr ""

#: matplotlib.ticker.LogitFormatter.set_minor_threshold:8 of
msgid "Maximum number of locations for labelling some minor ticks. This parameter have no effect if minor is False."
msgstr ""

#: matplotlib.ticker.LogitFormatter.set_one_half:2 of
msgid "Set the way one half is displayed."
msgstr ""

#: matplotlib.ticker.LogitFormatter.set_one_half:19 of
msgid "one_half : str, default: r\"\\frac{1}{2}\""
msgstr ""

#: matplotlib.ticker.LogitFormatter.use_overline:2 of
msgid "Switch display mode with overline for labelling p>1/2."
msgstr ""

#: matplotlib.ticker.LogitLocator:2 of
msgid "Determine the tick locations for logit axes"
msgstr ""

#: matplotlib.ticker.LogitLocator:23 of
msgid "Place ticks on the logit locations"
msgstr ""

#: matplotlib.ticker.LogitLocator:29 matplotlib.ticker.MaxNLocator:32
#: matplotlib.ticker.MaxNLocator.set_params:8 of
msgid "**nbins**"
msgstr ""

#: of
msgid "int or 'auto', optional"
msgstr ""

#: matplotlib.ticker.LogitLocator:29 of
msgid "Number of ticks. Only used if minor is False."
msgstr ""

#: matplotlib.ticker.LogitLocator:32 of
msgid "Indicate if this locator is for minor ticks or not."
msgstr ""

#: matplotlib.ticker.MaxNLocator:2 of
msgid "Find nice tick locations with no more than N being within the view limits. Locations beyond the limits are added to support autoscaling."
msgstr ""

#: of
msgid "int or 'auto', default: 10"
msgstr ""

#: matplotlib.ticker.MaxNLocator:30 of
msgid "Maximum number of intervals; one less than max number of ticks.  If the string 'auto', the number of bins will be automatically determined based on the length of the axis."
msgstr ""

#: matplotlib.ticker.MaxNLocator:40 matplotlib.ticker.MaxNLocator.set_params:11
#: of
msgid "**steps**"
msgstr ""

#: of
msgid "array-like, optional"
msgstr ""

#: matplotlib.ticker.MaxNLocator:35 of
msgid "Sequence of nice numbers starting with 1 and ending with 10; e.g., [1, 2, 4, 5, 10], where the values are acceptable tick multiples.  i.e. for the example, 20, 40, 60 would be an acceptable set of ticks, as would 0.4, 0.6, 0.8, because they are multiples of 2.  However, 30, 60, 90 would not be allowed because 3 does not appear in the list of steps."
msgstr ""

#: matplotlib.ticker.MaxNLocator:44 matplotlib.ticker.MaxNLocator.set_params:14
#: of
msgid "**integer**"
msgstr ""

#: matplotlib.ticker.MaxNLocator:43 of
msgid "If True, ticks will take only integer values, provided at least *min_n_ticks* integers are found within the view limits."
msgstr ""

#: matplotlib.ticker.MaxNLocator:47 matplotlib.ticker.MaxNLocator.set_params:17
#: of
msgid "**symmetric**"
msgstr ""

#: matplotlib.ticker.MaxNLocator:47 of
msgid "If True, autoscaling will result in a range symmetric about zero."
msgstr ""

#: matplotlib.ticker.MaxNLocator:56 matplotlib.ticker.MaxNLocator.set_params:20
#: of
msgid "**prune**"
msgstr ""

#: of
msgid "{'lower', 'upper', 'both', None}, default: None"
msgstr ""

#: matplotlib.ticker.MaxNLocator:50 of
msgid "Remove edge ticks -- useful for stacked or ganged plots where the upper tick of one axes overlaps with the lower tick of the axes above it, primarily when :rc:`axes.autolimit_mode` is ``'round_numbers'``.  If ``prune=='lower'``, the smallest tick will be removed.  If ``prune == 'upper'``, the largest tick will be removed.  If ``prune == 'both'``, the largest and smallest ticks will be removed.  If *prune* is *None*, no ticks will be removed."
msgstr ""

#: matplotlib.ticker.MaxNLocator:73 matplotlib.ticker.MaxNLocator.set_params:36
#: of
msgid "**min_n_ticks**"
msgstr ""

#: of
msgid "int, default: 2"
msgstr ""

#: matplotlib.ticker.MaxNLocator:59 of
msgid "Relax *nbins* and *integer* constraints if necessary to obtain this minimum number of ticks."
msgstr ""

#: matplotlib.ticker.MaxNLocator.set_params:2 of
msgid "Set parameters for this locator."
msgstr ""

#: matplotlib.ticker.MaxNLocator.set_params:8
#: matplotlib.ticker.MaxNLocator.set_params:11
#: matplotlib.ticker.MaxNLocator.set_params:14
#: matplotlib.ticker.MaxNLocator.set_params:17
#: matplotlib.ticker.MaxNLocator.set_params:20
#: matplotlib.ticker.MaxNLocator.set_params:23 of
msgid "see `.MaxNLocator`"
msgstr ""

#: of
msgid "bool, optional"
msgstr ""

#: of
msgid "{'lower', 'upper', 'both', None}, optional"
msgstr ""

#: of
msgid "int, optional"
msgstr ""

#: matplotlib.ticker.MultipleLocator:2 of
msgid "Set a tick on each integer multiple of a base within the view interval."
msgstr ""

#: matplotlib.ticker.MultipleLocator.view_limits:2 of
msgid "Set the view limits to the nearest multiples of base that contain the data."
msgstr ""

#: matplotlib.ticker.NullFormatter:2 of
msgid "Always return the empty string."
msgstr ""

#: matplotlib.ticker.NullLocator:2 of
msgid "No ticks"
msgstr ""

#: matplotlib.ticker.NullLocator.tick_values:6 of
msgid "Because the values are Null, vmin and vmax are not used in this method."
msgstr ""

#: matplotlib.ticker.PercentFormatter:2 of
msgid "Format numbers as a percentage."
msgstr ""

#: matplotlib.ticker.PercentFormatter:12 of
msgid "**xmax**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.ticker.PercentFormatter:8 of
msgid "Determines how the number is converted into a percentage. *xmax* is the data value that corresponds to 100%. Percentages are computed as ``x / xmax * 100``. So if the data is already scaled to be percentages, *xmax* will be 100. Another common situation is where *xmax* is 1.0."
msgstr ""

#: matplotlib.ticker.PercentFormatter:16 of
msgid "**decimals**"
msgstr ""

#: of
msgid "None or int"
msgstr ""

#: matplotlib.ticker.PercentFormatter:15 of
msgid "The number of decimal places to place after the point. If *None* (the default), the number will be computed automatically."
msgstr ""

#: matplotlib.ticker.PercentFormatter:22 of
msgid "**symbol**"
msgstr ""

#: of
msgid "str or None"
msgstr ""

#: matplotlib.ticker.PercentFormatter:19 of
msgid "A string that will be appended to the label. It may be *None* or empty to indicate that no symbol should be used. LaTeX special characters are escaped in *symbol* whenever latex mode is enabled, unless *is_latex* is *True*."
msgstr ""

#: matplotlib.ticker.PercentFormatter:38 of
msgid "**is_latex**"
msgstr ""

#: matplotlib.ticker.PercentFormatter:25 of
msgid "If *False*, reserved LaTeX characters in *symbol* will be escaped."
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:2 of
msgid "Format the number as a percentage number with the correct number of decimals and adds the percent symbol, if any."
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:5 of
msgid "If ``self.decimals`` is `None`, the number of digits after the decimal point is set based on the *display_range* of the axis as follows:"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "display_range"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "decimals"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:10 of
msgid "sample"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid ">50"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid "0"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:12 of
msgid "``x = 34.5`` => 35%"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid ">5"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid "1"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:14 of
msgid "``x = 34.5`` => 34.5%"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid ">0.5"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid "2"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:16 of
msgid "``x = 34.5`` => 34.50%"
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:18 of
msgid "..."
msgstr ""

#: matplotlib.ticker.PercentFormatter.format_pct:21 of
msgid "This method will not be very good for tiny axis ranges or extremely large ones. It assumes that the values on the chart are percentages displayed on a reasonable scale."
msgstr ""

#: matplotlib.ticker.PercentFormatter.symbol:2 of
msgid "The configured percent symbol as a string."
msgstr ""

#: matplotlib.ticker.PercentFormatter.symbol:4 of
msgid "If LaTeX is enabled via :rc:`text.usetex`, the special characters ``{'#', '$', '%', '&', '~', '_', '^', '\\', '{', '}'}`` are automatically escaped in the string."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:2 of
msgid "Format tick values as a number."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:8 of
msgid "**useOffset** : bool or float, default: :rc:`axes.formatter.useoffset`"
msgstr ""

#: of
msgid "bool or float, default:"
msgstr ""

#: matplotlib.ticker.ScalarFormatter:8 of
msgid "Whether to use offset notation. See `.set_useOffset`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:11 of
msgid "Whether to use fancy math formatting. See `.set_useMathText`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:23 of
msgid "**useLocale** : bool, default: :rc:`axes.formatter.use_locale`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:14 of
msgid "Whether to use locale settings for decimal sign and positive sign. See `.set_useLocale`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:27 of
msgid "In addition to the parameters above, the formatting of scientific vs. floating point representation can be configured via `.set_scientific` and `.set_powerlimits`)."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:31 of
msgid "**Offset notation and scientific notation**"
msgstr ""

#: matplotlib.ticker.ScalarFormatter:33 of
msgid "Offset notation and scientific notation look quite similar at first sight. Both split some information from the formatted tick values and display it at the end of the axis."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:37 of
msgid "The scientific notation splits up the order of magnitude, i.e. a multiplicative scaling factor, e.g. ``1e6``."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:40 of
msgid "The offset notation separates an additive constant, e.g. ``+1e6``. The offset notation label is always prefixed with a ``+`` or ``-`` sign and is thus distinguishable from the order of magnitude label."
msgstr ""

#: matplotlib.ticker.ScalarFormatter:44 of
msgid "The following plot with x limits ``1_000_000`` to ``1_000_010`` illustrates the different formatting. Note the labels at the right edge of the x axis."
msgstr ""

#: ../../api/ticker_api.rst:7
msgid "(`Source code <../api/ticker_api-1.py>`__, `png <../api/ticker_api-1.png>`__, `pdf <../api/ticker_api-1.pdf>`__)"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_offset:2 of
msgid "Return scientific notation, plus offset."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useLocale:2
#: matplotlib.ticker.ScalarFormatter.useLocale:2 of
msgid "Return whether locale settings are used for formatting."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useLocale:16
#: matplotlib.ticker.ScalarFormatter.useLocale:16 of
msgid ":obj:`ScalarFormatter.set_useLocale`"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useMathText:2
#: matplotlib.ticker.ScalarFormatter.useMathText:2 of
msgid "Return whether to use fancy math formatting."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useMathText:16
#: matplotlib.ticker.ScalarFormatter.useMathText:16 of
msgid ":obj:`ScalarFormatter.set_useMathText`"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useOffset:2
#: matplotlib.ticker.ScalarFormatter.useOffset:2 of
msgid "Return whether automatic mode for offset notation is active."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useOffset:4
#: matplotlib.ticker.ScalarFormatter.useOffset:4 of
msgid "This returns True if ``set_useOffset(True)``; it returns False if an explicit offset was set, e.g. ``set_useOffset(1000)``."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.get_useOffset:18
#: matplotlib.ticker.ScalarFormatter.useOffset:18 of
msgid ":obj:`ScalarFormatter.set_useOffset`"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:2 of
msgid "Set size thresholds for scientific notation."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:32 of
msgid "**lims**"
msgstr ""

#: of
msgid "(int, int)"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:8 of
msgid "A tuple *(min_exp, max_exp)* containing the powers of 10 that determine the switchover threshold. For a number representable as :math:`a \\times 10^\\mathrm{exp}`` with :math:`1 <= |a| < 10`, scientific notation will be used if ``exp <= min_exp`` or ``exp >= max_exp``."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:14 of
msgid "The default limits are controlled by :rc:`axes.formatter.limits`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:16 of
msgid "In particular numbers with *exp* equal to the thresholds are written in scientific notation."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:19 of
msgid "Typically, *min_exp* will be negative and *max_exp* will be positive."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:22 of
msgid "For example, ``formatter.set_powerlimits((-3, 4))`` will provide the following formatting: :math:`1 \\times 10^{-3}, 9.9 \\times 10^{-3}, 0.01,` :math:`9999, 1 \\times 10^4`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_powerlimits:37 of
msgid ":obj:`ScalarFormatter.set_scientific`"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_scientific:2 of
msgid "Turn scientific notation on or off."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_scientific:16 of
msgid ":obj:`ScalarFormatter.set_powerlimits`"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useLocale:2 of
msgid "Set whether to use locale settings for decimal sign and positive sign."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useLocale:21
#: matplotlib.ticker.ScalarFormatter.set_useMathText:22
#: matplotlib.ticker.ScalarFormatter.set_useOffset:26 of
msgid "**val**"
msgstr ""

#: of
msgid "bool or None"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useLocale:8 of
msgid "*None* resets to :rc:`axes.formatter.use_locale`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useMathText:2 of
msgid "Set whether to use fancy math formatting."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useMathText:4 of
msgid "If active, scientific notation is formatted as :math:`1.2 \\times 10^3`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useMathText:9 of
msgid "*None* resets to :rc:`axes.formatter.use_mathtext`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:2 of
msgid "Set whether to use offset notation."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:4 of
msgid "When formatting a set numbers whose value is large compared to their range, the formatter can separate an additive constant. This can shorten the formatted numbers so that they are less likely to overlap when drawn on an axis."
msgstr ""

#: of
msgid "bool or float"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:12 of
msgid "If False, do not use offset notation."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:13 of
msgid "If True (=automatic mode), use offset notation if it can make the residual numbers significantly shorter. The exact behavior is controlled by :rc:`axes.formatter.offset_threshold`."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:16 of
msgid "If a number, force an offset of the given value."
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:30 of
msgid "With active offset notation, the values"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:32 of
msgid "``100_000, 100_002, 100_004, 100_006, 100_008``"
msgstr ""

#: matplotlib.ticker.ScalarFormatter.set_useOffset:34 of
msgid "will be formatted as ``0, 2, 4, 6, 8`` plus an offset ``+1e5``, which is written to the edge of the axis."
msgstr ""

#: matplotlib.ticker.StrMethodFormatter:2 of
msgid "Use a new-style format string (as used by `str.format`) to format the tick."
msgstr ""

#: matplotlib.ticker.StrMethodFormatter:4 of
msgid "The field used for the tick value must be labeled *x* and the field used for the tick position must be labeled *pos*."
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:2 of
msgid "Determine the tick locations for symmetric log axes."
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:29 of
msgid "**transform** : `~.scale.SymmetricalLogTransform`, optional"
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:28 of
msgid "SymmetricalLogTransform, optional"
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:29 of
msgid "If set, defines the *base* and *linthresh* of the symlog transform."
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:34 of
msgid "**base, linthresh**"
msgstr ""

#: of
msgid "float, optional"
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:32 of
msgid "The *base* and *linthresh* of the symlog transform, as documented for `.SymmetricalLogScale`.  These parameters are only used if *transform* is not set."
msgstr ""

#: of
msgid "sequence of float, default: [1]"
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:37 of
msgid "The multiples of integer powers of the base where ticks are placed, i.e., ticks are placed at ``[sub * base**i for i in ... for sub in subs]``."
msgstr ""

#: matplotlib.ticker.SymmetricalLogLocator:51 of
msgid "Either *transform*, or both *base* and *linthresh*, must be given."
msgstr ""

#: matplotlib.ticker.TickHelper:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.ticker.TickHelper.set_bounds:2
#: matplotlib.ticker.TickHelper.set_data_interval:2
#: matplotlib.ticker.TickHelper.set_view_interval:2 of
msgid "[*Deprecated*]"
msgstr ""

#: matplotlib.ticker.TickHelper.set_bounds:16
#: matplotlib.ticker.TickHelper.set_data_interval:16
#: matplotlib.ticker.TickHelper.set_view_interval:16 of
msgid "\\"
msgstr ""

