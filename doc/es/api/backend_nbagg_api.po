msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:23\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_nbagg_api.po\n"
"X-Crowdin-File-ID: 1734\n"
"Language: es_ES\n"

#: ../../api/backend_nbagg_api.rst:2
msgid ":mod:`.backend_nbagg`"
msgstr ""

#: matplotlib.backends.backend_nbagg:1 of
msgid "Interactive figures in the IPython notebook."
msgstr ""

#: matplotlib.backends.backend_nbagg.CommSocket:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.backends.backend_nbagg.CommSocket:2 of
msgid "Manages the Comm connection between IPython and the browser (client)."
msgstr ""

#: matplotlib.backends.backend_nbagg.CommSocket:4 of
msgid "Comms are 2 way, with the CommSocket being able to publish a message via the send_json method, and handle a message with on_message. On the JS side figure.send_message and figure.ws.onmessage do the sending and receiving respectively."
msgstr ""

#: matplotlib.backends.backend_nbagg.FigureCanvasNbAgg:1 of
msgid "Bases: :py:class:`matplotlib.backends.backend_webagg_core.FigureCanvasWebAggCore`"
msgstr ""

#: matplotlib.backends.backend_nbagg.FigureManagerNbAgg:1 of
msgid "Bases: :py:class:`matplotlib.backends.backend_webagg_core.FigureManagerWebAgg`"
msgstr ""

#: matplotlib.backends.backend_nbagg.FigureManagerNbAgg.clearup_closed:2 of
msgid "Clear up any closed Comms."
msgstr ""

#: matplotlib.backends.backend_nbagg.FigureManagerNbAgg.reshow:2 of
msgid "A special method to re-show the figure in the notebook."
msgstr ""

#: matplotlib.backends.backend_nbagg.FigureManagerNbAgg.show:2 of
msgid "For GUI backends, show the figure window and redraw. For non-GUI backends, raise an exception, unless running headless (i.e. on Linux with an unset DISPLAY); this exception is converted to a warning in `.Figure.show`."
msgstr ""

#: matplotlib.backends.backend_nbagg.NavigationIPy:1 of
msgid "Bases: :py:class:`matplotlib.backends.backend_webagg_core.NavigationToolbar2WebAgg`"
msgstr ""

#: matplotlib.backends.backend_nbagg.connection_info:2 of
msgid "Return a string showing the figure and connection status for the backend."
msgstr ""

#: matplotlib.backends.backend_nbagg.connection_info:4 of
msgid "This is intended as a diagnostic tool, and not for general use."
msgstr ""

#: matplotlib.backends.backend_nbagg._BackendNbAgg.new_figure_manager_given_figure:2
#: of
msgid "Create a new figure manager instance for the given figure."
msgstr ""

#: matplotlib.backends.backend_nbagg._BackendNbAgg.show:2 of
msgid "Show all figures."
msgstr ""

#: matplotlib.backends.backend_nbagg._BackendNbAgg.show:4 of
msgid "`show` blocks by calling `mainloop` if *block* is ``True``, or if it is ``None`` and we are neither in IPython's ``%pylab`` mode, nor in `interactive` mode."
msgstr ""

