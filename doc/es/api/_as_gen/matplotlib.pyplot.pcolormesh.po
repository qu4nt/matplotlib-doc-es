msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:17\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/_as_gen/matplotlib.pyplot.pcolormesh.po\n"
"X-Crowdin-File-ID: 1228\n"
"Language: es_ES\n"

#: ../../api/_as_gen/matplotlib.pyplot.pcolormesh.rst:2
msgid "matplotlib.pyplot.pcolormesh"
msgstr ""

#: matplotlib.pyplot.pcolormesh:2 of
msgid "Create a pseudocolor plot with a non-regular rectangular grid."
msgstr ""

#: matplotlib.pyplot.pcolormesh:4 of
msgid "Call signature::"
msgstr ""

#: matplotlib.pyplot.pcolormesh:8 of
msgid "*X* and *Y* can be used to specify the corners of the quadrilaterals."
msgstr ""

#: matplotlib.pyplot.pcolormesh:12 of
msgid "`~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster and preferred in most cases. For a detailed discussion on the differences see :ref:`Differences between pcolor() and pcolormesh() <differences-pcolor-pcolormesh>`."
msgstr ""

#: matplotlib.pyplot.pcolormesh of
msgid "Parameters"
msgstr ""

#: matplotlib.pyplot.pcolormesh:20 of
msgid "**C**"
msgstr ""

#: of
msgid "2D array-like"
msgstr ""

#: matplotlib.pyplot.pcolormesh:20 of
msgid "The color-mapped values."
msgstr ""

#: matplotlib.pyplot.pcolormesh:49 of
msgid "**X, Y**"
msgstr ""

#: of
msgid "array-like, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:23 of
msgid "The coordinates of the corners of quadrilaterals of a pcolormesh::"
msgstr ""

#: matplotlib.pyplot.pcolormesh:31 of
msgid "Note that the column index corresponds to the x-coordinate, and the row index corresponds to y. For details, see the :ref:`Notes <axes-pcolormesh-grid-orientation>` section below."
msgstr ""

#: matplotlib.pyplot.pcolormesh:35 of
msgid "If ``shading='flat'`` the dimensions of *X* and *Y* should be one greater than those of *C*, and the quadrilateral is colored due to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal dimensions, a warning will be raised and the last row and column of *C* will be ignored."
msgstr ""

#: matplotlib.pyplot.pcolormesh:41 of
msgid "If ``shading='nearest'`` or ``'gouraud'``, the dimensions of *X* and *Y* should be the same as those of *C* (if not, a ValueError will be raised).  For ``'nearest'`` the color ``C[i, j]`` is centered on ``(X[i, j], Y[i, j])``.  For ``'gouraud'``, a smooth interpolation is caried out between the quadrilateral corners."
msgstr ""

#: matplotlib.pyplot.pcolormesh:47 of
msgid "If *X* and/or *Y* are 1-D arrays or column vectors they will be expanded as needed into the appropriate 2D arrays, making a rectangular grid."
msgstr ""

#: matplotlib.pyplot.pcolormesh:53 of
msgid "**cmap** : str or `~matplotlib.colors.Colormap`, default: :rc:`image.cmap`"
msgstr ""

#: of
msgid "str or"
msgstr ""

#: matplotlib.pyplot.pcolormesh:52 of
msgid "A Colormap instance or registered colormap name. The colormap maps the *C* values to colors."
msgstr ""

#: matplotlib.pyplot.pcolormesh:58 of
msgid "**norm** : `~matplotlib.colors.Normalize`, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:57 of
msgid "Normalize, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:56 of
msgid "The Normalize instance scales the data values to the canonical colormap range [0, 1] for mapping to colors. By default, the data range is mapped to the colorbar range using linear scaling."
msgstr ""

#: matplotlib.pyplot.pcolormesh:65 of
msgid "**vmin, vmax**"
msgstr ""

#: of
msgid "float, default: None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:61 of
msgid "The colorbar range. If *None*, suitable min/max values are automatically chosen by the `.Normalize` instance (defaults to the respective min/max values of *C* in case of the default linear scaling). It is an error to use *vmin*/*vmax* when *norm* is given."
msgstr ""

#: matplotlib.pyplot.pcolormesh:76 of
msgid "**edgecolors**"
msgstr ""

#: of
msgid "{'none', None, 'face', color, color sequence}, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:68 of
msgid "The color of the edges. Defaults to 'none'. Possible values:"
msgstr ""

#: matplotlib.pyplot.pcolormesh:70 of
msgid "'none' or '': No edge."
msgstr ""

#: matplotlib.pyplot.pcolormesh:71 of
msgid "*None*: :rc:`patch.edgecolor` will be used. Note that currently :rc:`patch.force_edgecolor` has to be True for this to work."
msgstr ""

#: matplotlib.pyplot.pcolormesh:73 of
msgid "'face': Use the adjacent face color."
msgstr ""

#: matplotlib.pyplot.pcolormesh:74 of
msgid "A color or sequence of colors will set the edge color."
msgstr ""

#: matplotlib.pyplot.pcolormesh:76 of
msgid "The singular form *edgecolor* works as an alias."
msgstr ""

#: matplotlib.pyplot.pcolormesh:79 of
msgid "**alpha**"
msgstr ""

#: matplotlib.pyplot.pcolormesh:79 of
msgid "The alpha blending value, between 0 (transparent) and 1 (opaque)."
msgstr ""

#: matplotlib.pyplot.pcolormesh:103 of
msgid "**shading**"
msgstr ""

#: of
msgid "{'flat', 'nearest', 'gouraud', 'auto'}, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:82 of
msgid "The fill style for the quadrilateral; defaults to 'flat' or :rc:`pcolor.shading`. Possible values:"
msgstr ""

#: matplotlib.pyplot.pcolormesh:85 of
msgid "'flat': A solid color is used for each quad. The color of the quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by ``C[i, j]``. The dimensions of *X* and *Y* should be one greater than those of *C*; if they are the same as *C*, then a deprecation warning is raised, and the last row and column of *C* are dropped."
msgstr ""

#: matplotlib.pyplot.pcolormesh:91 of
msgid "'nearest': Each grid point will have a color centered on it, extending halfway between the adjacent grid centers.  The dimensions of *X* and *Y* must be the same as *C*."
msgstr ""

#: matplotlib.pyplot.pcolormesh:94 of
msgid "'gouraud': Each quad will be Gouraud shaded: The color of the corners (i', j') are given by ``C[i', j']``. The color values of the area in between is interpolated from the corner values. The dimensions of *X* and *Y* must be the same as *C*. When Gouraud shading is used, *edgecolors* is ignored."
msgstr ""

#: matplotlib.pyplot.pcolormesh:99 of
msgid "'auto': Choose 'flat' if dimensions of *X* and *Y* are one larger than *C*.  Choose 'nearest' if dimensions are the same."
msgstr ""

#: matplotlib.pyplot.pcolormesh:102 of
msgid "See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids` for more description."
msgstr ""

#: matplotlib.pyplot.pcolormesh:106 of
msgid "**snap**"
msgstr ""

#: of
msgid "bool, default: False"
msgstr ""

#: matplotlib.pyplot.pcolormesh:106 of
msgid "Whether to snap the mesh to pixel boundaries."
msgstr ""

#: matplotlib.pyplot.pcolormesh:111 of
msgid "**rasterized**"
msgstr ""

#: of
msgid "bool, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:109 of
msgid "Rasterize the pcolormesh when drawing vector graphics.  This can speed up rendering and produce smaller files for large data sets. See also :doc:`/gallery/misc/rasterization_demo`."
msgstr ""

#: matplotlib.pyplot.pcolormesh of
msgid "Returns"
msgstr ""

#: matplotlib.pyplot.pcolormesh:118 of
msgid "`matplotlib.collections.QuadMesh`"
msgstr ""

#: matplotlib.pyplot.pcolormesh of
msgid "Other Parameters"
msgstr ""

#: matplotlib.pyplot.pcolormesh:124 of
msgid "**data**"
msgstr ""

#: of
msgid "indexable object, optional"
msgstr ""

#: matplotlib.pyplot.pcolormesh:123 of
msgid "If given, all parameters also accept a string ``s``, which is interpreted as ``data[s]`` (unless this raises an exception)."
msgstr ""

#: matplotlib.pyplot.pcolormesh:175 of
msgid "**\\*\\*kwargs**"
msgstr ""

#: matplotlib.pyplot.pcolormesh:127 of
msgid "Additionally, the following arguments are allowed. They are passed along to the `~matplotlib.collections.QuadMesh` constructor:"
msgstr ""

#: matplotlib.pyplot.pcolormesh:134 of
msgid "Property"
msgstr ""

#: matplotlib.pyplot.pcolormesh:134 of
msgid "Description"
msgstr ""

#: matplotlib.pyplot.pcolormesh:136 of
msgid ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:136 of
msgid "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array"
msgstr ""

#: matplotlib.pyplot.pcolormesh:137 of
msgid ":meth:`alpha <matplotlib.collections.Collection.set_alpha>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:137 of
msgid "array-like or scalar or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:138 of
msgid ":meth:`animated <matplotlib.artist.Artist.set_animated>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:138 matplotlib.pyplot.pcolormesh:144
#: matplotlib.pyplot.pcolormesh:153 matplotlib.pyplot.pcolormesh:164
#: matplotlib.pyplot.pcolormesh:170 of
msgid "bool"
msgstr ""

#: matplotlib.pyplot.pcolormesh:139 of
msgid ":meth:`antialiased <matplotlib.collections.Collection.set_antialiased>` or aa or antialiaseds"
msgstr ""

#: matplotlib.pyplot.pcolormesh:139 of
msgid "bool or list of bools"
msgstr ""

#: matplotlib.pyplot.pcolormesh:140 of
msgid ":meth:`array <matplotlib.collections.QuadMesh.set_array>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:140 of
msgid "(M, N) array-like or M*N array-like"
msgstr ""

#: matplotlib.pyplot.pcolormesh:141 of
msgid ":meth:`capstyle <matplotlib.collections.Collection.set_capstyle>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:141 of
msgid "`.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr ""

#: matplotlib.pyplot.pcolormesh:142 of
msgid ":meth:`clim <matplotlib.cm.ScalarMappable.set_clim>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:142 of
msgid "(vmin: float, vmax: float)"
msgstr ""

#: matplotlib.pyplot.pcolormesh:143 of
msgid ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:143 of
msgid "`.Bbox`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:144 of
msgid ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:145 of
msgid ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:145 of
msgid "Patch or (Path, Transform) or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:146 of
msgid ":meth:`cmap <matplotlib.cm.ScalarMappable.set_cmap>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:146 of
msgid "`.Colormap` or str or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:147 of
msgid ":meth:`color <matplotlib.collections.Collection.set_color>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:147 of
msgid "color or list of rgba tuples"
msgstr ""

#: matplotlib.pyplot.pcolormesh:148 of
msgid ":meth:`edgecolor <matplotlib.collections.Collection.set_edgecolor>` or ec or edgecolors"
msgstr ""

#: matplotlib.pyplot.pcolormesh:148 of
msgid "color or list of colors or 'face'"
msgstr ""

#: matplotlib.pyplot.pcolormesh:149 of
msgid ":meth:`facecolor <matplotlib.collections.Collection.set_facecolor>` or facecolors or fc"
msgstr ""

#: matplotlib.pyplot.pcolormesh:149 of
msgid "color or list of colors"
msgstr ""

#: matplotlib.pyplot.pcolormesh:150 of
msgid ":meth:`figure <matplotlib.artist.Artist.set_figure>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:150 of
msgid "`.Figure`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:151 of
msgid ":meth:`gid <matplotlib.artist.Artist.set_gid>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:151 matplotlib.pyplot.pcolormesh:168 of
msgid "str"
msgstr ""

#: matplotlib.pyplot.pcolormesh:152 of
msgid ":meth:`hatch <matplotlib.collections.Collection.set_hatch>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:152 of
msgid "{'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}"
msgstr ""

#: matplotlib.pyplot.pcolormesh:153 of
msgid ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:154 of
msgid ":meth:`joinstyle <matplotlib.collections.Collection.set_joinstyle>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:154 of
msgid "`.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr ""

#: matplotlib.pyplot.pcolormesh:155 of
msgid ":meth:`label <matplotlib.artist.Artist.set_label>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:155 of
msgid "object"
msgstr ""

#: matplotlib.pyplot.pcolormesh:156 of
msgid ":meth:`linestyle <matplotlib.collections.Collection.set_linestyle>` or dashes or linestyles or ls"
msgstr ""

#: matplotlib.pyplot.pcolormesh:156 of
msgid "str or tuple or list thereof"
msgstr ""

#: matplotlib.pyplot.pcolormesh:157 of
msgid ":meth:`linewidth <matplotlib.collections.Collection.set_linewidth>` or linewidths or lw"
msgstr ""

#: matplotlib.pyplot.pcolormesh:157 of
msgid "float or list of floats"
msgstr ""

#: matplotlib.pyplot.pcolormesh:158 of
msgid ":meth:`norm <matplotlib.cm.ScalarMappable.set_norm>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:158 of
msgid "`.Normalize` or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:159 of
msgid ":meth:`offset_transform <matplotlib.collections.Collection.set_offset_transform>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:159 matplotlib.pyplot.pcolormesh:167 of
msgid "`.Transform`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:160 of
msgid ":meth:`offsets <matplotlib.collections.Collection.set_offsets>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:160 of
msgid "(N, 2) or (2,) array-like"
msgstr ""

#: matplotlib.pyplot.pcolormesh:161 of
msgid ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:161 of
msgid "`.AbstractPathEffect`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:162 of
msgid ":meth:`picker <matplotlib.artist.Artist.set_picker>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:162 of
msgid "None or bool or float or callable"
msgstr ""

#: matplotlib.pyplot.pcolormesh:163 of
msgid ":meth:`pickradius <matplotlib.collections.Collection.set_pickradius>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:163 matplotlib.pyplot.pcolormesh:171 of
msgid "float"
msgstr ""

#: matplotlib.pyplot.pcolormesh:164 of
msgid ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:165 of
msgid ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:165 of
msgid "(scale: float, length: float, randomness: float)"
msgstr ""

#: matplotlib.pyplot.pcolormesh:166 of
msgid ":meth:`snap <matplotlib.artist.Artist.set_snap>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:166 of
msgid "bool or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:167 of
msgid ":meth:`transform <matplotlib.artist.Artist.set_transform>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:168 of
msgid ":meth:`url <matplotlib.artist.Artist.set_url>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:169 of
msgid ":meth:`urls <matplotlib.collections.Collection.set_urls>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:169 of
msgid "list of str or None"
msgstr ""

#: matplotlib.pyplot.pcolormesh:170 of
msgid ":meth:`visible <matplotlib.artist.Artist.set_visible>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:171 of
msgid ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:180 of
msgid ":obj:`pcolor`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:181 of
msgid "An alternative implementation with slightly different features. For a detailed discussion on the differences see :ref:`Differences between pcolor() and pcolormesh() <differences-pcolor-pcolormesh>`."
msgstr ""

#: matplotlib.pyplot.pcolormesh:182 of
msgid ":obj:`imshow`"
msgstr ""

#: matplotlib.pyplot.pcolormesh:183 of
msgid "If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a faster alternative."
msgstr ""

#: matplotlib.pyplot.pcolormesh:187 of
msgid "Notes"
msgstr ""

#: matplotlib.pyplot.pcolormesh:188 of
msgid "**Masked arrays**"
msgstr ""

#: matplotlib.pyplot.pcolormesh:190 of
msgid "*C* may be a masked array. If ``C[i, j]`` is masked, the corresponding quadrilateral will be transparent. Masking of *X* and *Y* is not supported. Use `~.Axes.pcolor` if you need this functionality."
msgstr ""

#: matplotlib.pyplot.pcolormesh:196 of
msgid "**Grid orientation**"
msgstr ""

#: matplotlib.pyplot.pcolormesh:198 of
msgid "The grid orientation follows the standard matrix convention: An array *C* with shape (nrows, ncolumns) is plotted with the column number as *X* and the row number as *Y*."
msgstr ""

#: matplotlib.pyplot.pcolormesh:204 of
msgid "**Differences between pcolor() and pcolormesh()**"
msgstr ""

#: matplotlib.pyplot.pcolormesh:206 of
msgid "Both methods are used to create a pseudocolor plot of a 2D array using quadrilaterals."
msgstr ""

#: matplotlib.pyplot.pcolormesh:209 of
msgid "The main difference lies in the created object and internal data handling: While `~.Axes.pcolor` returns a `.PolyCollection`, `~.Axes.pcolormesh` returns a `.QuadMesh`. The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred."
msgstr ""

#: matplotlib.pyplot.pcolormesh:215 of
msgid "There is also a slight difference in the handling of masked arrays. Both `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays for *C*. However, only `~.Axes.pcolor` supports masked arrays for *X* and *Y*. The reason lies in the internal handling of the masked values. `~.Axes.pcolor` leaves out the respective polygons from the PolyCollection. `~.Axes.pcolormesh` sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in `~.Axes.pcolor` is not drawn as the corresponding polygons do not exist in the PolyCollection."
msgstr ""

#: matplotlib.pyplot.pcolormesh:227 of
msgid "Another difference is the support of Gouraud shading in `~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`."
msgstr ""

