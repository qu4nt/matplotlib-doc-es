msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:23\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/contour_api.po\n"
"X-Crowdin-File-ID: 1774\n"
"Language: es_ES\n"

#: ../../api/contour_api.rst:3
msgid "``matplotlib.contour``"
msgstr ""

#: matplotlib.contour:1 of
msgid "Classes to support contour plotting and labelling for the Axes class."
msgstr ""

#: matplotlib.contour.ClabelText:1 of
msgid "Bases: :py:class:`matplotlib.text.Text`"
msgstr ""

#: matplotlib.contour.ClabelText:2 of
msgid "Unlike the ordinary text, the get_rotation returns an updated angle in the pixel coordinate assuming that the input rotation is an angle in data coordinate (or whatever transform set)."
msgstr ""

#: matplotlib.contour.ClabelText:25 of
msgid "Create a `.Text` instance at *x*, *y* with string *text*."
msgstr ""

#: matplotlib.contour.ClabelText:27 of
msgid "Valid keyword arguments are:"
msgstr ""

#: matplotlib.artist.ClabelText.set:10 matplotlib.contour.ClabelText:33 of
msgid "Property"
msgstr ""

#: matplotlib.artist.ClabelText.set:10 matplotlib.contour.ClabelText:33 of
msgid "Description"
msgstr ""

#: matplotlib.artist.ClabelText.set:12 matplotlib.contour.ClabelText:35 of
msgid ":meth:`agg_filter <matplotlib.artist.Artist.set_agg_filter>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:12 matplotlib.contour.ClabelText:35 of
msgid "a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array"
msgstr ""

#: matplotlib.artist.ClabelText.set:13 matplotlib.contour.ClabelText:36 of
msgid ":meth:`alpha <matplotlib.artist.Artist.set_alpha>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:13 matplotlib.contour.ClabelText:36 of
msgid "scalar or None"
msgstr ""

#: matplotlib.artist.ClabelText.set:14 matplotlib.contour.ClabelText:37 of
msgid ":meth:`animated <matplotlib.artist.Artist.set_animated>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:14 matplotlib.artist.ClabelText.set:18
#: matplotlib.artist.ClabelText.set:31 matplotlib.artist.ClabelText.set:36
#: matplotlib.artist.ClabelText.set:40 matplotlib.artist.ClabelText.set:47
#: matplotlib.artist.ClabelText.set:51 matplotlib.artist.ClabelText.set:52
#: matplotlib.contour.ClabelText:37 matplotlib.contour.ClabelText:54
#: matplotlib.contour.ClabelText:59 matplotlib.contour.ClabelText:63
#: matplotlib.contour.ClabelText:70 matplotlib.contour.ClabelText:74
#: matplotlib.contour.ClabelText:75 of
msgid "bool"
msgstr ""

#: matplotlib.artist.ClabelText.set:15 matplotlib.contour.ClabelText:38 of
msgid ":meth:`backgroundcolor <matplotlib.text.Text.set_backgroundcolor>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:15 matplotlib.artist.ClabelText.set:20
#: matplotlib.contour.ClabelText:38 matplotlib.contour.ClabelText:43 of
msgid "color"
msgstr ""

#: matplotlib.artist.ClabelText.set:16 matplotlib.contour.ClabelText:39 of
msgid ":meth:`bbox <matplotlib.text.Text.set_bbox>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:16 matplotlib.contour.ClabelText:39 of
msgid "dict with properties for `.patches.FancyBboxPatch`"
msgstr ""

#: matplotlib.artist.ClabelText.set:17 matplotlib.contour.ClabelText:40 of
msgid ":meth:`clip_box <matplotlib.artist.Artist.set_clip_box>`"
msgstr ""

#: matplotlib.contour.ClabelText:40 matplotlib.contour.ClabelText:41
#: matplotlib.contour.ClabelText:42 of
msgid "unknown"
msgstr ""

#: matplotlib.artist.ClabelText.set:18 matplotlib.contour.ClabelText:41 of
msgid ":meth:`clip_on <matplotlib.artist.Artist.set_clip_on>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:19 matplotlib.contour.ClabelText:42 of
msgid ":meth:`clip_path <matplotlib.artist.Artist.set_clip_path>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:20 matplotlib.contour.ClabelText:43 of
msgid ":meth:`color <matplotlib.text.Text.set_color>` or c"
msgstr ""

#: matplotlib.artist.ClabelText.set:21 matplotlib.contour.ClabelText:44 of
msgid ":meth:`figure <matplotlib.artist.Artist.set_figure>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:21 matplotlib.contour.ClabelText:44 of
msgid "`.Figure`"
msgstr ""

#: matplotlib.artist.ClabelText.set:22 matplotlib.contour.ClabelText:45 of
msgid ":meth:`fontfamily <matplotlib.text.Text.set_fontfamily>` or family"
msgstr ""

#: matplotlib.artist.ClabelText.set:22 matplotlib.contour.ClabelText:45 of
msgid "{FONTNAME, 'serif', 'sans-serif', 'cursive', 'fantasy', 'monospace'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:23 matplotlib.contour.ClabelText:46 of
msgid ":meth:`fontproperties <matplotlib.text.Text.set_fontproperties>` or font or font_properties"
msgstr ""

#: matplotlib.artist.ClabelText.set:23 matplotlib.contour.ClabelText:46 of
msgid "`.font_manager.FontProperties` or `str` or `pathlib.Path`"
msgstr ""

#: matplotlib.artist.ClabelText.set:24 matplotlib.contour.ClabelText:47 of
msgid ":meth:`fontsize <matplotlib.text.Text.set_fontsize>` or size"
msgstr ""

#: matplotlib.artist.ClabelText.set:24 matplotlib.contour.ClabelText:47 of
msgid "float or {'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:25 matplotlib.contour.ClabelText:48 of
msgid ":meth:`fontstretch <matplotlib.text.Text.set_fontstretch>` or stretch"
msgstr ""

#: matplotlib.artist.ClabelText.set:25 matplotlib.contour.ClabelText:48 of
msgid "{a numeric value in range 0-1000, 'ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:26 matplotlib.contour.ClabelText:49 of
msgid ":meth:`fontstyle <matplotlib.text.Text.set_fontstyle>` or style"
msgstr ""

#: matplotlib.artist.ClabelText.set:26 matplotlib.contour.ClabelText:49 of
msgid "{'normal', 'italic', 'oblique'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:27 matplotlib.contour.ClabelText:50 of
msgid ":meth:`fontvariant <matplotlib.text.Text.set_fontvariant>` or variant"
msgstr ""

#: matplotlib.artist.ClabelText.set:27 matplotlib.contour.ClabelText:50 of
msgid "{'normal', 'small-caps'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:28 matplotlib.contour.ClabelText:51 of
msgid ":meth:`fontweight <matplotlib.text.Text.set_fontweight>` or weight"
msgstr ""

#: matplotlib.artist.ClabelText.set:28 matplotlib.contour.ClabelText:51 of
msgid "{a numeric value in range 0-1000, 'ultralight', 'light', 'normal', 'regular', 'book', 'medium', 'roman', 'semibold', 'demibold', 'demi', 'bold', 'heavy', 'extra bold', 'black'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:29 matplotlib.contour.ClabelText:52 of
msgid ":meth:`gid <matplotlib.artist.Artist.set_gid>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:29 matplotlib.artist.ClabelText.set:34
#: matplotlib.artist.ClabelText.set:48 matplotlib.contour.ClabelText:52
#: matplotlib.contour.ClabelText:57 matplotlib.contour.ClabelText:71 of
msgid "str"
msgstr ""

#: matplotlib.artist.ClabelText.set:30 matplotlib.contour.ClabelText:53 of
msgid ":meth:`horizontalalignment <matplotlib.text.Text.set_horizontalalignment>` or ha"
msgstr ""

#: matplotlib.artist.ClabelText.set:30 matplotlib.contour.ClabelText:53 of
msgid "{'center', 'right', 'left'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:31 matplotlib.contour.ClabelText:54 of
msgid ":meth:`in_layout <matplotlib.artist.Artist.set_in_layout>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:32 matplotlib.contour.ClabelText:55 of
msgid ":meth:`label <matplotlib.artist.Artist.set_label>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:32 matplotlib.artist.ClabelText.set:45
#: matplotlib.contour.ClabelText:55 matplotlib.contour.ClabelText:68 of
msgid "object"
msgstr ""

#: matplotlib.artist.ClabelText.set:33 matplotlib.contour.ClabelText:56 of
msgid ":meth:`linespacing <matplotlib.text.Text.set_linespacing>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:33 matplotlib.contour.ClabelText:56 of
msgid "float (multiple of font size)"
msgstr ""

#: matplotlib.artist.ClabelText.set:34 matplotlib.contour.ClabelText:57 of
msgid ":meth:`math_fontfamily <matplotlib.text.Text.set_math_fontfamily>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:35 matplotlib.contour.ClabelText:58 of
msgid ":meth:`multialignment <matplotlib.text.Text.set_multialignment>` or ma"
msgstr ""

#: matplotlib.artist.ClabelText.set:35 matplotlib.contour.ClabelText:58 of
msgid "{'left', 'right', 'center'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:36 matplotlib.contour.ClabelText:59 of
msgid ":meth:`parse_math <matplotlib.text.Text.set_parse_math>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:37 matplotlib.contour.ClabelText:60 of
msgid ":meth:`path_effects <matplotlib.artist.Artist.set_path_effects>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:37 matplotlib.contour.ClabelText:60 of
msgid "`.AbstractPathEffect`"
msgstr ""

#: matplotlib.artist.ClabelText.set:38 matplotlib.contour.ClabelText:61 of
msgid ":meth:`picker <matplotlib.artist.Artist.set_picker>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:38 matplotlib.contour.ClabelText:61 of
msgid "None or bool or float or callable"
msgstr ""

#: matplotlib.artist.ClabelText.set:39 matplotlib.contour.ClabelText:62 of
msgid ":meth:`position <matplotlib.text.Text.set_position>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:39 matplotlib.contour.ClabelText:62 of
msgid "(float, float)"
msgstr ""

#: matplotlib.artist.ClabelText.set:40 matplotlib.contour.ClabelText:63 of
msgid ":meth:`rasterized <matplotlib.artist.Artist.set_rasterized>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:41 matplotlib.contour.ClabelText:64 of
msgid ":meth:`rotation <matplotlib.text.Text.set_rotation>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:41 matplotlib.contour.ClabelText:64 of
msgid "float or {'vertical', 'horizontal'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:42 matplotlib.contour.ClabelText:65 of
msgid ":meth:`rotation_mode <matplotlib.text.Text.set_rotation_mode>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:42 matplotlib.contour.ClabelText:65 of
msgid "{None, 'default', 'anchor'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:43 matplotlib.contour.ClabelText:66 of
msgid ":meth:`sketch_params <matplotlib.artist.Artist.set_sketch_params>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:43 matplotlib.contour.ClabelText:66 of
msgid "(scale: float, length: float, randomness: float)"
msgstr ""

#: matplotlib.artist.ClabelText.set:44 matplotlib.contour.ClabelText:67 of
msgid ":meth:`snap <matplotlib.artist.Artist.set_snap>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:44 matplotlib.artist.ClabelText.set:49
#: matplotlib.contour.ClabelText:67 matplotlib.contour.ClabelText:72 of
msgid "bool or None"
msgstr ""

#: matplotlib.artist.ClabelText.set:45 matplotlib.contour.ClabelText:68 of
msgid ":meth:`text <matplotlib.text.Text.set_text>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:46 matplotlib.contour.ClabelText:69 of
msgid ":meth:`transform <matplotlib.artist.Artist.set_transform>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:46 matplotlib.contour.ClabelText:69 of
msgid "`.Transform`"
msgstr ""

#: matplotlib.artist.ClabelText.set:47 matplotlib.contour.ClabelText:70 of
msgid ":meth:`transform_rotates_text <matplotlib.text.Text.set_transform_rotates_text>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:48 matplotlib.contour.ClabelText:71 of
msgid ":meth:`url <matplotlib.artist.Artist.set_url>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:49 matplotlib.contour.ClabelText:72 of
msgid ":meth:`usetex <matplotlib.text.Text.set_usetex>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:50 matplotlib.contour.ClabelText:73 of
msgid ":meth:`verticalalignment <matplotlib.text.Text.set_verticalalignment>` or va"
msgstr ""

#: matplotlib.artist.ClabelText.set:50 matplotlib.contour.ClabelText:73 of
msgid "{'center', 'top', 'bottom', 'baseline', 'center_baseline'}"
msgstr ""

#: matplotlib.artist.ClabelText.set:51 matplotlib.contour.ClabelText:74 of
msgid ":meth:`visible <matplotlib.artist.Artist.set_visible>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:52 matplotlib.contour.ClabelText:75 of
msgid ":meth:`wrap <matplotlib.text.Text.set_wrap>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:53 matplotlib.contour.ClabelText:76 of
msgid ":meth:`x <matplotlib.text.Text.set_x>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:53 matplotlib.artist.ClabelText.set:54
#: matplotlib.artist.ClabelText.set:55 matplotlib.contour.ClabelText:76
#: matplotlib.contour.ClabelText:77 matplotlib.contour.ClabelText:78 of
msgid "float"
msgstr ""

#: matplotlib.artist.ClabelText.set:54 matplotlib.contour.ClabelText:77 of
msgid ":meth:`y <matplotlib.text.Text.set_y>`"
msgstr ""

#: matplotlib.artist.ClabelText.set:55 matplotlib.contour.ClabelText:78 of
msgid ":meth:`zorder <matplotlib.artist.Artist.set_zorder>`"
msgstr ""

#: matplotlib.contour.ClabelText.get_rotation:2 of
msgid "Return the text angle in degrees between 0 and 360."
msgstr ""

#: matplotlib.artist.ClabelText.set:2 of
msgid "Set multiple properties at once."
msgstr ""

#: matplotlib.artist.ClabelText.set:4 of
msgid "Supported properties are"
msgstr ""

#: matplotlib.artist.ClabelText.set:17 of
msgid "`.Bbox`"
msgstr ""

#: matplotlib.artist.ClabelText.set:19 of
msgid "Patch or (Path, Transform) or None"
msgstr ""

#: matplotlib.contour.ContourLabeler:1 of
msgid "Bases: :py:class:`object`"
msgstr ""

#: matplotlib.contour.ContourLabeler:2 of
msgid "Mixin to provide labelling capability to `.ContourSet`."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label:2 of
msgid "Add contour label using :class:`~matplotlib.text.Text` class."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_clabeltext:2 of
msgid "Add contour label using :class:`ClabelText` class."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:2 of
msgid "Add a label near the point ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near
#: matplotlib.contour.ContourLabeler.clabel matplotlib.contour.ContourSet
#: matplotlib.contour.ContourSet.find_nearest_contour
#: matplotlib.contour.ContourSet.legend_elements
#: matplotlib.contour.QuadContourSet of
msgid "Parameters"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:8
#: matplotlib.contour.ContourSet.find_nearest_contour:8 of
msgid "**x, y**"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:8 of
msgid "The approximate location of the label."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:11
#: matplotlib.contour.ContourLabeler.clabel:31 of
msgid "**inline**"
msgstr ""

#: of
msgid "bool, default: True"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:11 of
msgid "If *True* remove the segment of the contour beneath the label."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:16
#: matplotlib.contour.ContourLabeler.clabel:37 of
msgid "**inline_spacing**"
msgstr ""

#: of
msgid "int, default: 5"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:14 of
msgid "Space in pixels to leave on each side of label when placing inline. This spacing will be exact for labels at locations where the contour is straight, less so for labels on curved contours."
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:35 of
msgid "**transform** : `.Transform` or `False`, default: ``self.axes.transData``"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:34 of
msgid "Transform or False, default: self.axes.transData"
msgstr ""

#: matplotlib.contour.ContourLabeler.add_label_near:19 of
msgid "A transform applied to ``(x, y)`` before labeling.  The default causes ``(x, y)`` to be interpreted as data coordinates.  `False` is a synonym for `.IdentityTransform`; i.e. ``(x, y)`` should be interpreted as display coordinates."
msgstr ""

#: matplotlib.contour.ContourLabeler.calc_label_rot_and_inline:2 of
msgid "Calculate the appropriate label rotation given the linecontour coordinates in screen units, the index of the label location and the label width."
msgstr ""

#: matplotlib.contour.ContourLabeler.calc_label_rot_and_inline:6 of
msgid "If *lc* is not None or empty, also break contours and compute inlining."
msgstr ""

#: matplotlib.contour.ContourLabeler.calc_label_rot_and_inline:9 of
msgid "*spacing* is the empty space to leave around the label, in pixels."
msgstr ""

#: matplotlib.contour.ContourLabeler.calc_label_rot_and_inline:11 of
msgid "Both tasks are done together to avoid calculating path lengths multiple times, which is relatively costly."
msgstr ""

#: matplotlib.contour.ContourLabeler.calc_label_rot_and_inline:14 of
msgid "The method used here involves computing the path length along the contour in pixel coordinates and then looking approximately (label width / 2) away from central point to determine rotation and then to break contour if desired."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:2 of
msgid "Label a contour plot."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:4 of
msgid "Adds labels to line contours in this `.ContourSet` (which inherits from this mixin class)."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:11 matplotlib.contour.ContourSet:12
#: matplotlib.contour.ContourSet:62 matplotlib.contour.ContourSet:87
#: matplotlib.contour.QuadContourSet:29 matplotlib.contour.QuadContourSet:54 of
msgid "**levels**"
msgstr ""

#: of
msgid "array-like, optional"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:10 of
msgid "A list of level values, that should be labeled. The list must be a subset of ``cs.levels``. If not given, all levels are labeled."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:15 of
msgid "**fontsize** : str or float, default: :rc:`font.size`"
msgstr ""

#: of
msgid "str or float, default:"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:14 of
msgid "Size in points or relative size e.g., 'smaller', 'x-large'. See `.Text.set_size` for accepted string values."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:27 of
msgid "**colors**"
msgstr ""

#: of
msgid "color or colors or None, default: None"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:18 of
msgid "The label colors:"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:20 of
msgid "If *None*, the color of each label matches the color of the corresponding contour."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:23 of
msgid "If one string color, e.g., *colors* = 'r' or *colors* = 'red', all labels will be plotted in this color."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:26 of
msgid "If a tuple of colors (string, float, rgb, etc), different labels will be plotted in different colors in the order specified."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:30 of
msgid "If ``True`` the underlying contour is removed where the label is placed."
msgstr ""

#: of
msgid "float, default: 5"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:34 of
msgid "Space in pixels to leave on each side of label when placing inline."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:36 of
msgid "This spacing will be exact for labels at locations where the contour is straight, less so for labels on curved contours."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:49 of
msgid "**fmt** : `.Formatter` or str or callable or dict, optional"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:48 of
msgid "Formatter or str or callable or dict, optional"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:40 of
msgid "How the levels are formatted:"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:42 of
msgid "If a `.Formatter`, it is used to format all levels at once, using its `.Formatter.format_ticks` method."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:44 of
#, python-format
msgid "If a str, it is interpreted as a %-style format string."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:45 of
msgid "If a callable, it is called with one level at a time and should return the corresponding label."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:47 of
msgid "If a dict, it should directly map levels to labels."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:49 of
msgid "The default is to use a standard `.ScalarFormatter`."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:64 of
msgid "**manual**"
msgstr ""

#: of
msgid "bool or iterable, default: False"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:52 of
msgid "If ``True``, contour labels will be placed manually using mouse clicks. Click the first button near a contour to add a label, click the second button (or potentially both mouse buttons at once) to finish adding labels. The third button can be used to remove the last label added, but only if labels are not inline. Alternatively, the keyboard can be used to select label locations (enter to end label placement, delete or backspace act like the third mouse button, and any other key will select a label location)."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:62 of
msgid "*manual* can also be an iterable object of (x, y) tuples. Contour labels will be created as if mouse is clicked at each (x, y) position."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:68 of
msgid "**rightside_up**"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:67 of
msgid "If ``True``, label rotations will always be plus or minus 90 degrees from level."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:74 of
msgid "**use_clabeltext**"
msgstr ""

#: of
msgid "bool, default: False"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:71 of
msgid "If ``True``, `.ClabelText` class (instead of `.Text`) is used to create labels. `ClabelText` recalculates rotation angles of texts during the drawing time, therefore this can be used if aspect of the axes changes."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:77 of
msgid "**zorder** : float or None, default: ``(2 + contour.get_zorder())``"
msgstr ""

#: of
msgid "float or None, default:"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:77 of
msgid "zorder of the contour labels."
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel
#: matplotlib.contour.ContourSet.find_nearest_contour
#: matplotlib.contour.ContourSet.legend_elements of
msgid "Returns"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:94 of
msgid "labels"
msgstr ""

#: matplotlib.contour.ContourLabeler.clabel:82 of
msgid "A list of `.Text` instances for the labels."
msgstr ""

#: matplotlib.contour.ContourLabeler.get_label_coords:2 of
msgid "[*Deprecated*] Return x, y, and the index of a label location."
msgstr ""

#: matplotlib.contour.ContourLabeler.get_label_coords:4 of
msgid "Labels are plotted at a location with the smallest deviation of the contour from a straight line unless there is another label nearby, in which case the next best place on the contour is picked up. If all such candidates are rejected, the beginning of the contour is chosen."
msgstr ""

#: matplotlib.contour.ContourLabeler.get_label_coords:21
#: matplotlib.contour.ContourLabeler.get_label_width:15 of
msgid "Notes"
msgstr ""

#: matplotlib.contour.ContourLabeler.get_label_width:2 of
msgid "[*Deprecated*] Return the width of the label in points."
msgstr ""

#: matplotlib.contour.ContourLabeler.get_text:2 of
msgid "Get the text of the label."
msgstr ""

#: matplotlib.contour.ContourLabeler.locate_label:2 of
msgid "Find good place to draw a label (relatively flat part of the contour)."
msgstr ""

#: matplotlib.contour.ContourLabeler.pop_label:2 of
msgid "Defaults to removing last label, but any index can be supplied"
msgstr ""

#: matplotlib.contour.ContourLabeler.print_label:2 of
msgid "Return whether a contour is long enough to hold a label."
msgstr ""

#: matplotlib.contour.ContourLabeler.set_label_props:2 of
msgid "Set the label properties - color, fontsize, text."
msgstr ""

#: matplotlib.contour.ContourLabeler.too_close:2 of
msgid "Return whether a label is already near this location."
msgstr ""

#: matplotlib.contour.ContourSet:1 of
msgid "Bases: :py:class:`matplotlib.cm.ScalarMappable`, :py:class:`matplotlib.contour.ContourLabeler`"
msgstr ""

#: matplotlib.contour.ContourSet:2 of
msgid "Store a set of contour lines or filled regions."
msgstr ""

#: matplotlib.contour.ContourSet:4 of
msgid "User-callable method: `~.Axes.clabel`"
msgstr ""

#: matplotlib.contour.ContourSet:9 matplotlib.contour.ContourSet:83
#: matplotlib.contour.QuadContourSet:50 of
msgid "**ax** : `~.axes.Axes`"
msgstr ""

#: matplotlib.contour.ContourSet:8 matplotlib.contour.ContourSet:54
#: matplotlib.contour.ContourSet:82 matplotlib.contour.QuadContourSet:21
#: matplotlib.contour.QuadContourSet:49 of
msgid "Axes"
msgstr ""

#: of
msgid "[level0, level1, ..., leveln]"
msgstr ""

#: matplotlib.contour.ContourSet:12 matplotlib.contour.ContourSet:86
#: matplotlib.contour.QuadContourSet:53 of
msgid "A list of floating point numbers indicating the contour levels."
msgstr ""

#: matplotlib.contour.ContourSet:21 matplotlib.contour.ContourSet:96
#: matplotlib.contour.QuadContourSet:63 of
msgid "**allsegs**"
msgstr ""

#: of
msgid "[level0segs, level1segs, ...]"
msgstr ""

#: matplotlib.contour.ContourSet:15 matplotlib.contour.ContourSet:90
#: matplotlib.contour.QuadContourSet:57 of
msgid "List of all the polygon segments for all the *levels*. For contour lines ``len(allsegs) == len(levels)``, and for filled contour regions ``len(allsegs) = len(levels)-1``. The lists should look like ::"
msgstr ""

#: matplotlib.contour.ContourSet:35 of
msgid "**allkinds** : ``None`` or [level0kinds, level1kinds, ...]"
msgstr ""

#: matplotlib.contour.ContourSet:34 of
msgid "None or [level0kinds, level1kinds, ...]"
msgstr ""

#: matplotlib.contour.ContourSet:24 matplotlib.contour.ContourSet:99
#: matplotlib.contour.QuadContourSet:66 of
msgid "Optional list of all the polygon vertex kinds (code types), as described and used in Path. This is used to allow multiply- connected paths such as holes within filled polygons. If not ``None``, ``len(allkinds) == len(allsegs)``. The lists should look like ::"
msgstr ""

#: matplotlib.contour.ContourSet:33 matplotlib.contour.ContourSet:108
#: matplotlib.contour.QuadContourSet:75 of
msgid "If *allkinds* is not ``None``, usually all polygons for a particular contour level are grouped together so that ``level0segs = [polygon0]`` and ``level0kinds = [polygon0kinds]``."
msgstr ""

#: matplotlib.contour.ContourSet:50 matplotlib.contour.ContourSet:127
#: matplotlib.contour.QuadContourSet:94 of
msgid "**\\*\\*kwargs**"
msgstr ""

#: matplotlib.contour.ContourSet:38 matplotlib.contour.ContourSet:113
#: matplotlib.contour.QuadContourSet:80 of
msgid "Keyword arguments are as described in the docstring of `~.Axes.contour`."
msgstr ""

#: matplotlib.contour.ContourSet matplotlib.contour.QuadContourSet of
msgid "Attributes"
msgstr ""

#: matplotlib.contour.ContourSet:55 matplotlib.contour.QuadContourSet:22 of
msgid "**ax** : `~matplotlib.axes.Axes`"
msgstr ""

#: matplotlib.contour.ContourSet:55 matplotlib.contour.QuadContourSet:22 of
msgid "The Axes object in which the contours are drawn."
msgstr ""

#: matplotlib.contour.ContourSet:59 matplotlib.contour.QuadContourSet:26 of
msgid "**collections** : `.silent_list` of `.PathCollection`\\s"
msgstr ""

#: matplotlib.contour.ContourSet:58 matplotlib.contour.QuadContourSet:25 of
msgid "silent_list of PathCollections"
msgstr ""

#: matplotlib.contour.ContourSet:58 matplotlib.contour.QuadContourSet:25 of
msgid "The `.Artist`\\s representing the contour. This is a list of `.PathCollection`\\s for both line and filled contours."
msgstr ""

#: of
msgid "array"
msgstr ""

#: matplotlib.contour.ContourSet:62 matplotlib.contour.QuadContourSet:29 of
msgid "The values of the contour levels."
msgstr ""

#: matplotlib.contour.ContourSet:67 matplotlib.contour.QuadContourSet:34 of
msgid "**layers**"
msgstr ""

#: matplotlib.contour.ContourSet:65 matplotlib.contour.QuadContourSet:32 of
msgid "Same as levels for line contours; half-way between levels for filled contours.  See ``ContourSet._process_colors``."
msgstr ""

#: matplotlib.contour.ContourSet:73 matplotlib.contour.QuadContourSet:40 of
msgid "Draw contour lines or filled regions, depending on whether keyword arg *filled* is ``False`` (default) or ``True``."
msgstr ""

#: matplotlib.contour.ContourSet:76 matplotlib.contour.QuadContourSet:43 of
msgid "Call signature::"
msgstr ""

#: matplotlib.contour.ContourSet:83 matplotlib.contour.QuadContourSet:50 of
msgid "The `~.axes.Axes` object to draw on."
msgstr ""

#: matplotlib.contour.ContourSet:110 matplotlib.contour.QuadContourSet:77 of
msgid "**allkinds**"
msgstr ""

#: of
msgid "[level0kinds, level1kinds, ...], optional"
msgstr ""

#: matplotlib.contour.ContourSet.changed:2 of
msgid "Call this whenever the mappable is changed to notify all the callbackSM listeners to the 'changed' signal."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:2 of
msgid "Find the point in the contour plot that is closest to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:8 of
msgid "The reference point."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:12 of
msgid "**indices**"
msgstr ""

#: of
msgid "list of int or None, default: None"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:11 of
msgid "Indices of contour levels to consider.  If None (the default), all levels are considered."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:17 of
msgid "**pixel**"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:15 of
msgid "If *True*, measure distance in pixel (screen) space, which is useful for manual contour labeling; else, measure distance in axes space."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:22 of
msgid "**contour** : `.Collection`"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:21 of
msgid "Collection"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:22 of
msgid "The contour that is closest to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:26 of
msgid "**segment**"
msgstr ""

#: of
msgid "int"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:25 of
msgid "The index of the `.Path` in *contour* that is closest to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:30 of
msgid "**index**"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:29 of
msgid "The index of the path segment in *segment* that is closest to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:33 of
msgid "**xmin, ymin**"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:33 of
msgid "The point in the contour plot that is closest to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:48 of
msgid "**d2**"
msgstr ""

#: matplotlib.contour.ContourSet.find_nearest_contour:36 of
msgid "The squared distance from ``(xmin, ymin)`` to ``(x, y)``."
msgstr ""

#: matplotlib.contour.ContourSet.get_alpha:2 of
msgid "Return alpha to be applied to all ContourSet artists."
msgstr ""

#: matplotlib.contour.ContourSet.get_transform:2 of
msgid "Return the :class:`~matplotlib.transforms.Transform` instance used by this ContourSet."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:2 of
msgid "Return a list of artists and labels suitable for passing through to `~.Axes.legend` which represent this ContourSet."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:5 of
msgid "The labels have the form \"0 < x <= 1\" stating the data ranges which the artists represent."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:11 of
msgid "**variable_name**"
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:11 of
msgid "The string used inside the inequality used on the labels."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:14 of
msgid "**str_format**"
msgstr ""

#: of
msgid "function: float -> str"
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:14 of
msgid "Function used to format the numbers in the labels."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:19 of
msgid "**artists** : list[`.Artist`]"
msgstr ""

#: of
msgid "list["
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:19 of
msgid "A list of the artists."
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:34 of
msgid "**labels**"
msgstr ""

#: of
msgid "list[str]"
msgstr ""

#: matplotlib.contour.ContourSet.legend_elements:22 of
msgid "A list of the labels."
msgstr ""

#: matplotlib.contour.ContourSet.set_alpha:2 of
msgid "Set the alpha blending value for all ContourSet artists. *alpha* must be between 0 (transparent) and 1 (opaque)."
msgstr ""

#: matplotlib.contour.QuadContourSet:1 of
msgid "Bases: :py:class:`matplotlib.contour.ContourSet`"
msgstr ""

#: matplotlib.contour.QuadContourSet:2 of
msgid "Create and store a set of contour lines or filled regions."
msgstr ""

#: matplotlib.contour.QuadContourSet:4 of
msgid "This class is typically not instantiated directly by the user but by `~.Axes.contour` and `~.Axes.contourf`."
msgstr ""

