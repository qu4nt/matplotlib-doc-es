msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:23\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/backend_cairo_api.po\n"
"X-Crowdin-File-ID: 1724\n"
"Language: es_ES\n"

#: ../../api/backend_cairo_api.rst:2
msgid ":mod:`.backend_cairo`"
msgstr ""

#: matplotlib.backends.backend_cairo:2 of
msgid "A Cairo backend for Matplotlib"
msgstr ""

#: matplotlib.backends.backend_cairo of
msgid "Author"
msgstr ""

#: matplotlib.backends.backend_cairo:3 of
msgid "Steve Chaplin and others"
msgstr ""

#: matplotlib.backends.backend_cairo:5 of
msgid "This backend depends on cairocffi or pycairo."
msgstr ""

#: matplotlib.backends.backend_cairo.FigureCanvasCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.FigureCanvasBase`"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.GraphicsContextBase`"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.get_rgb:2 of
msgid "Return a tuple of three or four floats from 0-1."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.restore:2 of
msgid "Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha:2 of
msgid "Set the alpha value used for blending - not supported on all backends."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_alpha:4 of
msgid "If ``alpha=None`` (the default), the alpha components of the foreground and fill colors will be used to set their respective transparencies (where applicable); otherwise, ``alpha`` will override them."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_antialiased:2 of
msgid "Set whether object should be drawn with antialiased rendering."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:2 of
msgid "Set how to draw endpoints of lines."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground
#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle
#: matplotlib.backends.backend_cairo.RendererCairo.draw_image
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text
#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels of
msgid "Parameters"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:21 of
msgid "**cs** : `.CapStyle` or {'butt', 'projecting', 'round'}"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_capstyle:20 of
msgid "CapStyle or {'butt', 'projecting', 'round'}"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_path:2 of
msgid "Set the clip path to a `.TransformedPath` or None."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_clip_rectangle:2
#: of
msgid "Set the clip rectangle to a `.Bbox` or None."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:2 of
msgid "Set the dash style for the gc."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:8 of
msgid "**dash_offset**"
msgstr ""

#: of
msgid "float"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:8 of
msgid "The offset (usually 0)."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:19 of
msgid "**dash_list**"
msgstr ""

#: of
msgid "array-like or None"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:11 of
msgid "The on-off sequence as points.  None specifies a solid line."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:22
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:37 of
msgid "Notes"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_dashes:23 of
msgid "See p. 107 of to PostScript `blue book`_ for more info."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:2 of
msgid "Set the foreground color."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:8 of
msgid "**fg**"
msgstr ""

#: of
msgid "color"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:25 of
msgid "**isRGBA**"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_foreground:11 of
msgid "If *fg* is known to be an ``(r, g, b, a)`` tuple, *isRGBA* can be set to True to improve performance."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:2 of
msgid "Set how to draw connections between line segments."
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:21 of
msgid "**js** : `.JoinStyle` or {'miter', 'round', 'bevel'}"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_joinstyle:20 of
msgid "JoinStyle or {'miter', 'round', 'bevel'}"
msgstr ""

#: matplotlib.backends.backend_cairo.GraphicsContextCairo.set_linewidth:2 of
msgid "Set the linewidth in points."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo:1 of
msgid "Bases: :py:class:`matplotlib.backend_bases.RendererBase`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:2 of
msgid "Draw an RGBA image."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:8
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:8 of
msgid "**gc** : `.GraphicsContextBase`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:7
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:11
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:7 of
msgid "GraphicsContextBase"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:8 of
msgid "A graphics context with clipping information."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:11 of
msgid "**x**"
msgstr ""

#: of
msgid "scalar"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:11 of
msgid "The distance in physical units (i.e., dots or pixels) from the left hand side of the canvas."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:16
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:14 of
msgid "**y**"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:15 of
msgid "The distance in physical units (i.e., dots or pixels) from the bottom side of the canvas."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:19 of
msgid "**im**"
msgstr ""

#: of
msgid "(N, M, 4) array-like of np.uint8"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:19 of
msgid "An array of RGBA pixels."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:43 of
msgid "**transform** : `matplotlib.transforms.Affine2DBase`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:42 of
msgid "matplotlib.transforms.Affine2DBase"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_image:22 of
msgid "If and only if the concrete backend is written such that :meth:`option_scale_image` returns ``True``, an affine transformation (i.e., an `.Affine2DBase`) *may* be passed to :meth:`draw_image`.  The translation vector of the transformation is given in physical units (i.e., dots or pixels). Note that the transformation does not override *x* and *y*, and has to be applied *before* translating the result by *x* and *y* (this can be accomplished by adding *x* and *y* to the translation vector defined by *transform*)."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:2 of
msgid "Draw a marker at each of *path*'s vertices (excluding control points)."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:4 of
msgid "This provides a fallback implementation of draw_markers that makes multiple calls to :meth:`draw_path`.  Some backends may want to override this method in order to draw the marker only once and reuse it multiple times."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:12
#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:8 of
msgid "The graphics context."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:15 of
msgid "**marker_trans** : `matplotlib.transforms.Transform`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:14
#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:30 of
msgid "matplotlib.transforms.Transform"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:15 of
msgid "An affine transform applied to the marker."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:31 of
msgid "**trans** : `matplotlib.transforms.Transform`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_markers:18 of
msgid "An affine transform applied to the path."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_path:2 of
msgid "Draw a `~.path.Path` instance using the given affine transform."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:2 of
msgid "Draw the text instance."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:11 of
msgid "The x location of the text in display coords."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:14 of
msgid "The y location of the text baseline in display coords."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:17 of
msgid "**s**"
msgstr ""

#: of
msgid "str"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:17 of
msgid "The text string."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:20 of
msgid "**prop** : `matplotlib.font_manager.FontProperties`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:19 of
msgid "matplotlib.font_manager.FontProperties"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:20 of
msgid "The font properties."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:23 of
msgid "**angle**"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:23 of
msgid "The rotation angle in degrees anti-clockwise."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:34 of
msgid "**mtext** : `matplotlib.text.Text`"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:33 of
msgid "matplotlib.text.Text"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:26 of
msgid "The original text object to be rendered."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:38 of
msgid "**Note for backend implementers:**"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:40 of
msgid "When you are trying to determine if you have gotten your bounding box right (which is what enables the text layout/alignment to work properly), it helps to change the line in text.py::"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.draw_text:46 of
msgid "to if 1, and then the actual bounding box will be plotted along with your text."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.get_canvas_width_height:2 of
msgid "Return the canvas width and height in display coords."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.get_text_width_height_descent:2
#: of
msgid "Get the width, height, and descent (offset from the bottom to the baseline), in display coords, of the string *s* with `.FontProperties` *prop*."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.new_gc:2 of
msgid "Return an instance of a `.GraphicsContextBase`."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:2 of
msgid "Convert points to display units."
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:4 of
msgid "You need to override this function (unless your backend doesn't have a dpi, e.g., postscript or svg).  Some imaging systems assume some value for pixels per inch::"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:13 of
msgid "**points**"
msgstr ""

#: of
msgid "float or array-like"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:13 of
msgid "a float or a numpy array of float"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels of
msgid "Returns"
msgstr ""

#: matplotlib.backends.backend_cairo.RendererCairo.points_to_pixels:30 of
msgid "Points converted to pixels"
msgstr ""

