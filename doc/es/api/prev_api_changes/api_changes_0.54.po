msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:21\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/api/prev_api_changes/api_changes_0.54.po\n"
"X-Crowdin-File-ID: 1838\n"
"Language: es_ES\n"

#: ../../api/prev_api_changes/api_changes_0.54.rst:3
msgid "Changes for 0.54"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:6
msgid "MATLAB interface"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:9
msgid "dpi"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:11
msgid "Several of the backends used a PIXELS_PER_INCH hack that I added to try and make images render consistently across backends.  This just complicated matters.  So you may find that some font sizes and line widths appear different than before.  Apologies for the inconvenience. You should set the dpi to an accurate value for your screen to get true sizes."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:20
msgid "pcolor and scatter"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:22
msgid "There are two changes to the MATLAB interface API, both involving the patch drawing commands.  For efficiency, pcolor and scatter have been rewritten to use polygon collections, which are a new set of objects from matplotlib.collections designed to enable efficient handling of large collections of objects.  These new collections make it possible to build large scatter plots or pcolor plots with no loops at the python level, and are significantly faster than their predecessors. The original pcolor and scatter functions are retained as pcolor_classic and scatter_classic."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:32
msgid "The return value from pcolor is a PolyCollection.  Most of the properties that are available on rectangles or other patches are also available on PolyCollections, e.g., you can say::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:41
msgid "or::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:47
msgid "Because the collection is a single object, you no longer need to loop over the return value of scatter or pcolor to set properties for the entire list."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:51
msgid "If you want the different elements of a collection to vary on a property, e.g., to have different line widths, see matplotlib.collections for a discussion on how to set the properties as a sequence."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:55
msgid "For scatter, the size argument is now in points^2 (the area of the symbol in points) as in MATLAB and is not in data coords as before. Using sizes in data coords caused several problems.  So you will need to adjust your size arguments accordingly or use scatter_classic."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:61
msgid "mathtext spacing"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:63
msgid "For reasons not clear to me (and which I'll eventually fix) spacing no longer works in font groups.  However, I added three new spacing commands which compensate for this '\\ ' (regular space), '\\/' (small space) and '\\hspace{frac}' where frac is a fraction of fontsize in points.  You will need to quote spaces in font strings, is::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:74
msgid "Object interface - Application programmers"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:77
msgid "Autoscaling"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:79
msgid "The x and y axis instances no longer have autoscale view.  These are handled by axes.autoscale_view"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:83
msgid "Axes creation"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:85
msgid "You should not instantiate your own Axes any more using the OO API. Rather, create a Figure as before and in place of::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:92
msgid "use::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:97
msgid "That is, add_axis no longer exists and is replaced by::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:103
msgid "Artist methods"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:105
msgid "If you define your own Artists, you need to rename the _draw method to draw"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:109
msgid "Bounding boxes"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:111
msgid "matplotlib.transforms.Bound2D is replaced by matplotlib.transforms.Bbox.  If you want to construct a bbox from left, bottom, width, height (the signature for Bound2D), use matplotlib.transforms.lbwh_to_bbox, as in"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:116
msgid "bbox = clickBBox = lbwh_to_bbox(left, bottom, width, height)"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:118
msgid "The Bbox has a different API than the Bound2D.  e.g., if you want to get the width and height of the bbox"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:123
msgid "OLD::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:122
msgid "width  = fig.bbox.x.interval() height = fig.bbox.y.interval()"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:130
msgid "New::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:126
msgid "width  = fig.bbox.width() height = fig.bbox.height()"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:133
msgid "Object constructors"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:135
msgid "You no longer pass the bbox, dpi, or transforms to the various Artist constructors.  The old way or creating lines and rectangles was cumbersome because you had to pass so many attributes to the Line2D and Rectangle classes not related directly to the geometry and properties of the object.  Now default values are added to the object when you call axes.add_line or axes.add_patch, so they are hidden from the user."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:143
msgid "If you want to define a custom transformation on these objects, call o.set_transform(trans) where trans is a Transformation instance."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:146
msgid "In prior versions of you wanted to add a custom line in data coords, you would have to do"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:153
msgid "l =  Line2D(dpi, bbox, x, y,"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:150
msgid "color = color, transx = transx, transy = transy, )"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:155
msgid "now all you need is"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:157
msgid "l =  Line2D(x, y, color=color)"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:159
msgid "and the axes will set the transformation for you (unless you have set your own already, in which case it will eave it unchanged)"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:163
msgid "Transformations"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:165
msgid "The entire transformation architecture has been rewritten. Previously the x and y transformations where stored in the xaxis and yaxis instances.  The problem with this approach is it only allows for separable transforms (where the x and y transformations don't depend on one another).  But for cases like polar, they do.  Now transformations operate on x,y together.  There is a new base class matplotlib.transforms.Transformation and two concrete implementations, matplotlib.transforms.SeparableTransformation and matplotlib.transforms.Affine.  The SeparableTransformation is constructed with the bounding box of the input (this determines the rectangular coordinate system of the input, i.e., the x and y view limits), the bounding box of the display, and possibly nonlinear transformations of x and y.  The 2 most frequently used transformations, data coordinates -> display and axes coordinates -> display are available as ax.transData and ax.transAxes.  See alignment_demo.py which uses axes coords."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:182
msgid "Also, the transformations should be much faster now, for two reasons"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:184
msgid "they are written entirely in extension code"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:186
msgid "because they operate on x and y together, they can do the entire transformation in one loop.  Earlier I did something along the lines of::"
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:193
msgid "Although this was done in numerix, it still involves 6 length(x) for-loops (the multiply, add, and function evaluation each for x and y).  Now all of that is done in a single pass."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:198
msgid "If you are using transformations and bounding boxes to get the cursor position in data coordinates, the method calls are a little different now.  See the updated examples/coords_demo.py which shows you how to do this."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:203
msgid "Likewise, if you are using the artist bounding boxes to pick items on the canvas with the GUI, the bbox methods are somewhat different.  You will need to see the updated examples/object_picker.py."
msgstr ""

#: ../../api/prev_api_changes/api_changes_0.54.rst:208
msgid "See unit/transforms_unit.py for many examples using the new transformations."
msgstr ""

