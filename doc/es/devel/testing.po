msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:25\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/testing.po\n"
"X-Crowdin-File-ID: 2084\n"
"Language: es_ES\n"

#: ../../devel/testing.rst:5
msgid "Testing"
msgstr ""

#: ../../devel/testing.rst:7
msgid "Matplotlib uses the pytest_ framework."
msgstr ""

#: ../../devel/testing.rst:9
msgid "The tests are in :file:`lib/matplotlib/tests`, and customizations to the pytest testing infrastructure are in :mod:`matplotlib.testing`."
msgstr ""

#: ../../devel/testing.rst:19
msgid "Requirements"
msgstr ""

#: ../../devel/testing.rst:21
msgid "To run the tests you will need to :ref:`set up Matplotlib for development <installing_for_devs>`. Note in particular the :ref:`additional dependencies <test-dependencies>` for testing."
msgstr ""

#: ../../devel/testing.rst:27
msgid "We will assume that you want to run the tests in a development setup."
msgstr ""

#: ../../devel/testing.rst:29
msgid "While you can run the tests against a regular installed version of Matplotlib, this is a far less common use case. You still need the :ref:`additional dependencies <test-dependencies>` for testing. You have to additionally get the reference images from the repository, because they are not distributed with pre-built Matplotlib packages."
msgstr ""

#: ../../devel/testing.rst:36
msgid "Running the tests"
msgstr ""

#: ../../devel/testing.rst:38
msgid "In the root directory of your development repository run::"
msgstr ""

#: ../../devel/testing.rst:43
msgid "pytest can be configured via a lot of `command-line parameters`_. Some particularly useful ones are:"
msgstr ""

#: ../../devel/testing.rst:47
msgid "``-v`` or ``--verbose``"
msgstr ""

#: ../../devel/testing.rst:47
msgid "Be more verbose"
msgstr ""

#: ../../devel/testing.rst:48
msgid "``-n NUM``"
msgstr ""

#: ../../devel/testing.rst:48
msgid "Run tests in parallel over NUM processes (requires pytest-xdist_)"
msgstr ""

#: ../../devel/testing.rst:50
msgid "``--capture=no`` or ``-s``"
msgstr ""

#: ../../devel/testing.rst:50
msgid "Do not capture stdout"
msgstr ""

#: ../../devel/testing.rst:53
msgid "To run a single test from the command line, you can provide a file path, optionally followed by the function separated by two colons, e.g., (tests do not need to be installed, but Matplotlib should be)::"
msgstr ""

#: ../../devel/testing.rst:64
msgid "Writing a simple test"
msgstr ""

#: ../../devel/testing.rst:66
msgid "Many elements of Matplotlib can be tested using standard tests. For example, here is a test from :file:`matplotlib/tests/test_basic.py`::"
msgstr ""

#: ../../devel/testing.rst:75
msgid "Pytest determines which functions are tests by searching for files whose names begin with ``\"test_\"`` and then within those files for functions beginning with ``\"test\"`` or classes beginning with ``\"Test\"``."
msgstr ""

#: ../../devel/testing.rst:79
msgid "Some tests have internal side effects that need to be cleaned up after their execution (such as created figures or modified `.rcParams`). The pytest fixture ``matplotlib.testing.conftest.mpl_test_settings`` will automatically clean these up; there is no need to do anything further."
msgstr ""

#: ../../devel/testing.rst:85
msgid "Random data in tests"
msgstr ""

#: ../../devel/testing.rst:87
msgid "Random data is a very convenient way to generate data for examples, however the randomness is problematic for testing (as the tests must be deterministic!).  To work around this set the seed in each test. For numpy use::"
msgstr ""

#: ../../devel/testing.rst:95
msgid "The seed is John Hunter's birthday."
msgstr ""

#: ../../devel/testing.rst:98
msgid "Writing an image comparison test"
msgstr ""

#: ../../devel/testing.rst:100
msgid "Writing an image-based test is only slightly more difficult than a simple test. The main consideration is that you must specify the \"baseline\", or expected, images in the `~matplotlib.testing.decorators.image_comparison` decorator. For example, this test generates a single image and automatically tests it::"
msgstr ""

#: ../../devel/testing.rst:115
msgid "The first time this test is run, there will be no baseline image to compare against, so the test will fail.  Copy the output images (in this case :file:`result_images/test_lines/test_line_dashes.png`) to the correct subdirectory of :file:`baseline_images` tree in the source directory (in this case :file:`lib/matplotlib/tests/baseline_images/test_lines`).  Put this new file under source code revision control (with ``git add``).  When rerunning the tests, they should now pass."
msgstr ""

#: ../../devel/testing.rst:123
msgid "Baseline images take a lot of space in the Matplotlib repository. An alternative approach for image comparison tests is to use the `~matplotlib.testing.decorators.check_figures_equal` decorator, which should be used to decorate a function taking two `.Figure` parameters and draws the same images on the figures using two different methods (the tested method and the baseline method).  The decorator will arrange for setting up the figures and then collect the drawn results and compare them."
msgstr ""

#: ../../devel/testing.rst:131
msgid "See the documentation of `~matplotlib.testing.decorators.image_comparison` and `~matplotlib.testing.decorators.check_figures_equal` for additional information about their use."
msgstr ""

#: ../../devel/testing.rst:136
msgid "Creating a new module in matplotlib.tests"
msgstr ""

#: ../../devel/testing.rst:138
msgid "We try to keep the tests categorized by the primary module they are testing.  For example, the tests related to the ``mathtext.py`` module are in ``test_mathtext.py``."
msgstr ""

#: ../../devel/testing.rst:143
msgid "Using GitHub Actions for CI"
msgstr ""

#: ../../devel/testing.rst:145
msgid "`GitHub Actions <https://docs.github.com/en/actions>`_ is a hosted CI system \"in the cloud\"."
msgstr ""

#: ../../devel/testing.rst:148
msgid "GitHub Actions is configured to receive notifications of new commits to GitHub repos and to run builds or tests when it sees these new commits. It looks for a YAML files in ``.github/workflows`` to see how to test the project."
msgstr ""

#: ../../devel/testing.rst:152
msgid "GitHub Actions is already enabled for the `main Matplotlib GitHub repository <https://github.com/matplotlib/matplotlib/>`_ -- for example, see `the Tests workflows <https://github.com/matplotlib/matplotlib/actions?query=workflow%3ATests>`_."
msgstr ""

#: ../../devel/testing.rst:157
msgid "GitHub Actions should be automatically enabled for your personal Matplotlib fork once the YAML workflow files are in it. It generally isn't necessary to look at these workflows, since any pull request submitted against the main Matplotlib repository will be tested."
msgstr ""

#: ../../devel/testing.rst:162
msgid "You can see the GitHub Actions results at https://github.com/your_GitHub_user_name/matplotlib/actions -- here's `an example <https://github.com/QuLogic/matplotlib/actions>`_."
msgstr ""

#: ../../devel/testing.rst:168
msgid "Using tox"
msgstr ""

#: ../../devel/testing.rst:170
msgid "`Tox <https://tox.readthedocs.io/en/latest/>`_ is a tool for running tests against multiple Python environments, including multiple versions of Python (e.g., 3.6, 3.7) and even different Python implementations altogether (e.g., CPython, PyPy, Jython, etc.), as long as all these versions are available on your system's $PATH (consider using your system package manager, e.g. apt-get, yum, or Homebrew, to install them)."
msgstr ""

#: ../../devel/testing.rst:177
msgid "tox makes it easy to determine if your working copy introduced any regressions before submitting a pull request. Here's how to use it:"
msgstr ""

#: ../../devel/testing.rst:185
msgid "You can also run tox on a subset of environments:"
msgstr ""

#: ../../devel/testing.rst:191
msgid "Tox processes everything serially so it can take a long time to test several environments. To speed it up, you might try using a new, parallelized version of tox called ``detox``. Give this a try:"
msgstr ""

#: ../../devel/testing.rst:200
msgid "Tox is configured using a file called ``tox.ini``. You may need to edit this file if you want to add new environments to test (e.g., ``py33``) or if you want to tweak the dependencies or the way the tests are run. For more info on the ``tox.ini`` file, see the `Tox Configuration Specification <https://tox.readthedocs.io/en/latest/config.html>`_."
msgstr ""

#: ../../devel/testing.rst:208
msgid "Building old versions of Matplotlib"
msgstr ""

#: ../../devel/testing.rst:210
msgid "When running a ``git bisect`` to see which commit introduced a certain bug, you may (rarely) need to build very old versions of Matplotlib.  The following constraints need to be taken into account:"
msgstr ""

#: ../../devel/testing.rst:214
msgid "Matplotlib 1.3 (or earlier) requires numpy 1.8 (or earlier)."
msgstr ""

#: ../../devel/testing.rst:217
msgid "Testing released versions of Matplotlib"
msgstr ""

#: ../../devel/testing.rst:218
msgid "Running the tests on an installation of a released version (e.g. PyPI package or conda package) also requires additional setup."
msgstr ""

#: ../../devel/testing.rst:223
msgid "For an end-user, there is usually no need to run the tests on released versions of Matplotlib. Official releases are tested before publishing."
msgstr ""

#: ../../devel/testing.rst:227
msgid "Install additional dependencies"
msgstr ""

#: ../../devel/testing.rst:228
msgid "Install the :ref:`additional dependencies for testing <test-dependencies>`."
msgstr ""

#: ../../devel/testing.rst:231
msgid "Obtain the reference images"
msgstr ""

#: ../../devel/testing.rst:232
msgid "Many tests compare the plot result against reference images. The reference images are not part of the regular packaged versions (pip wheels or conda packages). If you want to run tests with reference images, you need to obtain the reference images matching the version of Matplotlib you want to test."
msgstr ""

#: ../../devel/testing.rst:237
msgid "To do so, either download the matching source distribution ``matplotlib-X.Y.Z.tar.gz`` from `PyPI <https://pypi.org/project/matplotlib/>`_ or alternatively, clone the git repository and ``git checkout vX.Y.Z``. Copy the folder :file:`lib/matplotlib/tests/baseline_images` to the folder :file:`matplotlib/tests` of your the matplotlib installation to test. The correct target folder can be found using::"
msgstr ""

#: ../../devel/testing.rst:246
msgid "An analogous copying of :file:`lib/mpl_toolkits/tests/baseline_images` is necessary for testing ``mpl_toolkits``."
msgstr ""

#: ../../devel/testing.rst:250
msgid "Run the tests"
msgstr ""

#: ../../devel/testing.rst:251
msgid "To run the all the tests on your installed version of Matplotlib::"
msgstr ""

#: ../../devel/testing.rst:255
msgid "The test discovery scope can be narrowed to single test modules or even single functions::"
msgstr ""

