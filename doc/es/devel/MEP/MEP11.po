msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-05 16:33\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/MEP/MEP11.po\n"
"X-Crowdin-File-ID: 2000\n"
"Language: es_ES\n"

#: ../../devel/MEP/MEP11.rst:3
msgid "MEP11: Third-party dependencies"
msgstr ""

#: ../../devel/MEP/MEP11.rst:8
msgid "This MEP attempts to improve the way in which third-party dependencies in matplotlib are handled."
msgstr ""

#: ../../devel/MEP/MEP11.rst:12
msgid "Status"
msgstr ""

#: ../../devel/MEP/MEP11.rst:14
msgid "**Completed** -- needs to be merged"
msgstr ""

#: ../../devel/MEP/MEP11.rst:17
msgid "Branches and Pull requests"
msgstr ""

#: ../../devel/MEP/MEP11.rst:19
msgid "#1157: Use automatic dependency resolution"
msgstr ""

#: ../../devel/MEP/MEP11.rst:21
msgid "#1290: Debundle pyparsing"
msgstr ""

#: ../../devel/MEP/MEP11.rst:23
msgid "#1261: Update six to 1.2"
msgstr ""

#: ../../devel/MEP/MEP11.rst:26
msgid "Abstract"
msgstr "Resumen"

#: ../../devel/MEP/MEP11.rst:28
msgid "One of the goals of matplotlib has been to keep it as easy to install as possible.  To that end, some third-party dependencies are included in the source tree and, under certain circumstances, installed alongside matplotlib.  This MEP aims to resolve some problems with that approach, bring some consistency, while continuing to make installation convenient."
msgstr ""

#: ../../devel/MEP/MEP11.rst:35
msgid "At the time that was initially done, setuptools_, easy_install_ and PyPI_ were not mature enough to be relied on.  However, at present, we should be able to safely leverage the \"modern\" versions of those tools, distribute_ and pip_."
msgstr ""

#: ../../devel/MEP/MEP11.rst:40
msgid "While matplotlib has dependencies on both Python libraries and C/C++ libraries, this MEP addresses only the Python libraries so as to not confuse the issue.  C libraries represent a larger and mostly orthogonal set of problems."
msgstr ""

#: ../../devel/MEP/MEP11.rst:46
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP11.rst:48
msgid "matplotlib depends on the following third-party Python libraries:"
msgstr ""

#: ../../devel/MEP/MEP11.rst:50
msgid "Numpy"
msgstr ""

#: ../../devel/MEP/MEP11.rst:51
msgid "dateutil (pure Python)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:52
msgid "pytz (pure Python)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:53
msgid "six -- required by dateutil (pure Python)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:54
msgid "pyparsing (pure Python)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:55
msgid "PIL (optional)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:56
msgid "GUI frameworks: pygtk, gobject, tkinter, PySide, PyQt4, wx (all optional, but one is required for an interactive GUI)"
msgstr ""

#: ../../devel/MEP/MEP11.rst:60
msgid "Current behavior"
msgstr ""

#: ../../devel/MEP/MEP11.rst:62
msgid "When installing from source, a :program:`git` checkout or pip_:"
msgstr ""

#: ../../devel/MEP/MEP11.rst:64
msgid ":file:`setup.py` attempts to ``import numpy``.  If this fails, the installation fails."
msgstr ""

#: ../../devel/MEP/MEP11.rst:67
msgid "For each of dateutil_, pytz_ and six_, :file:`setup.py` attempts to import them (from the top-level namespace).  If that fails, matplotlib installs its local copy of the library into the top-level namespace."
msgstr ""

#: ../../devel/MEP/MEP11.rst:72
msgid "pyparsing_ is always installed inside of the matplotlib namespace."
msgstr ""

#: ../../devel/MEP/MEP11.rst:75
msgid "This behavior is most surprising when used with pip_, because no pip_ dependency resolution is performed, even though it is likely to work for all of these packages."
msgstr ""

#: ../../devel/MEP/MEP11.rst:79
msgid "The fact that pyparsing_ is installed in the matplotlib namespace has reportedly (#1290) confused some users into thinking it is a matplotlib-related module and import it from there rather than the top-level."
msgstr ""

#: ../../devel/MEP/MEP11.rst:84
msgid "When installing using the Windows installer, dateutil_, pytz_ and six_ are installed at the top-level *always*, potentially overwriting already installed copies of those libraries."
msgstr ""

#: ../../devel/MEP/MEP11.rst:88
msgid "TODO: Describe behavior with the OS-X installer."
msgstr ""

#: ../../devel/MEP/MEP11.rst:90
msgid "When installing using a package manager (Debian, RedHat, MacPorts etc.), this behavior actually does the right thing, and there are no special patches in the matplotlib packages to deal with the fact that we handle dateutil_, pytz_ and six_ in this way.  However, care should be taken that whatever approach we move to continues to work in that context."
msgstr ""

#: ../../devel/MEP/MEP11.rst:97
msgid "Maintaining these packages in the matplotlib tree and making sure they are up-to-date is a maintenance burden.  Advanced new features that may require a third-party pure Python library have a higher barrier to inclusion because of this burden."
msgstr ""

#: ../../devel/MEP/MEP11.rst:104
msgid "Desired behavior"
msgstr ""

#: ../../devel/MEP/MEP11.rst:106
msgid "Third-party dependencies are downloaded and installed from their canonical locations by leveraging pip_, distribute_ and PyPI_."
msgstr ""

#: ../../devel/MEP/MEP11.rst:109
msgid "dateutil_, pytz_, and pyparsing_ should be made into optional dependencies -- though obviously some features would fail if they aren't installed.  This will allow the user to decide whether they want to bother installing a particular feature."
msgstr ""

#: ../../devel/MEP/MEP11.rst:115
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP11.rst:117
msgid "For installing from source, and assuming the user has all of the C-level compilers and dependencies, this can be accomplished fairly easily using distribute_ and following the instructions `here <https://pypi.org/project/distribute/>`_.  The only anticipated change to the matplotlib library code will be to import pyparsing_ from the top-level namespace rather than from within matplotlib.  Note that distribute_ will also allow us to remove the direct dependency on six_, since it is, strictly speaking, only a direct dependency of dateutil_."
msgstr ""

#: ../../devel/MEP/MEP11.rst:127
msgid "For binary installations, there are a number of alternatives (here ordered from best/hardest to worst/easiest):"
msgstr ""

#: ../../devel/MEP/MEP11.rst:130
msgid "The distutils wininst installer allows a post-install script to run.  It might be possible to get this script to run pip_ to install the other dependencies.  (See `this thread <http://grokbase.com/t/python/distutils-sig/109bdnfhp4/distutils-ann-setuptools-post-install-script-for-bdist-wininst>`_ for someone who has trod that ground before)."
msgstr ""

#: ../../devel/MEP/MEP11.rst:136
msgid "Continue to ship dateutil_, pytz_, six_ and pyparsing_ in our installer, but use the post-install-script to install them *only* if they can not already be found."
msgstr ""

#: ../../devel/MEP/MEP11.rst:140
msgid "Move all of these packages inside a (new) ``matplotlib.extern`` namespace so it is clear for outside users that these are external packages.  Add some conditional imports in the core matplotlib codebase so dateutil_ (at the top-level) is tried first, and failing that ``matplotlib.extern.dateutil`` is used."
msgstr ""

#: ../../devel/MEP/MEP11.rst:146
msgid "2 and 3 are undesirable as they still require maintaining copies of these packages in our tree -- and this is exacerbated by the fact that they are used less -- only in the binary installers.  None of these 3 approaches address Numpy, which will still have to be manually installed using an installer."
msgstr ""

#: ../../devel/MEP/MEP11.rst:152
msgid "TODO: How does this relate to the Mac OS-X installer?"
msgstr ""

#: ../../devel/MEP/MEP11.rst:155
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP11.rst:157
msgid "At present, matplotlib can be installed from source on a machine without the third party dependencies and without an internet connection.  After this change, an internet connection (and a working PyPI) will be required to install matplotlib for the first time. (Subsequent matplotlib updates or development work will run without accessing the network)."
msgstr ""

#: ../../devel/MEP/MEP11.rst:165
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP11.rst:167
msgid "Distributing binary eggs doesn't feel like a usable solution.  That requires getting easy_install_ installed first, and Windows users generally prefer the well known ``.exe`` or ``.msi`` installer that works out of the box."
msgstr ""

