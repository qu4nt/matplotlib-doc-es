msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-12 14:57\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/MEP/MEP26.po\n"
"X-Crowdin-File-ID: 2022\n"
"Language: es_ES\n"

#: ../../devel/MEP/MEP26.rst:3
msgid "MEP26: Artist styling"
msgstr ""

#: ../../devel/MEP/MEP26.rst:10
msgid "Status"
msgstr ""

#: ../../devel/MEP/MEP26.rst:12
msgid "**Rejected**"
msgstr ""

#: ../../devel/MEP/MEP26.rst:15
msgid "Branches and Pull requests"
msgstr ""

#: ../../devel/MEP/MEP26.rst:18
msgid "Abstract"
msgstr ""

#: ../../devel/MEP/MEP26.rst:20
msgid "This MEP proposes a new stylesheet implementation to allow more comprehensive and dynamic styling of artists."
msgstr ""

#: ../../devel/MEP/MEP26.rst:23
msgid "The current version of matplotlib (1.4.0) allows stylesheets based on the rcParams syntax to be applied before creation of a plot.  The methodology below proposes a new syntax, based on CSS, which would allow styling of individual artists and properties, which can be applied dynamically to existing objects."
msgstr ""

#: ../../devel/MEP/MEP26.rst:29
msgid "This is related to (and makes steps toward) the overall goal of moving to a DOM/tree-like architecture."
msgstr ""

#: ../../devel/MEP/MEP26.rst:34
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP26.rst:36
msgid "Currently, the look and appearance of existing artist objects (figure, axes, Line2D etc...) can only be updated via ``set_`` and ``get_`` methods on the artist object, which is quite laborious, especially if no reference to the artist(s) has been stored.  The new style sheets introduced in 1.4 allow styling before a plot is created, but do not offer any means to dynamically update plots or distinguish between artists of the same type (i.e. to specify the ``line color`` and ``line style`` separately for differing `.Line2D` objects)."
msgstr ""

#: ../../devel/MEP/MEP26.rst:45
msgid "The initial development should concentrate on allowing styling of artist primitives (those `.Artist`\\s that do not contain other `.Artist`\\s), and further development could expand the CSS syntax rules and parser to allow more complex styling. See the appendix for a list of primitives."
msgstr ""

#: ../../devel/MEP/MEP26.rst:51
msgid "The new methodology would require development of a number of steps:"
msgstr ""

#: ../../devel/MEP/MEP26.rst:53
msgid "A new stylesheet syntax (likely based on CSS) to allow selection of artists by type, class, id etc..."
msgstr ""

#: ../../devel/MEP/MEP26.rst:55
msgid "A mechanism by which to parse a stylesheet into a tree"
msgstr ""

#: ../../devel/MEP/MEP26.rst:56
msgid "A mechanism by which to translate the parse-tree into something which can be used to update the properties of relevant artists. Ideally this would implement a method by which to traverse the artists in a tree-like structure."
msgstr ""

#: ../../devel/MEP/MEP26.rst:60
msgid "A mechanism by which to generate a stylesheet from existing artist properties. This would be useful to allow a user to export a stylesheet from an existing figure (where the appearance may have been set using the matplotlib API)..."
msgstr ""

#: ../../devel/MEP/MEP26.rst:66
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP26.rst:68
msgid "It will be easiest to allow a '3rd party' to modify/set the style of an artist if the 'style' is created as a separate class and store against the artist as a property.  The `.GraphicsContextBase` class already provides a the basis of a ``Style`` class and an artist's `~.Artist.draw` method can be refactored to use the ``Style`` class rather than setting up its own `.GraphicsContextBase` and transferring its style-related properties to it.  A minimal example of how this could be implemented is shown here: https://github.com/JamesRamm/mpl_experiment"
msgstr ""

#: ../../devel/MEP/MEP26.rst:76
msgid "IMO, this will also make the API and code base much neater as individual get/set methods for artist style properties are now redundant...  Indirectly related would be a general drive to replace get/set methods with properties. Implementing the style class with properties would be a big stride toward this..."
msgstr ""

#: ../../devel/MEP/MEP26.rst:82
msgid "For initial development, I suggest developing a syntax based on a much (much much) simplified version of CSS. I am in favour of dubbing this Artist Style Sheets :+1: :"
msgstr ""

#: ../../devel/MEP/MEP26.rst:87
msgid "BNF Grammar"
msgstr ""

#: ../../devel/MEP/MEP26.rst:89
msgid "I propose a very simple syntax to implement initially (like a proof of concept), which can be expanded upon in the future. The BNF form of the syntax is given below and then explained ::"
msgstr ""

#: ../../devel/MEP/MEP26.rst:105
msgid "``ArtistIdent``, ``Ident``, ``Number`` and ``Colour`` are tokens (the basic building blocks of the expression) which are defined by regular expressions."
msgstr ""

#: ../../devel/MEP/MEP26.rst:110
msgid "Syntax"
msgstr ""

#: ../../devel/MEP/MEP26.rst:112
msgid "A CSS stylesheet consists of a series of **rule sets** in hierarchical order (rules are applied from top to bottom). Each rule follows the syntax ::"
msgstr ""

#: ../../devel/MEP/MEP26.rst:118
msgid "Each rule can have any number of ``attribute: value`` pairs, and a stylesheet can have any number of rules."
msgstr ""

#: ../../devel/MEP/MEP26.rst:121
msgid "The initial syntax is designed only for `.Artist` primitives. It does not address the question of how to set properties on `.Container` types (whose properties may themselves be `.Artist`\\s with settable properties), however, a future solution to this could simply be nested ``RuleSet``\\s"
msgstr ""

#: ../../devel/MEP/MEP26.rst:128
msgid "Selectors"
msgstr ""

#: ../../devel/MEP/MEP26.rst:131
msgid "Selectors define the object to which the attribute updates should be applied. As a starting point, I propose just 2 selectors to use in initial development:"
msgstr ""

#: ../../devel/MEP/MEP26.rst:137
msgid "Artist Type Selector"
msgstr ""

#: ../../devel/MEP/MEP26.rst:140
msgid "Select an `.Artist` by it's type. E.g `.Line2D` or `.Text`::"
msgstr ""

#: ../../devel/MEP/MEP26.rst:144
msgid "The regex for matching the artist type selector (``ArtistIdent`` in the BNF grammar) would be::"
msgstr "La expresión regular para que corresponda con el selector de tipo de artist (``ArtistIdent`` en la gramática BNF) sería::"

#: ../../devel/MEP/MEP26.rst:149
msgid "GID selector"
msgstr "Selector GID"

#: ../../devel/MEP/MEP26.rst:151
msgid "Select an `.Artist` by its ``gid``::"
msgstr "Seleccionar un `.Artist` por su ``gid``::"

#: ../../devel/MEP/MEP26.rst:155
msgid "A ``gid`` can be any string, so the regex could be as follows::"
msgstr "Un ``gid`` puede ser cualquier cadena, por lo que la regex podría ser la siguiente::"

#: ../../devel/MEP/MEP26.rst:160
msgid "The above selectors roughly correspond to their CSS counterparts (http://www.w3.org/TR/CSS21/selector.html)"
msgstr "Los selectores anteriores se corresponden aproximadamente con sus homólogos en CSS (http://www.w3.org/TR/CSS21/selector.html)"

#: ../../devel/MEP/MEP26.rst:164
msgid "Attributes and values"
msgstr "Atributos y valores"

#: ../../devel/MEP/MEP26.rst:166
msgid "``Attributes`` are any valid (settable) property for the `.Artist` in question."
msgstr "Los ``Atributos`` son cualquier propiedad válida (configurable) para el `.Artist` en cuestión."

#: ../../devel/MEP/MEP26.rst:167
msgid "``Values`` are any valid value for the property (Usually a string, or number)."
msgstr "``Valores`` son cualquier valor válido para la propiedad (normalmente una cadena, o un número)."

#: ../../devel/MEP/MEP26.rst:170
msgid "Parsing"
msgstr "Analizar"

#: ../../devel/MEP/MEP26.rst:172
msgid "Parsing would consist of breaking the stylesheet into tokens (the python cookbook gives a nice tokenizing recipe on page 66), applying the syntax rules and constructing a ``Tree``. This requires defining the grammar of the stylesheet (again, we can borrow from CSS) and writing a parser. Happily, there is a recipe for this in the python cookbook as well."
msgstr ""

#: ../../devel/MEP/MEP26.rst:181
msgid "Visitor pattern for matplotlib figure"
msgstr ""

#: ../../devel/MEP/MEP26.rst:183
msgid "In order to apply the stylesheet rules to the relevant artists, we need to 'visit' each artist in a figure and apply the relevant rule. Here is a visitor class (again, thanks to python cookbook), where each ``node`` would be an artist in the figure. A ``visit_`` method would need to be implemented for each mpl artist, to handle the different properties for each ::"
msgstr ""

#: ../../devel/MEP/MEP26.rst:198
msgid "An ``evaluator`` class would then take the stylesheet rules and implement the visitor on each one of them."
msgstr ""

#: ../../devel/MEP/MEP26.rst:204
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP26.rst:206
msgid "Implementing a separate ``Style`` class would break backward compatibility as many get/set methods on an artist would become redundant.  While it would be possible to alter these methods to hook into the ``Style`` class (stored as a property against the artist), I would be in favor of simply removing them to both neaten/simplify the codebase and to provide a simple, uncluttered API..."
msgstr ""

#: ../../devel/MEP/MEP26.rst:214
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP26.rst:216
msgid "No alternatives, but some of the ground covered here overlaps with MEP25, which may assist in this development"
msgstr ""

#: ../../devel/MEP/MEP26.rst:220
msgid "Appendix"
msgstr ""

#: ../../devel/MEP/MEP26.rst:223
msgid "Matplotlib primitives"
msgstr ""

#: ../../devel/MEP/MEP26.rst:225
msgid "This will form the initial selectors which stylesheets can use."
msgstr ""

#: ../../devel/MEP/MEP26.rst:227
msgid "Line2D"
msgstr ""

#: ../../devel/MEP/MEP26.rst:228
msgid "Text"
msgstr ""

#: ../../devel/MEP/MEP26.rst:229
msgid "AxesImage"
msgstr ""

#: ../../devel/MEP/MEP26.rst:230
msgid "FigureImage"
msgstr ""

#: ../../devel/MEP/MEP26.rst:231
msgid "Patch"
msgstr ""

