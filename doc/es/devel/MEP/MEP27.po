msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-12 16:06\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/MEP/MEP27.po\n"
"X-Crowdin-File-ID: 2024\n"
"Language: es_ES\n"

#: ../../devel/MEP/MEP27.rst:3
msgid "MEP27: Decouple pyplot from backends"
msgstr "MEP27: Desacoplar pyplot de los backends"

#: ../../devel/MEP/MEP27.rst:10
msgid "Status"
msgstr "Estado"

#: ../../devel/MEP/MEP27.rst:11
msgid "**Progress**"
msgstr "**Progreso**"

#: ../../devel/MEP/MEP27.rst:14
msgid "Branches and Pull requests"
msgstr "Ramas y Pull requests"

#: ../../devel/MEP/MEP27.rst:15
msgid "Main PR (including GTK3): + https://github.com/matplotlib/matplotlib/pull/4143"
msgstr "Main PR (including GTK3): + https://github.com/matplotlib/matplotlib/pull/4143"

#: ../../devel/MEP/MEP27.rst:18
msgid "Backend specific branch diffs: + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...OceanWolf:backend-refactor-tkagg + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...OceanWolf:backend-refactor-qt + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...backend-refactor-wx"
msgstr "Diferencias de rama específicas del backend: + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...OceanWolf:backend-refactor-tkagg + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...OceanWolf:backend-refactor-qt + https://github.com/OceanWolf/matplotlib/compare/backend-refactor...backend-refactor-wx"

#: ../../devel/MEP/MEP27.rst:24
msgid "Abstract"
msgstr "Resumen"

#: ../../devel/MEP/MEP27.rst:26
msgid "This MEP refactors the backends to give a more structured and consistent API, removing generic code and consolidate existing code. To do this we propose splitting:"
msgstr "Este MEP refactoriza los backends para dar una API más estructurada y consistente, eliminando el código genérico y consolidando el código existente. Para ello proponemos la división:"

#: ../../devel/MEP/MEP27.rst:30
msgid "``FigureManagerBase`` and its derived classes into the core functionality class ``FigureManager`` and a backend specific class ``WindowBase`` and"
msgstr ""

#: ../../devel/MEP/MEP27.rst:33
msgid "``ShowBase`` and its derived classes into ``Gcf.show_all`` and ``MainLoopBase``."
msgstr ""

#: ../../devel/MEP/MEP27.rst:36
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP27.rst:38
msgid "This MEP aims to consolidate the backends API into one single uniform API, removing generic code out of the backend (which includes ``_pylab_helpers`` and ``Gcf``), and push code to a more appropriate level in matplotlib.  With this we automatically remove inconsistencies that appear in the backends, such as ``FigureManagerBase.resize(w, h)`` which sometimes sets the canvas, and other times set the entire window to the dimensions given, depending on the backend."
msgstr ""

#: ../../devel/MEP/MEP27.rst:47
msgid "Two main places for generic code appear in the classes derived from ``FigureManagerBase`` and ``ShowBase``."
msgstr ""

#: ../../devel/MEP/MEP27.rst:50
msgid "``FigureManagerBase`` has **three** jobs at the moment:"
msgstr ""

#: ../../devel/MEP/MEP27.rst:52
msgid "The documentation describes it as a *``Helper class for pyplot mode, wraps everything up into a neat bundle''*"
msgstr ""

#: ../../devel/MEP/MEP27.rst:54
#, python-format
msgid "But it doesn't just wrap the canvas and toolbar, it also does all of the windowing tasks itself.  The conflation of these two tasks gets seen the best in the following line: ```python self.set_window_title(\"Figure %d\" % num) ``` This combines backend specific code ``self.set_window_title(title)`` with matplotlib generic code ``title = \"Figure %d\" % num``."
msgstr ""

#: ../../devel/MEP/MEP27.rst:61
msgid "Currently the backend specific subclass of ``FigureManager`` decides when to end the mainloop.  This also seems very wrong as the figure should have no control over the other figures."
msgstr ""

#: ../../devel/MEP/MEP27.rst:66
msgid "``ShowBase`` has two jobs:"
msgstr ""

#: ../../devel/MEP/MEP27.rst:68
msgid "It has the job of going through all figure managers registered in ``_pylab_helpers.Gcf`` and telling them to show themselves."
msgstr ""

#: ../../devel/MEP/MEP27.rst:70
msgid "And secondly it has the job of performing the backend specific ``mainloop`` to block the main programme and thus keep the figures from dying."
msgstr ""

#: ../../devel/MEP/MEP27.rst:75
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP27.rst:77
msgid "The description of this MEP gives us most of the solution:"
msgstr ""

#: ../../devel/MEP/MEP27.rst:79
msgid "To remove the windowing aspect out of ``FigureManagerBase`` letting it simply wrap this new class along with the other backend classes. Create a new ``WindowBase`` class that can handle this functionality, with pass-through methods (:arrow_right:) to ``WindowBase``.  Classes that subclass ``WindowBase`` should also subclass the GUI specific window class to ensure backward compatibility (``manager.window == manager.window``)."
msgstr ""

#: ../../devel/MEP/MEP27.rst:86
msgid "Refactor the mainloop of ``ShowBase`` into ``MainLoopBase``, which encapsulates the end of the loop as well.  We give an instance of ``MainLoop`` to ``FigureManager`` as a key unlock the exit method (requiring all keys returned before the loop can die).  Note this opens the possibility for multiple backends to run concurrently."
msgstr ""

#: ../../devel/MEP/MEP27.rst:91
msgid "Now that ``FigureManagerBase`` has no backend specifics in it, to rename it to ``FigureManager``, and move to a new file ``backend_managers.py`` noting that:"
msgstr ""

#: ../../devel/MEP/MEP27.rst:95
msgid "This allows us to break up the conversion of backends into separate PRs as we can keep the existing ``FigureManagerBase`` class and its dependencies intact."
msgstr ""

#: ../../devel/MEP/MEP27.rst:98
msgid "and this also anticipates MEP22 where the new ``NavigationBase`` has morphed into a backend independent ``ToolManager``."
msgstr ""

#: ../../devel/MEP/MEP27.rst:103
msgid "FigureManagerBase(canvas, num)"
msgstr ""

#: ../../devel/MEP/MEP27.rst:103
msgid "FigureManager(figure, num)"
msgstr ""

#: ../../devel/MEP/MEP27.rst:103
msgid "``WindowBase(title)``"
msgstr ""

#: ../../devel/MEP/MEP27.rst:103 ../../devel/MEP/MEP27.rst:131
msgid "Notes"
msgstr ""

#: ../../devel/MEP/MEP27.rst:106
msgid "show"
msgstr ""

#: ../../devel/MEP/MEP27.rst:108
msgid "destroy"
msgstr ""

#: ../../devel/MEP/MEP27.rst:108
msgid "calls destroy on all components"
msgstr ""

#: ../../devel/MEP/MEP27.rst:111
msgid "full_screen_toggle"
msgstr ""

#: ../../devel/MEP/MEP27.rst:111
msgid "handles logic"
msgstr ""

#: ../../devel/MEP/MEP27.rst:111
msgid "set_fullscreen"
msgstr ""

#: ../../devel/MEP/MEP27.rst:113
msgid "resize"
msgstr ""

#: ../../devel/MEP/MEP27.rst:115
msgid "key_press"
msgstr ""

#: ../../devel/MEP/MEP27.rst:117
msgid "get_window_title"
msgstr ""

#: ../../devel/MEP/MEP27.rst:119
msgid "set_window_title"
msgstr ""

#: ../../devel/MEP/MEP27.rst:121
msgid "_get_toolbar"
msgstr ""

#: ../../devel/MEP/MEP27.rst:121
msgid "A common method to all subclasses of FigureManagerBase"
msgstr ""

#: ../../devel/MEP/MEP27.rst:124
msgid "set_default_size"
msgstr ""

#: ../../devel/MEP/MEP27.rst:126
msgid "add_element_to_window"
msgstr ""

#: ../../devel/MEP/MEP27.rst:131
msgid "ShowBase"
msgstr ""

#: ../../devel/MEP/MEP27.rst:131
msgid "MainLoopBase"
msgstr ""

#: ../../devel/MEP/MEP27.rst:133
msgid "mainloop"
msgstr ""

#: ../../devel/MEP/MEP27.rst:133
msgid "begin"
msgstr ""

#: ../../devel/MEP/MEP27.rst:135
msgid "end"
msgstr ""

#: ../../devel/MEP/MEP27.rst:135
msgid "Gets called automagically when no more instances of the subclass exist"
msgstr ""

#: ../../devel/MEP/MEP27.rst:142
msgid "__call__"
msgstr ""

#: ../../devel/MEP/MEP27.rst:142
msgid "Method moved to Gcf.show_all"
msgstr ""

#: ../../devel/MEP/MEP27.rst:148
msgid "Future compatibility"
msgstr ""

#: ../../devel/MEP/MEP27.rst:150
msgid "As eluded to above when discussing MEP 22, this refactor makes it easy to add in new generic features.  At the moment, MEP 22 has to make ugly hacks to each class extending from ``FigureManagerBase``.  With this code, this only needs to get made in the single ``FigureManager`` class.  This also makes the later deprecation of ``NavigationToolbar2`` very straightforward, only needing to touch the single ``FigureManager`` class"
msgstr ""

#: ../../devel/MEP/MEP27.rst:158
msgid "MEP 23 makes for another use case where this refactored code will come in very handy."
msgstr ""

#: ../../devel/MEP/MEP27.rst:162
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP27.rst:164
msgid "As we leave all backend code intact, only adding missing methods to existing classes, this should work seamlessly for all use cases.  The only difference will lie for backends that used ``FigureManager.resize`` to resize the canvas and not the window, due to the standardisation of the API."
msgstr ""

#: ../../devel/MEP/MEP27.rst:170
msgid "I would envision that the classes made obsolete by this refactor get deprecated and removed on the same timetable as ``NavigationToolbar2``, also note that the change in call signature to the ``FigureCanvasWx`` constructor, while backward compatible, I think the old (imho ugly style) signature should get deprecated and removed in the same manner as everything else."
msgstr ""

#: ../../devel/MEP/MEP27.rst:178
msgid "backend"
msgstr ""

#: ../../devel/MEP/MEP27.rst:178
msgid "manager.resize(w,h)"
msgstr ""

#: ../../devel/MEP/MEP27.rst:178
msgid "Extra"
msgstr ""

#: ../../devel/MEP/MEP27.rst:180
msgid "gtk3"
msgstr ""

#: ../../devel/MEP/MEP27.rst:180 ../../devel/MEP/MEP27.rst:184
msgid "window"
msgstr ""

#: ../../devel/MEP/MEP27.rst:182
msgid "Tk"
msgstr ""

#: ../../devel/MEP/MEP27.rst:182 ../../devel/MEP/MEP27.rst:186
msgid "canvas"
msgstr ""

#: ../../devel/MEP/MEP27.rst:184
msgid "Qt"
msgstr ""

#: ../../devel/MEP/MEP27.rst:186
msgid "Wx"
msgstr ""

#: ../../devel/MEP/MEP27.rst:186
msgid "FigureManagerWx had ``frame`` as an alias to window, so this also breaks BC."
msgstr ""

#: ../../devel/MEP/MEP27.rst:194
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP27.rst:196
msgid "If there were any alternative solutions to solving the same problem, they should be discussed here, along with a justification for the chosen approach."
msgstr ""

#: ../../devel/MEP/MEP27.rst:201
msgid "Questions"
msgstr ""

#: ../../devel/MEP/MEP27.rst:203
msgid "Mdehoon: Can you elaborate on how to run multiple backends concurrently?"
msgstr ""

#: ../../devel/MEP/MEP27.rst:206
msgid "OceanWolf: @mdehoon, as I say, not for this MEP, but I see this MEP opens it up as a future possibility.  Basically the ``MainLoopBase`` class acts a per backend Gcf, in this MEP it tracks the number of figures open per backend, and manages the mainloops for those backends.  It closes the backend specific mainloop when it detects that no figures remain open for that backend.  Because of this I imagine that with only a small amount of tweaking that we can do full-multi-backend matplotlib.  No idea yet why one would want to, but I leave the possibility there in MainLoopBase.  With all the backend-code specifics refactored out of ``FigureManager`` also aids in this, one manager to rule them (the backends) all."
msgstr ""

#: ../../devel/MEP/MEP27.rst:218
msgid "Mdehoon: @OceanWolf, OK, thanks for the explanation. Having a uniform API for the backends is very important for the maintainability of matplotlib. I think this MEP is a step in the right direction."
msgstr ""

