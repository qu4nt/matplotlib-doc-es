msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-07-06 14:33\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/MEP/MEP10.po\n"
"X-Crowdin-File-ID: 1998\n"
"Language: es_ES\n"

#: ../../devel/MEP/MEP10.rst:3
msgid "MEP10: Docstring consistency"
msgstr "MEP10: Coherencia de la cadena de documentación"

#: ../../devel/MEP/MEP10.rst:8
msgid "Status"
msgstr "Estado"

#: ../../devel/MEP/MEP10.rst:10
msgid "**Progress**"
msgstr "**Progreso**"

#: ../../devel/MEP/MEP10.rst:12
msgid "This is still an on-going effort"
msgstr "Esto sigue siendo un esfuerzo en curso"

#: ../../devel/MEP/MEP10.rst:15
msgid "Branches and Pull requests"
msgstr "Ramas y Pull requests"

#: ../../devel/MEP/MEP10.rst:19
msgid "Abstract"
msgstr "Resumen"

#: ../../devel/MEP/MEP10.rst:21
msgid "matplotlib has a great deal of inconsistency between docstrings.  This not only makes the docs harder to read, but it is harder on contributors, because they don't know which specifications to follow. There should be a clear docstring convention that is followed consistently."
msgstr "matplotlib tiene una gran inconsistencia entre cadenas de documentación.  Esto no sólo hace que los documentos sean más difíciles de leer, sino que es más difícil para los colaboradores, porque no saben qué especificaciones seguir. Debería haber una convención clara de cadenas de documentación que se siguiera de forma consistente."

#: ../../devel/MEP/MEP10.rst:27
msgid "The organization of the API documentation is difficult to follow. Some pages, such as pyplot and axes, are enormous and hard to browse. There should instead be short summary tables that link to detailed documentation.  In addition, some of the docstrings themselves are quite long and contain redundant information."
msgstr ""

#: ../../devel/MEP/MEP10.rst:33
msgid "Building the documentation takes a long time and uses a :file:`make.py` script rather than a Makefile."
msgstr ""

#: ../../devel/MEP/MEP10.rst:37
msgid "Detailed description"
msgstr ""

#: ../../devel/MEP/MEP10.rst:39
msgid "There are number of new tools and conventions available since matplotlib started using Sphinx that make life easier.  The following is a list of proposed changes to docstrings, most of which involve these new features."
msgstr ""

#: ../../devel/MEP/MEP10.rst:45
msgid "Numpy docstring format"
msgstr ""

#: ../../devel/MEP/MEP10.rst:47
msgid "`Numpy docstring format <https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_: This format divides the docstring into clear sections, each having different parsing rules that make the docstring easy to read both as raw text and as HTML.  We could consider alternatives, or invent our own, but this is a strong choice, as it's well used and understood in the Numpy/Scipy community."
msgstr ""

#: ../../devel/MEP/MEP10.rst:56
msgid "Cross references"
msgstr ""

#: ../../devel/MEP/MEP10.rst:58
msgid "Most of the docstrings in matplotlib use explicit \"roles\" when linking to other items, for example: ``:func:`myfunction```.  As of Sphinx 0.4, there is a \"default_role\" that can be set to \"obj\", which will polymorphically link to a Python object of any type.  This allows one to write ```myfunction``` instead.  This makes docstrings much easier to read and edit as raw text.  Additionally, Sphinx allows for setting a current module, so links like ```~matplotlib.axes.Axes.set_xlim``` could be written as ```~axes.Axes.set_xlim```."
msgstr ""

#: ../../devel/MEP/MEP10.rst:68
msgid "Overriding signatures"
msgstr ""

#: ../../devel/MEP/MEP10.rst:70
msgid "Many methods in matplotlib use the ``*args`` and ``**kwargs`` syntax to dynamically handle the keyword arguments that are accepted by the function, or to delegate on to another function.  This, however, is often not useful as a signature in the documentation.  For this reason, many matplotlib methods include something like::"
msgstr ""

#: ../../devel/MEP/MEP10.rst:87
msgid "This can't be parsed by Sphinx, and is rather verbose in raw text.  As of Sphinx 1.1, if the ``autodoc_docstring_signature`` config value is set to True, Sphinx will extract a replacement signature from the first line of the docstring, allowing this::"
msgstr ""

#: ../../devel/MEP/MEP10.rst:101
msgid "The explicit signature will replace the actual Python one in the generated documentation."
msgstr ""

#: ../../devel/MEP/MEP10.rst:105
msgid "Linking rather than duplicating"
msgstr ""

#: ../../devel/MEP/MEP10.rst:107
msgid "Many of the docstrings include long lists of accepted keywords by interpolating things into the docstring at load time.  This makes the docstrings very long.  Also, since these tables are the same across many docstrings, it inserts a lot of redundant information in the docs -- particularly a problem in the printed version."
msgstr ""

#: ../../devel/MEP/MEP10.rst:113
msgid "These tables should be moved to docstrings on functions whose only purpose is for help.  The docstrings that refer to these tables should link to them, rather than including them verbatim."
msgstr ""

#: ../../devel/MEP/MEP10.rst:118
msgid "autosummary extension"
msgstr ""

#: ../../devel/MEP/MEP10.rst:120
msgid "The Sphinx autosummary extension should be used to generate summary tables, that link to separate pages of documentation.  Some classes that have many methods (e.g. `~.axes.Axes`) should be documented with one method per page, whereas smaller classes should have all of their methods together."
msgstr ""

#: ../../devel/MEP/MEP10.rst:127
msgid "Examples linking to relevant documentation"
msgstr ""

#: ../../devel/MEP/MEP10.rst:129
msgid "The examples, while helpful at illustrating how to use a feature, do not link back to the relevant docstrings.  This could be addressed by adding module-level docstrings to the examples, and then including that docstring in the parsed content on the example page.  These docstrings could easily include references to any other part of the documentation."
msgstr ""

#: ../../devel/MEP/MEP10.rst:137
msgid "Documentation using help() vs. a browser"
msgstr ""

#: ../../devel/MEP/MEP10.rst:139
msgid "Using Sphinx markup in the source allows for good-looking docs in your browser, but the markup also makes the raw text returned using help() look terrible. One of the aims of improving the docstrings should be to make both methods of accessing the docs look good."
msgstr ""

#: ../../devel/MEP/MEP10.rst:145
msgid "Implementation"
msgstr ""

#: ../../devel/MEP/MEP10.rst:147
msgid "The numpydoc extensions should be turned on for matplotlib.  There is an important question as to whether these should be included in the matplotlib source tree, or used as a dependency.  Installing Numpy is not sufficient to get the numpydoc extensions -- it's a separate install procedure.  In any case, to the extent that they require customization for our needs, we should endeavor to submit those changes upstream and not fork them."
msgstr ""

#: ../../devel/MEP/MEP10.rst:155
msgid "Manually go through all of the docstrings and update them to the new format and conventions.  Updating the cross references (from ```:func:`myfunc``` to ```func```) may be able to be semi-automated.  This is a lot of busy work, and perhaps this labor should be divided on a per-module basis so no single developer is over-burdened by it."
msgstr ""

#: ../../devel/MEP/MEP10.rst:162
msgid "Reorganize the API docs using autosummary and ``sphinx-autogen``. This should hopefully have minimal impact on the narrative documentation."
msgstr ""

#: ../../devel/MEP/MEP10.rst:166
msgid "Modify the example page generator (:file:`gen_rst.py`) so that it extracts the module docstring from the example and includes it in a non-literal part of the example page."
msgstr ""

#: ../../devel/MEP/MEP10.rst:170
msgid "Use ``sphinx-quickstart`` to generate a new-style Sphinx Makefile. The following features in the current :file:`make.py` will have to be addressed in some other way:"
msgstr ""

#: ../../devel/MEP/MEP10.rst:174
msgid "Copying of some static content"
msgstr ""

#: ../../devel/MEP/MEP10.rst:176
msgid "Specifying a \"small\" build (only low-resolution PNG files for examples)"
msgstr ""

#: ../../devel/MEP/MEP10.rst:178
msgid "Steps 1, 2, and 3 are interdependent.  4 and 5 may be done independently, though 5 has some dependency on 3."
msgstr ""

#: ../../devel/MEP/MEP10.rst:182
msgid "Backward compatibility"
msgstr ""

#: ../../devel/MEP/MEP10.rst:184
msgid "As this mainly involves docstrings, there should be minimal impact on backward compatibility."
msgstr ""

#: ../../devel/MEP/MEP10.rst:188
msgid "Alternatives"
msgstr ""

#: ../../devel/MEP/MEP10.rst:190
msgid "None yet discussed."
msgstr ""

