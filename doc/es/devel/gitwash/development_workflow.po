msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:24\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/devel/gitwash/development_workflow.po\n"
"X-Crowdin-File-ID: 2050\n"
"Language: es_ES\n"

#: ../../devel/gitwash/development_workflow.rst:7
msgid "Development workflow"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:9
msgid "You already have your own forked copy of the `Matplotlib`_ repository, by following :ref:`forking`. You have :ref:`set-up-fork`. You have configured git by following :ref:`configure-git`.  Now you are ready for some real work."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:14
msgid "Workflow summary"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:16
msgid "In what follows we'll refer to the upstream Matplotlib ``master`` branch, as \"trunk\"."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:19
msgid "Don't use your ``master`` branch for anything.  Consider deleting it."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:20
msgid "When you are starting a new set of changes, fetch any changes from trunk, and start a new *feature branch* from that."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:22
msgid "Make a new branch for each separable set of changes |emdash| \"one task, one branch\" (`ipython git workflow`_)."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:24
msgid "Name your branch for the purpose of the changes - e.g. ``bugfix-for-issue-14`` or ``refactor-database-code``."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:26
msgid "If you can possibly avoid it, avoid merging trunk or any other branches into your feature branch while you are working."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:28
msgid "If you do find yourself merging from trunk, consider :ref:`rebase-on-trunk`"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:29
msgid "Ask on the `Matplotlib mailing list`_ if you get stuck."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:30
msgid "Ask for code review!"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:32
msgid "This way of working helps to keep work well organized, with readable history. This in turn makes it easier for project maintainers (that might be you) to see what you've done, and why you did it."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:36
msgid "See `linux git workflow`_ and `ipython git workflow`_ for some explanation."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:39
msgid "Consider deleting your master branch"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:41
msgid "It may sound strange, but deleting your own ``master`` branch can help reduce confusion about which branch you are on.  See `deleting master on github`_ for details."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:48
msgid "Update the mirror of trunk"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:50
msgid "First make sure you have done :ref:`linking-to-upstream`."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:52
msgid "From time to time you should fetch the upstream (trunk) changes from github::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:56
msgid "This will pull down any commits you don't have, and set the remote branches to point to the right commit.  For example, 'trunk' is the branch referred to by (remote/branchname) ``upstream/master`` - and if there have been commits since you last checked, ``upstream/master`` will change after you do the fetch."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:64
msgid "Make a new feature branch"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:66
msgid "When you are ready to make some changes to the code, you should start a new branch.  Branches that are for a collection of related edits are often called 'feature branches'."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:70
msgid "Making an new branch for each set of related changes will make it easier for someone reviewing your branch to see what you are doing."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:73
msgid "Choose an informative name for the branch to remind yourself and the rest of us what the changes in the branch are for.  For example ``add-ability-to-fly``, or ``buxfix-for-issue-42``."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:85
msgid "Generally, you will want to keep your feature branches on your public github_ fork of `Matplotlib`_.  To do this, you `git push`_ this new branch up to your github repo.  Generally (if you followed the instructions in these pages, and by default), git will have a link to your github repo, called ``origin``.  You push up to your own repo on github with::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:93
msgid "In git >= 1.7 you can ensure that the link is correctly set by using the ``--set-upstream`` option::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:98
msgid "From now on git will know that ``my-new-feature`` is related to the ``my-new-feature`` branch in the github repo."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:104
msgid "The editing workflow"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:107
msgid "Overview"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:117
msgid "In more detail"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:119
msgid "Make some changes"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:120
msgid "See which files have changed with ``git status`` (see `git status`_). You'll see a listing like this one:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:138
msgid "Check what the actual changes are with ``git diff`` (`git diff`_)."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:139
msgid "Add any new files to version control ``git add new_file_name`` (see `git add`_)."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:141
msgid "To commit all modified files into the local copy of your repo,, do ``git commit -am 'A commit message'``.  Note the ``-am`` options to ``commit``. The ``m`` flag just signals that you're going to type a message on the command line.  The ``a`` flag |emdash| you can just take on faith |emdash| or see `why the -a flag?`_ |emdash| and the helpful use-case description in the `tangled working copy problem`_. The `git commit`_ manual page might also be useful."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:148
msgid "To push the changes up to your forked repo on github, do a ``git push`` (see `git push`_)."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:152
msgid "Ask for your changes to be reviewed or merged"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:154
msgid "When you are ready to ask for someone to review your code and consider a merge:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:156
msgid "Go to the URL of your forked repo, say ``https://github.com/your-user-name/matplotlib``."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:158
msgid "Use the 'Switch Branches' dropdown menu near the top left of the page to select the branch with your changes:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:163
msgid "Click on the 'Pull request' button:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:167
msgid "Enter a title for the set of changes, and some explanation of what you've done.  Say if there is anything you'd like particular attention for - like a complicated change or some code you are not happy with."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:171
msgid "If you don't think your request is ready to be merged, just say so in your pull request message.  This is still a good way of getting some preliminary code review."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:176
msgid "Some other things you might want to do"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:179
msgid "Delete a branch on github"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:189
msgid "Note the colon ``:`` before ``my-unwanted-branch``.  See also: https://help.github.com/articles/pushing-to-a-remote/#deleting-a-remote-branch-or-tag"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:193
msgid "Several people sharing a single repository"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:195
msgid "If you want to work on some stuff with other people, where you are all committing into the same repository, or even the same branch, then just share it via github."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:199
msgid "First fork Matplotlib into your account, as from :ref:`forking`."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:201
msgid "Then, go to your forked repository github page, say ``https://github.com/your-user-name/matplotlib``"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:204
msgid "Click on the 'Admin' button, and add anyone else to the repo as a collaborator:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:209
msgid "Now all those people can do::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:213
msgid "Remember that links starting with ``https`` or ``git@`` are read-write, and that ``git@`` uses the ssh protocol; links starting with ``git://`` are read-only."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:216
msgid "Your collaborators can then commit directly into that repo with the usual::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:223
msgid "Explore your repository"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:225
msgid "To see a graphical representation of the repository branches and commits::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:230
msgid "To see a linear list of commits for this branch::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:234
msgid "You can also look at the `network graph visualizer`_ for your github repo."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:237
msgid "Finally the :ref:`fancy-log` ``lg`` alias will give you a reasonable text-based graph of the repository."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:243
msgid "Rebasing on trunk"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:245
msgid "Let's say you thought of some work you'd like to do. You :ref:`update-mirror-trunk` and :ref:`make-feature-branch` called ``cool-feature``. At this stage trunk is at some commit, let's call it E. Now you make some new commits on your ``cool-feature`` branch, let's call them A, B, C.  Maybe your changes take a while, or you come back to them after a while.  In the meantime, trunk has progressed from commit E to commit (say) G:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:258
msgid "At this stage you consider merging trunk into your feature branch, and you remember that this here page sternly advises you not to do that, because the history will get messy. Most of the time you can just ask for a review, and not worry that trunk has got a little ahead.  But sometimes, the changes in trunk might affect your changes, and you need to harmonize them.  In this situation you may prefer to do a rebase."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:265
msgid "rebase takes your changes (A, B, C) and replays them as if they had been made to the current state of ``trunk``.  In other words, in this case, it takes the changes represented by A, B, C and replays them on top of G. After the rebase, your history will look like this:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:276
msgid "See `rebase without tears`_ for more detail."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:278
msgid "To do a rebase on trunk::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:289
msgid "In this situation, where you are already on branch ``cool-feature``, the last command can be written more succinctly as::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:294
msgid "When all looks good you can delete your backup branch::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:298
msgid "If it doesn't look good you may need to have a look at :ref:`recovering-from-mess-up`."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:301
msgid "If you have made changes to files that have also changed in trunk, this may generate merge conflicts that you need to resolve - see the `git rebase`_ man page for some instructions at the end of the \"Description\" section. There is some related help on merging in the git user manual - see `resolving a merge`_."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:309
msgid "Recovering from mess-ups"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:311
msgid "Sometimes, you mess up merges or rebases. Luckily, in git it is relatively straightforward to recover from such mistakes."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:314
msgid "If you mess up during a rebase::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:318
msgid "If you notice you messed up after the rebase::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:323
msgid "If you forgot to make a backup branch::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:339
msgid "Rewriting commit history"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:343
msgid "Do this only for your own feature branches."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:345
msgid "There's an embarrassing typo in a commit you made? Or perhaps the you made several false starts you would like the posterity not to see."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:348
msgid "This can be done via *interactive rebasing*."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:350
msgid "Suppose that the commit history looks like this::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:361
msgid "and ``6ad92e5`` is the last commit in the ``cool-feature`` branch. Suppose we want to make the following changes:"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:364
msgid "Rewrite the commit message for ``13d7934`` to something more sensible."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:365
msgid "Combine the commits ``2dec1ac``, ``a815645``, ``eadc391`` into a single one."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:367
msgid "We do as follows::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:374
msgid "This will open an editor with the following text in it::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:394
msgid "To achieve what we want, we will make the following changes to it::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:401
msgid "This means that (i) we want to edit the commit message for ``13d7934``, and (ii) collapse the last three commits into one. Now we save and quit the editor."
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:405
msgid "Git will then immediately bring up an editor for editing the commit message. After revising it, we get the output::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:414
msgid "and the history looks now like this::"
msgstr ""

#: ../../devel/gitwash/development_workflow.rst:420
msgid "If it went wrong, recovery is again possible as explained :ref:`above <recovering-from-mess-up>`."
msgstr ""

