msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:35\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/users/explain/performance.po\n"
"X-Crowdin-File-ID: 3370\n"
"Language: es_ES\n"

#: ../../users/explain/performance.rst:4
msgid "Performance"
msgstr ""

#: ../../users/explain/performance.rst:6
msgid "Whether exploring data in interactive mode or programmatically saving lots of plots, rendering performance can be a challenging bottleneck in your pipeline. Matplotlib provides multiple ways to greatly reduce rendering time at the cost of a slight change (to a settable tolerance) in your plot's appearance. The methods available to reduce rendering time depend on the type of plot that is being created."
msgstr ""

#: ../../users/explain/performance.rst:15
msgid "Line segment simplification"
msgstr ""

#: ../../users/explain/performance.rst:17
msgid "For plots that have line segments (e.g. typical line plots, outlines of polygons, etc.), rendering performance can be controlled by :rc:`path.simplify` and :rc:`path.simplify_threshold`, which can be defined e.g. in the :file:`matplotlibrc` file (see :doc:`/tutorials/introductory/customizing` for more information about the :file:`matplotlibrc` file). :rc:`path.simplify` is a Boolean indicating whether or not line segments are simplified at all. :rc:`path.simplify_threshold` controls how much line segments are simplified; higher thresholds result in quicker rendering."
msgstr ""

#: ../../users/explain/performance.rst:27
msgid "The following script will first display the data without any simplification, and then display the same data with simplification. Try interacting with both of them::"
msgstr ""

#: ../../users/explain/performance.rst:49
msgid "Matplotlib currently defaults to a conservative simplification threshold of ``1/9``. To change default settings to use a different value, change the :file:`matplotlibrc` file. Alternatively, users can create a new style for interactive plotting (with maximal simplification) and another style for publication quality plotting (with minimal simplification) and activate them as necessary. See :doc:`/tutorials/introductory/customizing` for instructions on how to perform these actions."
msgstr ""

#: ../../users/explain/performance.rst:59
msgid "The simplification works by iteratively merging line segments into a single vector until the next line segment's perpendicular distance to the vector (measured in display-coordinate space) is greater than the ``path.simplify_threshold`` parameter."
msgstr ""

#: ../../users/explain/performance.rst:65
msgid "Changes related to how line segments are simplified were made in version 2.1. Rendering time will still be improved by these parameters prior to 2.1, but rendering time for some kinds of data will be vastly improved in versions 2.1 and greater."
msgstr ""

#: ../../users/explain/performance.rst:71
msgid "Marker simplification"
msgstr ""

#: ../../users/explain/performance.rst:73
msgid "Markers can also be simplified, albeit less robustly than line segments. Marker simplification is only available to :class:`~matplotlib.lines.Line2D` objects (through the ``markevery`` property). Wherever :class:`~matplotlib.lines.Line2D` construction parameters are passed through, such as :func:`matplotlib.pyplot.plot` and :meth:`matplotlib.axes.Axes.plot`, the ``markevery`` parameter can be used::"
msgstr ""

#: ../../users/explain/performance.rst:85
msgid "The ``markevery`` argument allows for naive subsampling, or an attempt at evenly spaced (along the *x* axis) sampling. See the :doc:`/gallery/lines_bars_and_markers/markevery_demo` for more information."
msgstr ""

#: ../../users/explain/performance.rst:91
msgid "Splitting lines into smaller chunks"
msgstr ""

#: ../../users/explain/performance.rst:93
msgid "If you are using the Agg backend (see :ref:`what-is-a-backend`), then you can make use of :rc:`agg.path.chunksize` This allows users to specify a chunk size, and any lines with greater than that many vertices will be split into multiple lines, each of which has no more than ``agg.path.chunksize`` many vertices. (Unless ``agg.path.chunksize`` is zero, in which case there is no chunking.) For some kind of data, chunking the line up into reasonable sizes can greatly decrease rendering time."
msgstr ""

#: ../../users/explain/performance.rst:103
msgid "The following script will first display the data without any chunk size restriction, and then display the same data with a chunk size of 10,000. The difference can best be seen when the figures are large, try maximizing the GUI and then interacting with them::"
msgstr ""

#: ../../users/explain/performance.rst:129
msgid "Legends"
msgstr ""

#: ../../users/explain/performance.rst:131
msgid "The default legend behavior for axes attempts to find the location that covers the fewest data points (``loc='best'``). This can be a very expensive computation if there are lots of data points. In this case, you may want to provide a specific location."
msgstr ""

#: ../../users/explain/performance.rst:137
msgid "Using the *fast* style"
msgstr ""

#: ../../users/explain/performance.rst:139
msgid "The *fast* style can be used to automatically set simplification and chunking parameters to reasonable settings to speed up plotting large amounts of data. The following code runs it::"
msgstr ""

#: ../../users/explain/performance.rst:147
msgid "It is very lightweight, so it works well with other styles. Be sure the fast style is applied last so that other styles do not overwrite the settings::"
msgstr ""

