msgid ""
msgstr ""
"Project-Id-Version: matplotlib\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-01 17:05-0400\n"
"PO-Revision-Date: 2022-03-02 01:28\n"
"Last-Translator: \n"
"Language-Team: Spanish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: matplotlib\n"
"X-Crowdin-Project-ID: 502106\n"
"X-Crowdin-Language: es-ES\n"
"X-Crowdin-File: /[qu4nt.matplotlib-doc-es] main/doc/en/gallery/pie_and_polar_charts/pie_and_donut_labels.po\n"
"X-Crowdin-File-ID: 2628\n"
"Language: es_ES\n"

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:13
msgid "Click :ref:`here <sphx_glr_download_gallery_pie_and_polar_charts_pie_and_donut_labels.py>` to download the full example code"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:23
msgid "Labeling a pie and a donut"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:25
msgid "Welcome to the Matplotlib bakery. We will create a pie and a donut chart through the `pie method <matplotlib.axes.Axes.pie>` and show how to label them with a `legend <matplotlib.axes.Axes.legend>` as well as with `annotations <matplotlib.axes.Axes.annotate>`."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:32
msgid "As usual we would start by defining the imports and create a figure with subplots. Now it's time for the pie. Starting with a pie recipe, we create the data and a list of labels from it."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:37
msgid "We can provide a function to the ``autopct`` argument, which will expand automatic percentage labeling by showing absolute values; we calculate the latter back from relative data and the known sum of all values."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:41
msgid "We then create the pie and store the returned objects for later.  The first returned element of the returned tuple is a list of the wedges.  Those are `matplotlib.patches.Wedge` patches, which can directly be used as the handles for a legend. We can use the legend's ``bbox_to_anchor`` argument to position the legend outside of the pie. Here we use the axes coordinates ``(1, 0, 0.5, 1)`` together with the location ``\"center left\"``; i.e. the left central point of the legend will be at the left central point of the bounding box, spanning from ``(1, 0)`` to ``(1.5, 1)`` in axes coordinates."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:103
msgid "Now it's time for the donut. Starting with a donut recipe, we transcribe the data to numbers (converting 1 egg to 50 g), and directly plot the pie. The pie? Wait... it's going to be donut, is it not? Well, as we see here, the donut is a pie, having a certain ``width`` set to the wedges, which is different from its radius. It's as easy as it gets. This is done via the ``wedgeprops`` argument."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:110
msgid "We then want to label the wedges via `annotations <matplotlib.axes.Axes.annotate>`. We first create some dictionaries of common properties, which we can later pass as keyword argument. We then iterate over all wedges and for each"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:115
msgid "calculate the angle of the wedge's center,"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:116
msgid "from that obtain the coordinates of the point at that angle on the circumference,"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:118
msgid "determine the horizontal alignment of the text, depending on which side of the circle the point lies,"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:120
msgid "update the connection style with the obtained angle to have the annotation arrow point outwards from the donut,"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:122
msgid "finally, create the annotation with all the previously determined parameters."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:176
msgid "And here it is, the donut. Note however, that if we were to use this recipe, the ingredients would suffice for around 6 donuts - producing one huge donut is untested and might result in kitchen errors."
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:182
msgid "References"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:184
msgid "The use of the following functions, methods, classes and modules is shown in this example:"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:187
msgid "`matplotlib.axes.Axes.pie` / `matplotlib.pyplot.pie`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:188
msgid "`matplotlib.axes.Axes.legend` / `matplotlib.pyplot.legend`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:203
msgid ":download:`Download Python source code: pie_and_donut_labels.py <pie_and_donut_labels.py>`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:209
msgid ":download:`Download Jupyter notebook: pie_and_donut_labels.ipynb <pie_and_donut_labels.ipynb>`"
msgstr ""

#: ../../gallery/pie_and_polar_charts/pie_and_donut_labels.rst:216
msgid "Keywords: matplotlib code example, codex, python plot, pyplot `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_"
msgstr ""

